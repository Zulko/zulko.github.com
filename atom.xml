<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[__del__( self )]]></title>
  <link href="http://Zulko.github.io/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-05-03T21:23:18+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Viennese Mazes: what they are, and how to make one]]></title>
    <link href="http://Zulko.github.io/blog/2014/04/27/viennese-mazes-what-they-are/"/>
    <updated>2014-04-27T23:34:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/04/27/viennese-mazes-what-they-are</id>
    <content type="html"><![CDATA[<p><em>In this post I present an original concept of labyrinths and explain how they can be programmatically generated.</em></p>

<!-- more -->

<p>For some time now I have been designing labyrinths based on traffic lights, like this one:</p>

<p><img class="center" src="http://Zulko.github.io/images/vmazes/viennese_maze.jpeg" width="550" /></p>

<p>I call these <em>Viennese mazes</em> (long story) and since I couldn’t find anything similar on the Web, I assume that this is something new. Here are <a href="https://i.imgur.com/j2gWurM.jpg">some more</a> with other shapes, and <a href="https://i.imgur.com/bReTSfN.png">their solutions</a>.</p>

<p>These mazes are very difficult to design by hand, and this post is about how to ask your computer to do the work for you. We will see what a <em>good</em> Viennese maze is made of, and how to generate one using a simple evolutionary algorithm.</p>

<h2 id="viennese-mazes-are-a-special-kind-of-normal-mazes">Viennese mazes are (a special kind of) normal mazes</h2>

<p>My first intention with Viennese mazes was to make dynamic mazes, with <em>moving walls</em>. But under each Viennese maze there is actually a standard, old-school labyrinth.</p>

<p>To see this we must think in terms of <em>states</em>. A state describes where you are in the maze, and determines where you can go from there. In the maze above, state (c,1,a) means “I am in (c), I have passed 1 traffic light until then, and just before that I was in (a)”. From this state you cannot reach (d) as the light in this street has turned red, and you cannot reach (a) because you just came from here. But you can move to (b) or (g), that is, to state (b,2,c) or state (g,2,c). Note that states such as (c,1,a), (c,4,a), and (c,7,a) are actually the same state, because afer three moves all traffic lights come back to their original position. So there will always be a finite number of states in a Viennese maze.</p>

<p>If we draw a map of all (reachable) states and their connexions we obtain the following <em>states graph</em> :</p>

<p><img class="center" src="http://Zulko.github.io/images/vmazes/graph.jpeg" /></p>

<p>The green node marks the starting point, while the blue node is a reunion of all states corresponding to the goal (m). The nodes on the $i$-th line from the top can be reached in $i$ moves but no less, thick lines go downwards and thin lines go upwards.</p>

<p>This graph looks like a classical labyrinth, with crossroads, dead ends, loops… at one glance it gives an idea of the complexity and interestingness of the original Viennese maze. Therefore, we will consider that a good Viennese maze is a maze whose states graph makes a good labyrinth.</p>

<h2 id="what-makes-a-good-labyrinth-">What makes a good labyrinth ?</h2>

<p>Here is an illustration of a few criteria which make a labyrinth insteresting :</p>

<p><img class="center" src="http://Zulko.github.io/images/vmazes/classical_maze.jpeg" width="450" /></p>

<ol>
  <li>There must be a unique solution, the longer the better. In Viennese mazes It will be difficult to avoid loops like the one in <em>a</em>, where you leave the right track at some point and join it back later at exactly the same position. But there should be a unique mandatory path to the goal (in red in the drawing).</li>
  <li>There must be plenty of loops (like <em>b</em>), dead ends (like <em>c</em>), and links between false paths (like <em>d</em>), all of these preferally early on the path.</li>
  <li>The maze should be be difficult to solve backwards too, by having false ending paths (like <em>e</em>). This criterion also tends to produce nicer-looking Viennese mazes, with a better balance of the different colors.</li>
</ol>

<p>For the computer to be able to compare mazes and identify the most interesting ones we define scores <script type="math/tex"> S_1, S_2, S_3 </script> which will quantify how well each of the criteria 1,2,3, are fullfilled by a given maze. For instance</p>

<script type="math/tex; mode=display">
S_1(maze) = \begin{cases}
0, \,\, \mbox{if there is no solution,} \\
1, \,\, \mbox{if there are multiple solutions,} \\
L, \,\, \mbox{if there is a unique solution, of length $L$.}
\end{cases}
</script>

<p>The final score of a Viennese maze is given by the product</p>

<script type="math/tex; mode=display"> S = S_1^{c_1} \cdot S_2^{c_2} \cdot S_3^{c_3} </script>

<p>where the exponents <script type="math/tex"> c_1, c_2, c_3 </script> reflect the relative importance that we decide to attach to each criterion.</p>

<p>Evaluating this score on the graph of a Viennese maze is easy: the existence and uniqueness of a solution can be checked using a simple-path-finding algorithm. Dead-ends are simply the nodes of the graph with no descendents, and the loops of the maze correspond to the thin edges. The equivalent graph itself can be easily computed using Dijkstra’s efficient algorithm to find minimal paths between the start and the different states. The current Python implementation, relying on the Networkx package, enable to evaluate on the order of 1000 mazes per second (depending on their complexity).</p>

<h2 id="how-to-evolve-a-maze">How to evolve a maze</h2>

<p>Now that we have defined a score for our labyrinths, we will provide the computer with this uncolored canvas, for which we will ask a <em>coloring</em> (initial color of each traffic light) producing the best score possible :</p>

<p><img class="center" src="http://Zulko.github.io/images/vmazes/canvas.jpeg" width="250" /></p>

<p>There are $3^{24}$ (almost three hundred billion) ways of coloring the 24 streets on this canvas, and studying all these possibilities would be too long. But we can hope that a large number of these colorings make interesting mazes, and we will look semi-randomly for some of them.</p>

<p>An effective way to do so is to first colorize the canvas in a completely random way, then improve this coloring by repeating the following steps:</p>

<ol>
  <li>Create a new maze by randomly changing just a few colors of the current maze.</li>
  <li>Compute the score of this new maze.</li>
  <li>If the new maze scores lower than the current maze, dump it, otherwise it replaces the current maze. Go back to step 1.</li>
</ol>

<p>Here is a maze being being optimized following this mutation/selection procedure (over 24000 mazes were generated, only the successive improvements are shown):</p>

<p><img class="center" src="http://i.imgur.com/yc1lwgh.gif" title="'hosted on imgur'" /></p>

<p>This algorithm can be refined using annealing (in which you first evaluate many different mazes before refining the search around the best one), or any fancier search strategy such as genetic algorithms, ant colonies… What works best is still an open question.</p>

<h2 id="give-it-a-try-">Give it a try !</h2>

<p>If you want to try and make your own Viennese mazes (using for instance you district as a canvas), I wrote a Python package called <a href="http://zulko.github.io/vmfactory/">vmfactory</a> which implements all the steps discussed above. It can generate two variants of Viennese mazes: one where passing through the same light twice in a row is forbidden, and one where it isn’t (algorithmically, the only difference is the way the states graph is computed).</p>

<p>In the following example, we generate a squared canvas, we initialize a maze with random colors, optimize it, and generate a report (maze/graph/solution): </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">vmfactory</span> <span class="kn">import</span> <span class="n">Vmaze_NHT</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">vmfactory.canvas</span> <span class="kn">import</span> <span class="n">squares_grid</span>
</span><span class="line">
</span><span class="line"><span class="n">canvas</span> <span class="o">=</span> <span class="n">squares_grid</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c"># nodes will be numbered 0..15</span>
</span><span class="line"><span class="c"># NHT means no half-turns (can&#39;t pass a light twice in a row) </span>
</span><span class="line"><span class="n">maze</span> <span class="o">=</span> <span class="n">Vmaze_NHT</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">goal</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
</span><span class="line"><span class="n">maze</span><span class="o">.</span><span class="n">colorize</span><span class="p">(</span> <span class="n">maze</span><span class="o">.</span><span class="n">random_colors</span><span class="p">()</span> <span class="p">)</span>
</span><span class="line"><span class="n">maze</span><span class="o">.</span><span class="n">anneal</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span> <span class="c"># optimize the maze</span>
</span><span class="line"><span class="n">maze</span><span class="o">.</span><span class="n">make_report</span><span class="p">()</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">&#39;myreport.png&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/vmazes/report.jpeg" width="550" /></p>

<p>The package is based on Networkx, Numpy and Matplotlib. The code is rather short (most of it serves to draw fancy graphs !), and modular : you can easily change the rules, change the way the score is computed, change the optimization procedure, or the way the reports are drawn.</p>

<p>Thank you for reading until there, and happy mazing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transcribing Piano Rolls, the Pythonic Way]]></title>
    <link href="http://Zulko.github.io/blog/2014/02/12/transcribing-piano-rolls/"/>
    <updated>2014-02-12T00:25:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/02/12/transcribing-piano-rolls</id>
    <content type="html"><![CDATA[<p><em>In this post I use Fourier transforms to revive a forgotten Gershwin piano piece.</em></p>

<!-- more -->

<p>Piano rolls are these rolls of perforated paper that you feed to the saloon’s mechanical piano. They have been very popular until the 1950s, and the piano roll repertory counts thousands of arrangements (some by greatest names of jazz) which have never been published in any other form.</p>

<p>Here is <em>Limehouse Nights</em> (~1918), by a 20-years-old George Gershwin:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/VjkS-XHScXU "></iframe></div>

<p>It is cool, it is public domain music, and I want to play it. But like for so many other rolls, there is no published sheet music.</p>

<p>Fortunately, someone took a video of the same performance with a focus on the roll:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/wMsEbYCh7yY "></iframe></div>

<p>In this post I show how to turn that video into playable sheet music with the help of a few lines of Python. <a href="#final_result">At the end</a> I provide the sheet music, a human rendition, and a Python package that implements the method (and can also be used to transcribe from MIDI files).</p>

<h2 id="downloading-the-video">Downloading the video</h2>

<p>You can download the video from Youtube using <a href="">youtube-dl</a> in a terminal:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">youtube-dl wMsEbYCh7yY -o limehouse_nights.mp4</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-1-segmentation-of-the-roll">Step 1: Segmentation of the roll</h2>

<p>In each frame of the video we will focus on a well-located line of pixels:
<img class="center" src="http://Zulko.github.io/images/rolls_transcription/watched_line.jpeg" /></p>

<p>By extracting this line from each video frame and stacking the obtained 
lines on one another we can reconstitute an approximate <em>scan</em> of the piano roll:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Required Python modules</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span> <span class="c"># for video processing</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pylab</span> <span class="kn">import</span> <span class="o">*</span> <span class="c"># for mathematics/plotting</span>
</span><span class="line">
</span><span class="line"><span class="c"># load the video, keep the clip between t=2s and t= 30s</span>
</span><span class="line"><span class="n">video</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&#39;./limehouse_nights.mp4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># extract the focus lines in the different frames, stack them.</span>
</span><span class="line"><span class="n">roll_picture</span> <span class="o">=</span> <span class="n">vstack</span><span class="p">([</span><span class="n">frame</span><span class="p">[[</span><span class="mi">156</span><span class="p">],</span><span class="mi">58</span><span class="p">:</span><span class="mi">478</span><span class="p">]</span>
</span><span class="line">                       <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">video</span><span class="o">.</span><span class="n">iter_frames</span><span class="p">()])</span>
</span><span class="line">
</span><span class="line"><span class="n">imshow</span><span class="p">(</span> <span class="n">roll_picture</span> <span class="p">)</span> <span class="c"># display the obtained picture</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/roll_RGB.jpeg" /></p>

<p>We can see that the holes are placed along columns. Each of these 
columns corresponds to one key of the piano. A possible way to find the 
x-coordinates of these columns in the picture is to look at the minimal 
luminosity of each column of pixels:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">roll_greyscale</span> <span class="o">=</span> <span class="n">roll_picture</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c"># RGB to grey</span>
</span><span class="line"><span class="n">luminosity_per_column</span> <span class="o">=</span> <span class="n">roll_greyscale</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span> <span class="n">luminosity_per_column</span><span class="p">)</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;column of pixels (x-index)&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;minimal luminosity&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/min_lum.jpeg" /></p>

<p>Holes are low-luminosity zones in the picture, therefore the x-coordinates with lower luminosity in the curve above indicate hole-columns. They are not equally spaced because some piano keys are not used in this piece, but there is clearly a dominant period, which we will find by looking at the
frequency spectrum of the curve.</p>

<p>We compute that spectrum using a continuous Fourier transform. The peaks in the spectrum below
mean that a periodic pattern is present in the curve:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">n_lines</span><span class="p">,</span> <span class="n">n_columns</span> <span class="o">=</span> <span class="n">roll_greyscale</span><span class="o">.</span><span class="n">shape</span>
</span><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="n">n_columns</span><span class="p">)</span> <span class="c"># 0,1,2,3,4... n_columns</span>
</span><span class="line"><span class="n">lum0</span> <span class="o">=</span> <span class="n">luminosity_per_column</span> <span class="o">-</span> <span class="n">luminosity_per_column</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">fourier_transform</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">period</span><span class="p">,</span> <span class="n">tt</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; See http://en.wikipedia.org/wiki/Fourier_transform</span>
</span><span class="line"><span class="sd">    I could also have used Numpy&#39;s fft.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">func</span> <span class="p">:</span> <span class="p">(</span><span class="n">signal</span><span class="o">*</span><span class="n">func</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">tt</span><span class="o">/</span><span class="n">period</span><span class="p">))</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">cos</span><span class="p">)</span><span class="o">+</span> <span class="mi">1j</span><span class="o">*</span><span class="n">f</span><span class="p">(</span><span class="n">sin</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">widths</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="o">.</span><span class="mo">01</span><span class="p">)</span>
</span><span class="line"><span class="n">transform</span> <span class="o">=</span> <span class="n">array</span><span class="p">([</span> <span class="n">fourier_transform</span><span class="p">(</span><span class="n">lum0</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">tt</span><span class="p">)</span>
</span><span class="line">                    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">widths</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">widths</span><span class="p">,</span> <span class="nb">abs</span><span class="p">(</span><span class="n">transform</span><span class="p">))</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&quot;Period (in number of pixels)&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">ylabel</span><span class="p">(</span><span class="s">&quot;Spectrum value&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/lum_spectrum.jpeg" /></p>

<p>The higher peak of the spectrum indicates a period of x=5.46 pixels, and this is indeed the distance in pixels between two hole-columns. This, plus the <em>phase</em> of the spectrum in this point, gives us the coordinates of the centers of the hole-columns (vertical lines below).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># The maximum the transform indicates the holes&#39; width</span>
</span><span class="line"><span class="n">optimal_i</span> <span class="o">=</span> <span class="n">argmax</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">transform</span><span class="p">))</span>
</span><span class="line"><span class="n">hole_width</span> <span class="o">=</span> <span class="n">widths</span><span class="p">[</span><span class="n">optimal_i</span><span class="p">]</span>
</span><span class="line"><span class="n">offset</span> <span class="o">=</span> <span class="n">angle</span><span class="p">(</span><span class="n">transform</span><span class="p">[</span><span class="n">optimal_i</span><span class="p">])</span> <span class="o">+</span><span class="n">hole_width</span><span class="o">/</span><span class="mi">2</span> <span class="c"># to be revised.</span>
</span><span class="line">
</span><span class="line"><span class="n">keys_positions</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">n_columns</span><span class="p">,</span> <span class="n">hole_width</span><span class="p">)</span>
</span><span class="line"><span class="n">keys_positions</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">keys_positions</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">luminosity_per_column</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">keys_positions</span><span class="p">:</span>
</span><span class="line">    <span class="n">axvline</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&#39;k&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;column of pixels&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;minimal luminosity&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/lum_plus_keycolumns.jpeg" /></p>

<p>We can now reduce our image the piano roll to keep only one pixel per hole column. In the resulting picture, one column gives the time profile of one key in the piano: when it is pressed, and when it is released.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">keys_greyscale</span> <span class="o">=</span> <span class="n">roll_greyscale</span><span class="p">[:,</span> <span class="n">keys_positions</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">imshow</span><span class="p">(</span><span class="n">keys_greyscale</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">150</span><span class="p">])</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;piano-key column&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;video frame number&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/roll_keycolumns.jpeg" /></p>

<p>To reconstitute the sheet music the most important is to know when a key
is pressed, not really when it is released. So we will look for the beginning of the holes, i.e. pixels that present a
hole, while the pixel just above them doesn’t.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># we threshold the picture to separate the pixels</span>
</span><span class="line"><span class="c"># into &#39;hole&#39; and &#39;no-hole&#39;</span>
</span><span class="line"><span class="n">key_pressed</span> <span class="o">=</span> <span class="n">keys_greyscale</span> <span class="o">&lt;</span> <span class="mf">0.8</span><span class="o">*</span><span class="n">keys_greyscale</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
</span><span class="line"><span class="c"># We look at the differences between consecutive lines</span>
</span><span class="line"><span class="n">key_changes</span> <span class="o">=</span>  <span class="n">diff</span><span class="p">(</span><span class="n">key_pressed</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">imshow</span><span class="p">(</span><span class="n">key_changes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/roll_strikes.jpeg" /></p>

<p>This worked quite well: in that picture above red dots indicate key strikes and blue dots indicate key releases. Let us gather all the key strikes in a list.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Ly</span><span class="p">,</span> <span class="n">Lx</span> <span class="o">=</span> <span class="n">key_changes</span><span class="o">.</span><span class="n">shape</span>
</span><span class="line"><span class="n">keys_strikes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="c"># (column number, strike time)</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">Ly</span><span class="p">)</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">Lx</span><span class="p">)</span>
</span><span class="line">                <span class="k">if</span> <span class="n">key_changes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-2-finding-the-pitch">Step 2: Finding the pitch</h2>

<p>We know that the columns correspond to piano keys. They are sorted left to right from the lowest to the highest note. But which column corresponds to the C4 (the <em>middle C</em>)?</p>

<p>I cheated a little and I looked at the first video (the one where you 
can see the piano keyboard) to see which notes were pressed in the 
first chords. I concluded that C4 is represented by column 34.</p>

<p>From now on I would like the musical notes C4, C#4, D4… to be coded by their respective numbers in the MIDI norm: 60, 61, 62… So I will <em>transpose</em> my list of key strikes by adding 26 to each note.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">transpose</span> <span class="o">=</span> <span class="mi">26</span>
</span><span class="line"><span class="n">keys_strikes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">t</span><span class="p">,</span> <span class="n">key</span><span class="o">+</span><span class="n">transpose</span><span class="p">)</span>
</span><span class="line">                <span class="k">for</span> <span class="n">t</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keys_strikes</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-3-quantization-of-the-notes">Step 3: Quantization of the notes</h2>

<p>We have a list of notes with the time (or frame) at which they are 
played. We will now determine which notes are quarters, which are 
eights, etc. This operation is equivalent to finding the tempo of the 
piece. Let us first have a look at the times at which the the piano keys are striken:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">strike_times</span> <span class="o">=</span> <span class="p">(</span><span class="n">key_changes</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">strike_times</span><span class="p">)</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;frame number&#39;</span><span class="p">);</span> <span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;number of keys hit&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/number_keys_hit.jpeg" /></p>

<p>We observe regularly-spaced peaks corresponding to chords (several notes 
striken together). In this kind of music, chords are mainly played on 
the beat. Therefore, computing the main period in the graph above will give us the duration of a beat (or quarter). Let us have a look at the spectrum.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">strike_times</span><span class="p">))</span>
</span><span class="line"><span class="n">durations</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mf">1.1</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="o">.</span><span class="mo">02</span><span class="p">)</span> <span class="c"># avoid 1.0</span>
</span><span class="line"><span class="n">transform</span> <span class="o">=</span> <span class="n">array</span><span class="p">([</span><span class="n">fourier_transform</span><span class="p">(</span><span class="n">strike_times</span><span class="p">,</span><span class="n">d</span><span class="p">,</span> <span class="n">tt</span><span class="p">)</span>
</span><span class="line">                    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">durations</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="n">optimal_i</span> <span class="o">=</span> <span class="n">argmax</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">transform</span><span class="p">))</span>
</span><span class="line"><span class="n">quarter_duration</span> <span class="o">=</span> <span class="n">durations</span><span class="p">[</span><span class="n">optimal_i</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">durations</span><span class="p">,</span> <span class="nb">abs</span><span class="p">(</span><span class="n">transform</span><span class="p">))</span>
</span><span class="line"><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;period (in frames)&#39;</span><span class="p">);</span> <span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Spectrum value&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/notes_spectrum.jpeg" /></p>

<p>The higher peak indicates that a quarter has a duration corresponding to 7.1 frames of the video. Just for info, we can estimate the tempo of the piece with</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">tempo</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">video</span><span class="o">.</span><span class="n">fps</span> <span class="o">*</span> <span class="mf">60.0</span><span class="o">/</span><span class="n">quarter_duration</span><span class="p">)</span> <span class="c"># we find 252.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We will now separate the hands. Let’s keep things simple and say that the left hand takes all the notes below the middle C.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">C4</span> <span class="o">=</span> <span class="mi">60</span>
</span><span class="line"><span class="n">left_hand</span> <span class="o">=</span> <span class="p">[(</span><span class="n">t</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="ow">in</span> <span class="n">keys_strikes</span> <span class="k">if</span> <span class="n">key</span><span class="o">&lt;</span><span class="n">C4</span><span class="p">]</span>
</span><span class="line"><span class="n">right_hand</span> <span class="o">=</span> <span class="p">[(</span><span class="n">t</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="ow">in</span> <span class="n">keys_strikes</span> <span class="k">if</span> <span class="n">key</span><span class="o">&gt;=</span><span class="n">C4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we quantize the notes of each hand with the following algorithm: compute the time duration $d$ between a note and the previous note, and compare $d$ to the duration $Q$ of the quarter:</p>

<ul>
  <li>If $d &lt; Q/4$, consider that the two notes belong to the same
chord.</li>
  <li>Else, if $Q/4 \leq d &lt; 3Q/4$ , consider that the previous note was an
eighth.</li>
  <li>Else, if $ 3Q/4 \leq d &lt; 5Q/4 $, consider that the previous note
was a quarter</li>
  <li>etc.</li>
</ul>

<p>And we treat the notes one after another:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">quantize</span><span class="p">(</span><span class="n">keys_strikes</span><span class="p">,</span> <span class="n">quarter_duration</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="c"># the result is initialized with one &#39;empty&#39; note.</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span><span class="s">&#39;notes&#39;</span><span class="p">:[],</span> <span class="s">&#39;duration&#39;</span><span class="p">:</span><span class="bp">None</span><span class="p">,</span> <span class="s">&#39;t_strike&#39;</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">time</span><span class="p">,</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keys_strikes</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">        <span class="c"># time elapsed since last strike </span>
</span><span class="line">        <span class="n">delay</span> <span class="o">=</span> <span class="n">time</span> <span class="o">-</span> <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;t_strike&#39;</span><span class="p">]</span>
</span><span class="line">        <span class="c"># the next line quantizes that time in eights.</span>
</span><span class="line">        <span class="n">delay_q</span> <span class="o">=</span> <span class="mf">0.5</span><span class="o">*</span><span class="nb">int</span><span class="p">((</span><span class="mf">4.0</span><span class="o">*</span><span class="n">delay</span><span class="o">/</span><span class="n">quarter_duration</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">delay_q</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span><span class="c"># put note in previous chord</span>
</span><span class="line">            <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;notes&#39;</span><span class="p">]:</span>
</span><span class="line">                <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;notes&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">else</span><span class="p">:</span> <span class="c"># this is a &#39;new&#39; note/chord</span>
</span><span class="line">            <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;duration&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">delay_q</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="p">{</span><span class="s">&#39;notes&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">key</span><span class="p">],</span>
</span><span class="line">                            <span class="s">&#39;duration&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class="line">                            <span class="s">&#39;t_strike&#39;</span><span class="p">:</span><span class="n">time</span><span class="p">}</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;duration&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span> <span class="c"># give duration to last note</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;notes&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class="line">        <span class="n">result</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c"># first note will surely be empty</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">result</span>
</span><span class="line">
</span><span class="line"><span class="n">left_hand_quantized</span> <span class="o">=</span> <span class="n">quantize</span><span class="p">(</span><span class="n">left_hand</span><span class="p">,</span> <span class="n">quarter_duration</span><span class="p">)</span>
</span><span class="line"><span class="n">right_hand__quantized</span> <span class="o">=</span> <span class="n">quantize</span><span class="p">(</span><span class="n">right_hand</span><span class="p">,</span> <span class="n">quarter_duration</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is what the final data looks like:</p>

<pre><code>&gt;&gt;&gt; right_hand_q[:4]
#&gt; [{'duration': 1.0, 'notes': [70, 72, 76, 80], 't_strike': 20},
#&gt;  {'duration': 1.0, 'notes': [68, 74, 78, 82], 't_strike': 28},
#&gt;  {'duration': 1.0, 'notes': [66, 76, 80, 84], 't_strike': 35},
#&gt;  {'duration': 1.0, 'notes': [68, 74, 78, 82], 't_strike': 43}]
</code></pre>

<h2 id="step-4-export-to-sheet-music-with-lilypond">Step 4: Export to sheet music with Lilypond</h2>

<p>Our script’s last task is to convert these lists of quantized notes to a music notation language called
<a href="http://www.lilypond.org/index.fr.html">Lilypond</a>, which wan be compiled into high-quality sheet music.
Some packages like music21 can do that, but it is also fairly easy to program your own converter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># non-exhaustive lists (but will do for our example)</span>
</span><span class="line"><span class="n">lilynotes</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;cis&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;ees&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">,</span>
</span><span class="line">             <span class="s">&#39;fis&#39;</span><span class="p">,</span> <span class="s">&#39;g&#39;</span><span class="p">,</span> <span class="s">&#39;gis&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;bes&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">]</span>
</span><span class="line"><span class="n">lilyoctaves</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;,,,&#39;</span><span class="p">,</span><span class="s">&#39;,,&#39;</span><span class="p">,</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">,</span><span class="s">&quot;&#39;&quot;</span><span class="p">,</span> <span class="s">&quot;&#39;&#39;&quot;</span><span class="p">,</span> <span class="s">&quot;&#39;&#39;&#39;&quot;</span><span class="p">]</span>
</span><span class="line"><span class="n">lilydurations</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0.5</span><span class="p">:</span><span class="s">&#39;8&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="s">&#39;4&#39;</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">:</span><span class="s">&#39;4.&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="s">&#39;2&#39;</span><span class="p">,</span>
</span><span class="line">                 <span class="mi">3</span><span class="p">:</span> <span class="s">&#39;2.&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span><span class="s">&#39;1&#39;</span><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">midi2lily</span><span class="p">(</span><span class="n">note</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; converts  60-&gt;c, and 61-&gt;cis, etc. &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">octave</span><span class="p">,</span> <span class="n">rank</span> <span class="o">=</span> <span class="p">(</span><span class="n">note</span> <span class="o">/</span> <span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">note</span> <span class="o">%</span> <span class="mi">12</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lilynotes</span><span class="p">[</span><span class="n">rank</span><span class="p">]</span><span class="o">+</span><span class="n">lilyoctaves</span><span class="p">[</span><span class="n">octave</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">strike2lily</span><span class="p">(</span><span class="n">strike</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; converts [60,64],1 -&gt; &lt;c e&gt;4 &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">notes</span><span class="p">,</span> <span class="n">duration</span> <span class="o">=</span><span class="n">strike</span><span class="p">[</span><span class="s">&#39;notes&#39;</span><span class="p">],</span> <span class="n">strike</span><span class="p">[</span><span class="s">&#39;duration&#39;</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">notes</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="c"># chord</span>
</span><span class="line">        <span class="n">chord</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">midi2lily</span><span class="p">,</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">notes</span><span class="p">)))</span>
</span><span class="line">        <span class="k">return</span><span class="s">&quot;&lt; </span><span class="si">%s</span><span class="s"> &gt;&quot;</span><span class="o">%</span><span class="n">chord</span> <span class="o">+</span><span class="n">lilydurations</span><span class="p">[</span><span class="n">duration</span><span class="p">]</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">midi2lily</span><span class="p">(</span><span class="n">notes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span><span class="n">lilydurations</span><span class="p">[</span><span class="n">duration</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lilyscore</span><span class="p">(</span><span class="n">strikes</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; converts a python list of srikes into Lilypond &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">strike2lily</span><span class="p">,</span><span class="n">strikes</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">left_hand_lily</span> <span class="o">=</span> <span class="n">lilyscore</span><span class="p">(</span><span class="n">left_hand_quantized</span><span class="p">)</span>
</span><span class="line"><span class="n">right_hand_lily</span> <span class="o">=</span> <span class="n">lilyscore</span><span class="p">(</span><span class="n">right_hand_quantized</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we just write this lilyfied sheet music in a file and render the sheet music by calling lilypond.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;limehouse.ly&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w+&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;\score{</span><span class="se">\\</span><span class="s">new Voice{ </span><span class="se">\\</span><span class="s">tempo 4=</span><span class="si">%d</span><span class="s">&quot;</span><span class="o">%</span><span class="n">tempo</span>
</span><span class="line">            <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s"> </span><span class="si">%s</span><span class="s">}}&quot;</span><span class="o">%</span><span class="n">right_hand_lily</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># render the sheet music by running Lilypond</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;lilypond </span><span class="si">%s</span><span class="s">&#39;</span><span class="o">%</span><span class="n">filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here are the first lines of the resulting PDF file, showing the right 
hand’s part.</p>

<p><img class="center" src="http://Zulko.github.io/images/rolls_transcription/right_hand_ly.jpg" /></p>

<p>The script has made a pretty good work here, all the notes are there 
with the right pitch and the right duration. If we now transcribe the 
whole piece we will see some mistakes (mostly notes attributed to the 
wrong hand, and more rarely notes with a wrong duration, wrong pitch, etc.), 
which have to be corrected, but still it is pretty cool to have these 
1500 notes crunched in just a few seconds.
The Lylipond editor <a href="http://frescobaldi.org/">Frescobaldi</a> is perfect 
to finish the editing.</p>

<p><a name="final_result"></a></p>

<h2 id="final-result">Final result</h2>

<p>After 3 hours of editing we come to this playable sheet music (<a href="https://github.com/Zulko/-sheet-music--Gerhswin-Limehouse-Nights/blob/master/pdf/Gershwin%20-%20Limehouse%20Nights%20(Piano%20Roll).pdf?raw=true">PDF</a>) and I can tease the keyboard like I’m George Gershwin !</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/V2XCJNZjm4w "></iframe></div>

<p>Ok, it’s just the first bars - I am still unhappy with my rendition of the rest, it’s a pretty demanding piece.</p>

<p>Since the piece is in the public domain I also put my transcription in 
the public domain, and placed its lilypond source <a href="https://github.com/Zulko/-sheet-music--Gerhswin-Limehouse-Nights">here on Github</a> (feel 
free to share/correct/modify it !).</p>

<p>I also wrapped this code into a python package called <a href="http://zulko.github.io/unroll/">Unroll</a> which can 
transcribe from a video of from a midi file (it uses the package 
<em>music21</em> for lilypond conversion, and also provides a convenient LilyPond piano template).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">unroll</span> <span class="kn">import</span> <span class="n">video2scan</span><span class="p">,</span> <span class="n">rollscan2keystrikes</span><span class="p">,</span> <span class="n">KeyStrikes</span>
</span><span class="line"><span class="c"># just transcribe until t=74s, after this it is a repeat.</span>
</span><span class="line"><span class="n">scan</span> <span class="o">=</span> <span class="n">video2scan</span><span class="p">(</span><span class="n">videofile</span> <span class="o">=</span> <span class="s">&quot;limehouse_nights.mp4&quot;</span><span class="p">,</span>
</span><span class="line">                  <span class="n">start</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mi">74</span><span class="p">,</span>
</span><span class="line">                  <span class="n">focus</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">im</span> <span class="p">:</span> <span class="n">im</span><span class="p">[[</span><span class="mi">156</span><span class="p">],</span><span class="mi">58</span><span class="p">:</span><span class="mi">478</span><span class="p">])</span>
</span><span class="line"><span class="n">keystrikes</span> <span class="o">=</span> <span class="n">rollscan2keystrikes</span><span class="p">(</span><span class="n">scan</span><span class="p">,</span> <span class="n">report</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">transposed</span><span class="p">(</span><span class="mi">26</span><span class="p">)</span>
</span><span class="line"><span class="n">keystrikes</span><span class="o">.</span><span class="n">transcribe</span><span class="p">(</span><span class="s">&#39;test2.ly&#39;</span><span class="p">,</span> <span class="n">quarter_durations</span> <span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.01</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh, and that video of me playing was also made with Python (and my library <a href="http://zulko.github.io/moviepy/">MoviePy</a>). Here is <a href="https://gist.github.com/Zulko/10489427">the script</a> that generated it. </p>

<h2 id="a-final-word-on-piano-rolls-transcription">A final word on piano rolls transcription</h2>

<p>I have been transcribing rolls as an occasional hobby for years, and I 
am not the only one: here is 
<a href="http://piyo.ciao.jp/sm/main.html">another</a> transcriber, and 
<a href="http://ragtime-france.fr/Ragtime/indexUS.htm">another</a> and yet <a href="http://www.moltoallegro.com">another</a>. Even <em>Limehouse Nights</em> has apparently been <a href="http://www.youtube.com/watch?v=t9o5a7G4l20">recorded</a> in 1992 but the pianist didn’t publish his transcription.</p>

<p>Most of us transcribe from MIDI files which are made from piano rolls 
scans (starting from MIDI files is equivalent to starting directly to 
Step 3, quantization and hands separation). Thousands of MIDI files 
from rolls scans are available on the internet (like 
<a href="http://www.iammp.org">here</a> or <a href="http://www.pianola.co.nz">here</a>) but 
not all mechanical piano owners have the appropriate scanner, so 
there must be thousands of other rolls in private collections which 
have never been scanned and pushed on the Internet.</p>

<p>I wrote this post to show that just filming piano rolls in action is enough for transcriptions purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making GIFs from Video Files with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/"/>
    <updated>2014-01-23T22:08:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python</id>
    <content type="html"><![CDATA[<p><em>Sometimes producing a good animated GIF requires a few advanced tweaks, for which scripting can help. So I added a GIF export feature to MoviePy, a Python package originally written for video editing.</em></p>

<!-- more -->

<p>For this demo we will make a few GIFs out of this trailer:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/2Jw-AeaU5WI "></iframe></div>

<h2 id="converting-a-video-excerpt-into-a-gif">Converting a video excerpt into a GIF</h2>

<p>In what follows we import <a href="http://zulko.github.io/moviepy/">MoviePy</a>, we open the video file, we select the part between 1’22.65 (1 minute 22.65 seconds) and 1’23.2, reduce its size (to 30% of the original) and save it as a GIF:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line">
</span><span class="line"><span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">22.65</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">23.2</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">              <span class="n">resize</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">to_gif</span><span class="p">(</span><span class="s">&quot;use_your_head.gif&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/F1oOtnP.gif" title="'Use Your Head - Hosted by imgur'" /></p>

<h2 id="cropping-the-image">Cropping the image</h2>

<p>For my next GIF I will only keep the center of the screen. If you intend to use MoviePy, note that you can preview a clip with <code>clip.preview()</code>. During the preview clicking on a pixel will print its position, which is convenient for cropping with precision.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">kris_sven</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                   <span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">13.4</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">13.9</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">                   <span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                   <span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">145</span><span class="p">,</span><span class="n">x2</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span>\ <span class="c"># remove left-right borders</span>
</span><span class="line">                   <span class="n">to_gif</span><span class="p">(</span><span class="s">&quot;kris_sven.gif&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/CFFYEpd.gif" title="'Kris and Sven - Hosted by imgur'" /></p>

<h2 id="freezing-a-region">Freezing a region</h2>

<p>Many GIF makers like to <em>freeze</em> some parts of the GIF to reduce the file size and/or focus the attention on one part of the animation.</p>

<p>In the next GIF we freeze the left part of the clip. To do so we  take a snapshot of
the clip at t=0.2 seconds, we crop this snapshot to only keep the left half, then we make a composite clip which superimposes the cropped snapshot on the original clip:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">anna_olaf</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">(</span><span class="mf">87.9</span><span class="p">,</span><span class="mf">88.1</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">speedx</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">.</span>\ <span class="c"># Play at half speed</span>
</span><span class="line">              <span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">snapshot</span> <span class="o">=</span> <span class="n">anna_olaf</span><span class="o">.</span>\
</span><span class="line">              <span class="n">crop</span><span class="p">(</span><span class="n">x2</span><span class="o">=</span> <span class="n">anna_olaf</span><span class="o">.</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span>\ <span class="c"># remove right half</span>
</span><span class="line">              <span class="n">to_ImageClip</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span><span class="o">.</span>\ <span class="c"># snapshot of the clip at t=0.2s</span>
</span><span class="line">              <span class="n">set_duration</span><span class="p">(</span><span class="n">anna_olaf</span><span class="o">.</span><span class="n">duration</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">anna_olaf</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">])</span><span class="o">.</span>\
</span><span class="line">    <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;anna_olaf.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/Fc9Qc5f.gif" title="'Anna and Olaf - Hosted by imgur'" /></p>

<h2 id="freezing-a-more-complicated-region">Freezing a more complicated region</h2>

<p>This time we will apply a custom mask to the snapshot to specify where it will be transparent (and let the animated part appear)
.
<img class="center" src="http://Zulko.github.io/images/gifs/mask.jpeg" title="'That's what a mask is for.'" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">moviepy.video.tools.drawing</span> <span class="kn">as</span> <span class="nn">dw</span>
</span><span class="line">
</span><span class="line"><span class="n">anna_kris</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">38.15</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">38.5</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">              <span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># coordinates p1,p2 define the edges of the mask</span>
</span><span class="line"><span class="n">mask</span> <span class="o">=</span> <span class="n">dw</span><span class="o">.</span><span class="n">color_split</span><span class="p">(</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">size</span><span class="p">,</span>
</span><span class="line">                      <span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="mi">445</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="mi">275</span><span class="p">),</span>
</span><span class="line">                      <span class="n">grad_width</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span> <span class="c"># blur the mask&#39;s edges</span>
</span><span class="line">
</span><span class="line"><span class="n">snapshot</span> <span class="o">=</span> <span class="n">anna_kris</span><span class="o">.</span><span class="n">to_ImageClip</span><span class="p">()</span><span class="o">.</span>\
</span><span class="line">                 <span class="n">set_duration</span><span class="p">(</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">duration</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                 <span class="n">set_mask</span><span class="p">(</span><span class="n">ImageClip</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="n">ismask</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">anna_kris</span><span class="p">,</span><span class="n">snapshot</span><span class="p">])</span><span class="o">.</span>\
</span><span class="line">    <span class="n">speedx</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">    <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;anna_kris.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c"># fuzz= GIF compression</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/SBHkNqt.gif" title="'Anna and Olaf - Hosted by imgur'" /></p>

<h2 id="time-symetrization">Time-symetrization</h2>

<p>Surely you have noticed that in the previous GIFs, the end did not always look like the beginning. As a consequence, you could see a disruption every time the animation was restarted. A way to avoid this is to time-symetrize the clip, i.e. to make the clip play once forwards, then once backwards. This way the <em>end</em> of the clip really <em>is</em> the beginning of the clip. This creates a GIF that can loop fluidly, without a real beginning or end.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">time_symetrize</span><span class="p">(</span><span class="n">clip</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Returns the clip played forwards then backwards. In case</span>
</span><span class="line"><span class="sd">    you are wondering, vfx (short for Video FX) is loaded by</span>
</span><span class="line"><span class="sd">    &gt;&gt;&gt; from moviepy.editor import * &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">clip</span><span class="p">,</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span> <span class="n">vfx</span><span class="o">.</span><span class="n">time_mirror</span> <span class="p">)])</span>
</span><span class="line">
</span><span class="line"><span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">subclip</span><span class="p">(</span><span class="mf">36.5</span><span class="p">,</span><span class="mf">36.9</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">189</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">433</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">fx</span><span class="p">(</span> <span class="n">time_symetrize</span> <span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;sven.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/fuqLsRG.gif" title="'Sven - hosted on Imgur'" /></p>

<p>Ok, this might be a bad example of time symetrization,it makes the snow flakes go upwards in the second half of the animation.</p>

<h2 id="adding-some-text">Adding some text</h2>

<p>In the next GIF there will be a text clip superimposed on the video clip.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">olaf</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">21.6</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">22.1</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">              <span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">speedx</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">fx</span><span class="p">(</span> <span class="n">time_symetrize</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Many options are available for the text (requires ImageMagick)</span>
</span><span class="line"><span class="n">text</span> <span class="o">=</span> <span class="n">TextClip</span><span class="p">(</span><span class="s">&quot;In my nightmares</span><span class="se">\n</span><span class="s">I see rabbits.&quot;</span><span class="p">,</span>
</span><span class="line">                <span class="n">fontsize</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;white&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="n">font</span><span class="o">=</span><span class="s">&#39;Amiri-Bold&#39;</span><span class="p">,</span> <span class="n">interline</span><span class="o">=-</span><span class="mi">25</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">            <span class="n">set_pos</span><span class="p">((</span><span class="mi">20</span><span class="p">,</span><span class="mi">190</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">            <span class="n">set_duration</span><span class="p">(</span><span class="n">olaf</span><span class="o">.</span><span class="n">duration</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">CompositeVideoClip</span><span class="p">(</span> <span class="p">[</span><span class="n">olaf</span><span class="p">,</span> <span class="n">text</span><span class="p">]</span> <span class="p">)</span><span class="o">.</span>\
</span><span class="line">    <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;olaf.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/ZQzgNo6.gif" title="'Olaf - Hosted by imgur'" /></p>

<h2 id="making-the-gif-loopable">Making the gif loopable</h2>

<p>The following GIF features a lot of snow falling. Therefore it cannot be made loopable using time-symetrization (or you will snow floating upwards !). So we will make this animation loopable by having the beginning of the animation appear progressively (<em>fade in</em>) just before the end of the clip. The montage here is a little complicated, I cannot explain it better than with this picture:</p>

<p><img class="center" src="http://Zulko.github.io/images/gifs/castle_loopable.jpeg" title="'I hope it's clear !' 400" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">castle</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;./frozen_trailer.mp4&quot;</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">(</span><span class="mf">22.8</span><span class="p">,</span><span class="mf">23.2</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">speedx</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">d</span> <span class="o">=</span> <span class="n">castle</span><span class="o">.</span><span class="n">duration</span>
</span><span class="line"><span class="n">castle</span> <span class="o">=</span> <span class="n">castle</span><span class="o">.</span><span class="n">crossfadein</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">castle</span><span class="p">,</span>
</span><span class="line">                    <span class="n">castle</span><span class="o">.</span><span class="n">set_start</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span>
</span><span class="line">                    <span class="n">castle</span><span class="o">.</span><span class="n">set_start</span><span class="p">(</span><span class="n">d</span><span class="p">)])</span><span class="o">.</span>\
</span><span class="line">   <span class="n">subclip</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">   <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;castle.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">fuzz</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/VnoRpdq.gif" title="'Disney Castle - Hosted by Imgur'" /></p>

<h2 id="another-example-of-a-gif-made-loopable">Another example of a GIF made loopable</h2>

<p>The next clip (from the movie <em>Charade</em>) was almost loopable: you can see Carry Grant smiling, then making a funny face, then coming back to normal. The problem is that at the end of the excerpt Cary is not exactly in the same position, and he is not smiling as he was at the beginning. To correct this, we take a snapshot of the first frame and we make it appear progressively at the end. This seems to do the trick.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">carry</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;../videos/charade.mp4&quot;</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">              <span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span><span class="mf">18.3</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span><span class="mf">20.6</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">              <span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">102</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">297</span><span class="p">,</span> <span class="n">y2</span><span class="o">=</span><span class="mi">202</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">d</span> <span class="o">=</span> <span class="n">carry</span><span class="o">.</span><span class="n">duration</span>
</span><span class="line"><span class="n">snapshot</span> <span class="o">=</span> <span class="n">carry</span><span class="o">.</span><span class="n">to_ImageClip</span><span class="p">()</span><span class="o">.</span>\
</span><span class="line">                  <span class="n">set_duration</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                  <span class="n">crossfadein</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                  <span class="n">set_start</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">carry</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">])</span><span class="o">.</span>\
</span><span class="line">    <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;carry.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="n">carry</span><span class="o">.</span><span class="n">fps</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://i.imgur.com/k1sz49h.gif" title="'Carry Grant in Charade - Hosted by Imgur'" /></p>

<h2 id="big-finish-background-removal">Big finish: background removal</h2>

<p>Let us dive further into the scripting madness: we consider this video around 2’16 (<em>edit: not the video I originally used, it was removed by the Youtube user, I add to find another link</em>):</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/BVBRDooRAXU "></iframe></div>

<p>And we will remove the background to make this gif (with transparent background):</p>

<p><img class="center" src="http://i.imgur.com/Fo2BxBK.gif" title="'PigsPolka - Hosted by imgur'" /></p>

<p>The main difficulty was to find what the background of the scene is. To do so, the script gathers a few images in which the little pigs are are different positions (so that every part part of the background is visible on at least several (actually most) of the slides, then it takes the pixel-per-pixel median of these pictures, which gives the background.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Requires Scikit Images installed</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">skimage.morphology</span> <span class="kn">as</span> <span class="nn">skm</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">skimage.filter</span> <span class="kn">as</span> <span class="nn">skf</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line">
</span><span class="line"><span class="c">### LOAD THE CLIP</span>
</span><span class="line">
</span><span class="line"><span class="n">pigsPolka</span> <span class="o">=</span>  <span class="n">VideoFileClip</span><span class="p">(</span><span class="s">&quot;pigs_in_a_polka.mp4&quot;</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                 <span class="n">subclip</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mf">16.85</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">35</span><span class="p">))</span><span class="o">.</span>\
</span><span class="line">                 <span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">                 <span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">140</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mi">41</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">454</span><span class="p">,</span> <span class="n">y2</span><span class="o">=</span><span class="mi">314</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c">### COMPUTE THE BACKGROUND</span>
</span><span class="line"><span class="c"># There is no single frame showing the background only (there</span>
</span><span class="line"><span class="c"># is always a little pig in the screen) so we use the median of</span>
</span><span class="line"><span class="c"># several carefully chosen frames to reconstitute the background.</span>
</span><span class="line"><span class="c"># I must have spent half an hour to find the right set of frames.</span>
</span><span class="line">
</span><span class="line"><span class="n">times</span> <span class="o">=</span> <span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">2.3</span><span class="p">,</span><span class="mf">4.2</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span><span class="o">+</span>
</span><span class="line">         <span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">6.0</span><span class="p">,</span><span class="mf">7.1</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span><span class="o">+</span>
</span><span class="line">         <span class="mi">8</span><span class="o">*</span><span class="p">[</span><span class="mf">6.2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">frames_bg</span> <span class="o">=</span> <span class="p">[</span><span class="n">pigsPolka</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">times</span><span class="p">]</span>
</span><span class="line"><span class="n">background</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">frames_bg</span><span class="p">),</span> <span class="mi">50</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c">### MASK GENERATION</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_mask_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Computes the mask for the frame at time t &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># THRESHOLD THE PIXEL-TO-PIXEL DIFFERENCE</span>
</span><span class="line">    <span class="c"># BETWEEN THE FRAME AND THE BACKGROUND</span>
</span><span class="line">    <span class="n">im</span> <span class="o">=</span> <span class="n">pigsPolka</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class="line">    <span class="n">mask</span> <span class="o">=</span> <span class="p">((</span><span class="n">im</span><span class="o">-</span><span class="n">background</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1500</span>
</span><span class="line">
</span><span class="line">    <span class="c"># REMOVE SMALL OBJECTS</span>
</span><span class="line">    <span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">remove_small_objects</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># REMOVE SMALL HOLES (BY DILATIATION/EROSION)</span>
</span><span class="line">    <span class="n">selem</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">binary_dilation</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span><span class="n">selem</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">binary_erosion</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span><span class="n">selem</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># BLUR THE MASK A LITTLE</span>
</span><span class="line">    <span class="n">mask</span> <span class="o">=</span> <span class="n">skf</span><span class="o">.</span><span class="n">gaussian_filter</span><span class="p">(</span><span class="n">mask</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">),</span><span class="mf">1.5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">mask</span>
</span><span class="line">
</span><span class="line"><span class="n">mask</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">ismask</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">set_get_frame</span><span class="p">(</span><span class="n">get_mask_frame</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">set_duration</span><span class="p">(</span><span class="n">pigsPolka</span><span class="o">.</span><span class="n">duration</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">### LAST EFFECTS AND GIF GENERATION</span>
</span><span class="line">
</span><span class="line"><span class="n">pigsPolka</span><span class="o">.</span><span class="n">set_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">subclip</span><span class="p">(</span><span class="mf">12.95</span><span class="p">,</span><span class="mf">15.9</span><span class="p">)</span><span class="o">.</span>\
</span><span class="line">          <span class="n">fx</span><span class="p">(</span><span class="n">vfx</span><span class="o">.</span><span class="n">blackwhite</span><span class="p">)</span><span class="o">.</span>\ <span class="c"># black &amp; white effect !</span>
</span><span class="line">          <span class="n">to_gif</span><span class="p">(</span><span class="s">&#39;pigs_polka.gif&#39;</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
</span><span class="line">          <span class="n">dispose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interception of a linear trajectory with constant speed]]></title>
    <link href="http://Zulko.github.io/blog/2013/11/11/interception-of-a-linear-trajectory-with-constant-speed/"/>
    <updated>2013-11-11T23:59:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2013/11/11/interception-of-a-linear-trajectory-with-constant-speed</id>
    <content type="html"><![CDATA[<p><em>In this post I show how helpful trigonometry can be when it comes to catching rabbits.</em></p>

<!-- more -->

<h2 id="problem">Problem</h2>

<p>Alice just spotted a white rabbit urging to its rabbit hole ! Given the coordinates of the positions A, B, H, of Alice, the rabbit and the hole, as well as the respective speeds $S_A$ and $S_B$ of Alice and the rabbit, say whether Alice can catch the rabbit before it disappears, and give the time and place of the fastest possible interception.</p>

<h2 id="solution">Solution</h2>

<p>I guess that I am not the first one to solve this but I couldn’t find any simple solution on the internet. The one I am giving here relies on trigonometry, but interestingly it doesn’t require to compute any trigonometrical function !</p>

<p>If sines give you fever, don’t wait for the first <em>sines of fever</em> (uh uh uh), just skip this part, I summarize everything in the next section.</p>

<p>We call  C and $t_C$ the location and the time of the catch. It is straightforward that, since we are looking for the fastest catch, Alice’s trajectory towards C must be a straight line. Here is a sketch of the problem:</p>

<p><img class="center" src="http://Zulko.github.io/images/alice/alice_schema.jpeg" />
Note that the lengths AC and BC denote the distance run by Alice and the Rabbit until the catch, therefore they verify</p>

<script type="math/tex; mode=display"> AC = S_A t_C </script>

<script type="math/tex; mode=display"> BC = S_B t_C </script>

<p><strong>So finding the length BC would answer the problem</strong>, as it would tell us whether Alice can catch the rabbit before it reaches the rabbit hole (case $BC&lt;BH$), and would immediately lead to both the location and time of the catch :</p>

<script type="math/tex; mode=display"> C = B + \dfrac{BC}{BH}\overrightarrow{BH} </script>

<script type="math/tex; mode=display"> t_C = BC/S_B </script>

<p>To express BC using the coordinates of the points, let us apply the famous <em>Law of Sines</em> to the triangle ABC:</p>

<script type="math/tex; mode=display"> \dfrac{\sin \alpha}{BC} = \dfrac{\sin \beta}{AC} = \dfrac{\sin \gamma}{AB} </script>

<p>Wich leads to</p>

<script type="math/tex; mode=display"> BC = \dfrac {\sin \alpha}{\sin \gamma} AB = \dfrac {\sin \alpha}{\sin \gamma} \sqrt{(x_B-x_A)^2+(y_B-y_A)^2} </script>

<p>Now all we have to do is to express $\sin \alpha$ and $\sin \gamma$ in function of the given data. To do so we first compute $\sin(\beta)$, then we express $\sin \alpha$ with $\sin \beta$, and we express $\sin \gamma$ as a function of $\sin \alpha$ and $\sin \beta$.</p>

<p>The value of $\sin \beta$ can be computed from the points coordinates as follows:</p>

<script type="math/tex; mode=display"> \sin \beta = \dfrac{det(\overrightarrow{BA},\overrightarrow{BH})}{ BA * BH } = \dfrac{(x_A - x_B)(y_H-y_B) - (y_A - y_B)(x_H-x_B)}{\sqrt{(x_B-x_A)^2+(y_B-y_A)^2} \sqrt{(x_B-x_H)^2+(y_B-y_H)^2}} </script>

<p>Then we use the Law of Sines again, to compute $\sin \alpha$:</p>

<script type="math/tex; mode=display"> \sin \alpha = \frac{BC}{AC} \sin \beta = \frac{S_b t_C}{S_a t_C} \sin \beta = \frac{S_b}{S_a} \sin \beta </script>

<p>This only makes sense, of course, if</p>

<script type="math/tex; mode=display"> \frac{S_A}{S_R} \mid \sin \beta \mid \leq 1 </script>

<p><strong>If this is not the case we conclude that Alice will never catch the rabbit, which solves the problem.</strong></p>

<p>Finally we use the fact that the angles of a triangle sum to $\pi$ to compute $\sin \gamma$:</p>

<script type="math/tex; mode=display"> \sin \gamma = \sin (\pi - \alpha - \beta) = \sin (\alpha + \beta) = \sin \alpha \cos \beta + \cos \alpha \sin \beta </script>

<p>We reformulate using the already-copmputed $\sin \alpha$ and $\sin \beta$:</p>

<script type="math/tex; mode=display"> \sin \gamma = (\sin \alpha) \sqrt{1 - \sin^2 \beta} + (\sin \beta) \sqrt{1 - \sin^2 \alpha} </script>

<p>And… we are done, we have everything we need to compute BC and answer the problem.</p>

<h2 id="summary-and-code">Summary and code</h2>

<p>So here is the short answer to the problem:</p>

<ul>
  <li>Compute $\sin \beta$ using the formula given above.</li>
  <li>Compute $\sin \alpha = (S_b * \sin \beta)/S_a$. If $\mid \sin \alpha \mid&gt;1$, Alice cannot catch the rabbit. Otherwise, advance to step 3.</li>
  <li>Compute $\sin \gamma$ with the formula above and the values of $\sin \alpha$ and $\sin \beta$ found in steps <em>1</em> and <em>2</em>.</li>
  <li>Compute BC using the formula given above and the values found for $\sin \alpha$ and $\sin \gamma$.  If $BC&gt;BH$, the rabbit will reach its hole before Alice can catch it. Otherwise, congratulation young girl, you will eat rabbit for dinner, here are the location and time of the fastest possible interception:</li>
</ul>

<script type="math/tex; mode=display"> C = B + \frac{BC}{BH}\overrightarrow{BH} </script>

<script type="math/tex; mode=display"> t_C = BC/S_B </script>

<p>Below is a script implementing this technique using Python’s pylab module:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">pylab</span> <span class="kn">import</span> <span class="o">*</span> <span class="c"># imports srqt, norm, array, plot...</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">interception</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">Sa</span><span class="p">,</span> <span class="n">Sb</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; Returns ``(t_C, C)`` if A can catch B, before B </span>
</span><span class="line"><span class="sd">    reaches H. Otherwise, returns ``None``. &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">sin_b</span> <span class="o">=</span> <span class="n">det</span><span class="p">(</span><span class="n">array</span><span class="p">((</span><span class="n">A</span><span class="o">-</span><span class="n">B</span><span class="p">,</span><span class="n">H</span><span class="o">-</span><span class="n">B</span><span class="p">)))</span> <span class="o">/</span> <span class="p">(</span> <span class="n">norm</span><span class="p">(</span><span class="n">A</span><span class="o">-</span><span class="n">B</span><span class="p">)</span> <span class="o">*</span> <span class="n">norm</span><span class="p">(</span><span class="n">H</span><span class="o">-</span><span class="n">B</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">sin_a</span> <span class="o">=</span> <span class="p">(</span><span class="n">Sb</span> <span class="o">/</span> <span class="n">Sa</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin_b</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">sin_a</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">:</span>
</span><span class="line">
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;B moves too fast to be ever caught !&quot;</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">        <span class="n">sin_c</span> <span class="o">=</span> <span class="p">(</span> <span class="n">sin_a</span> <span class="o">*</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">sin_b</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">                  <span class="o">+</span> <span class="n">sin_b</span> <span class="o">*</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">sin_a</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">BC</span> <span class="o">=</span> <span class="n">norm</span><span class="p">(</span><span class="n">B</span><span class="o">-</span><span class="n">A</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">sin_a</span> <span class="o">/</span> <span class="n">sin_c</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">BC</span> <span class="o">&gt;</span> <span class="n">norm</span><span class="p">(</span><span class="n">H</span><span class="o">-</span><span class="n">A</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;B reaches H before interception by A !&quot;</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;A intercepted B !&quot;</span>
</span><span class="line">            <span class="n">t_C</span> <span class="o">=</span> <span class="n">BC</span> <span class="o">/</span> <span class="n">Sb</span>
</span><span class="line">            <span class="n">C</span> <span class="o">=</span> <span class="n">B</span> <span class="o">+</span> <span class="n">BC</span> <span class="o">*</span> <span class="p">(</span><span class="n">H</span><span class="o">-</span><span class="n">B</span><span class="p">)</span><span class="o">/</span><span class="n">norm</span><span class="p">(</span><span class="n">H</span><span class="o">-</span><span class="n">B</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">t_C</span><span class="p">,</span><span class="n">C</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And here it is in action:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># PARAMETERS OF THE PROBLEM</span>
</span><span class="line"><span class="n">A</span> <span class="o">=</span> <span class="n">array</span><span class="p">((</span> <span class="mf">1.0</span> <span class="p">,</span> <span class="mf">5.0</span> <span class="p">))</span> <span class="c"># Alice&#39;s initial position</span>
</span><span class="line"><span class="n">B</span> <span class="o">=</span> <span class="n">array</span><span class="p">((</span> <span class="mf">4.0</span> <span class="p">,</span> <span class="mf">1.0</span> <span class="p">))</span> <span class="c"># Rabbit&#39;s initial position</span>
</span><span class="line"><span class="n">H</span> <span class="o">=</span>  <span class="n">array</span><span class="p">((</span> <span class="mf">6.0</span> <span class="p">,</span> <span class="mf">7.0</span> <span class="p">))</span> <span class="c"># Hole&#39;s coordinates</span>
</span><span class="line"><span class="n">Sa</span> <span class="o">=</span> <span class="mf">1.1</span> <span class="c"># Alice&#39;s speed</span>
</span><span class="line"><span class="n">Sb</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="c"># Rabbit&#39;s speed</span>
</span><span class="line">
</span><span class="line"><span class="c"># Find the intersection</span>
</span><span class="line"><span class="n">t</span><span class="p">,</span><span class="n">C</span> <span class="o">=</span> <span class="n">interception</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">Sa</span><span class="p">,</span> <span class="n">Sb</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Plot the results</span>
</span><span class="line">
</span><span class="line"><span class="n">scatter</span><span class="p">(</span><span class="o">*</span><span class="nb">zip</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">H</span><span class="p">,</span><span class="n">C</span><span class="p">),</span> <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">point</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">([</span><span class="s">&#39;A&#39;</span><span class="p">,</span><span class="s">&#39;B&#39;</span><span class="p">,</span><span class="s">&#39;H&#39;</span><span class="p">,</span><span class="s">&#39;C&#39;</span><span class="p">],</span> <span class="p">[</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">H</span><span class="p">,</span><span class="n">C</span><span class="p">]):</span>
</span><span class="line">    <span class="n">annotate</span><span class="p">(</span> <span class="n">label</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">point</span><span class="p">,</span> <span class="n">xytext</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class="line">        <span class="n">textcoords</span> <span class="o">=</span> <span class="s">&#39;offset points&#39;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">24</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">annotate</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">H</span><span class="p">,</span> <span class="n">xytext</span><span class="o">=</span><span class="n">B</span><span class="p">,</span> <span class="n">xycoords</span><span class="o">=</span><span class="s">&#39;data&#39;</span><span class="p">,</span>
</span><span class="line">         <span class="n">textcoords</span><span class="o">=</span><span class="s">&#39;data&#39;</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
</span><span class="line">         <span class="n">arrowprops</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">arrowstyle</span><span class="o">=</span><span class="s">&quot;simple&quot;</span><span class="p">,</span>
</span><span class="line">                         <span class="n">connectionstyle</span><span class="o">=</span><span class="s">&quot;arc3&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">annotate</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">C</span><span class="p">,</span> <span class="n">xytext</span><span class="o">=</span><span class="n">A</span><span class="p">,</span> <span class="n">xycoords</span><span class="o">=</span><span class="s">&#39;data&#39;</span><span class="p">,</span>
</span><span class="line">         <span class="n">textcoords</span><span class="o">=</span><span class="s">&#39;data&#39;</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
</span><span class="line">         <span class="n">arrowprops</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">arrowstyle</span><span class="o">=</span><span class="s">&quot;simple&quot;</span><span class="p">,</span>
</span><span class="line">                         <span class="n">connectionstyle</span><span class="o">=</span><span class="s">&quot;arc3&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">title</span><span class="p">(</span><span class="s">&quot;A intercepts B in C&quot;</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">24</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/alice/alice_matplotlib.jpeg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Placing people so that everyone meets]]></title>
    <link href="http://Zulko.github.io/blog/2013/11/08/placing-your-employees-so-that-everyone-meets/"/>
    <updated>2013-11-08T20:36:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2013/11/08/placing-your-employees-so-that-everyone-meets</id>
    <content type="html"><![CDATA[<p><em>I will solve a stupid management problem using old mathematics and Google.</em></p>

<!-- more -->

<p>Imagine that you have N employees who work side by side in a row. For more conviviality you decide to arrange them in a different order every day, so that after some time each employee has worked besides each of the others at least once. How to do so in a minimal number of days ?</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/mathematician_employees.jpeg" title="'Case where the employees are mathematicians'" /></p>

<h2 id="a-little-bit-of-context">A little bit of context</h2>

<p>This problem appeared a few weeks ago in the <a href="http://www.reddit.com/r/Python/comments/1o7z4q/python_algo_to_shuffle_your_team_ensuring_that/">Reddit/Python forum</a>, when someone posted <a href="http://jtushman.github.io/blog/2013/10/10/shuffling-team-seating/">this</a>:</p>

<p><em>“I think it is good to shuffle the team around. (…) Here is the function that we use to randomize our team making sure that you do not sit next to someone you are already sitting next to [supposing that all are sitting in a row].”</em>.</p>

<p>Stated like this, it is a very simple problem which doesn’t require a complicated algorithm, you just shuffle the order of the previous day as follows, and it will do the trick:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/easy_shuffle.jpeg" title="'A simple shuffling'" /></p>

<p>This shuffle can be written in one line of Python:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># This shuffling creates new neighbours</span>
</span><span class="line"><span class="n">shuffle</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">myList</span> <span class="p">:</span> <span class="n">myList</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">myList</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The problem with thid shuffling, as someone on Reddit pointed out, is that even if you shuffle a great number of times there is no warranty that everyone will have worked besides everyone in the end. For instance in the shuffling shown above employees 1 and 8 will never be neighbours. And it seems that you can imagine a shuffling as complicated as you want, there will always be a number of people for which it will fail to create all possible pairs of neighbours !</p>

<p>This leads us to our problem: how to ensure that all possible pairs of neighbours will be created, and in a minimum amount of time ? We will see that there is an optimal strategy. It does NOT use a shuffling, but rather a 120 years old mathematical construction.</p>

<h2 id="first-elements-of-solution">First elements of solution</h2>

<p>If you have N employees, then they can form N(N-1)/2 pairs. Each day you create at most (N-1) new pairs of neighbours by placing the employees on a line. Therefore you will need at least N/2 days to create all possible pairs. This means that you cannot solve the problem in less than N/2 days if N is even, and (N+1)/2 days if n is odd. What we will show is that <strong>it is actually possible to solve the problem in N/2 days (for even N) or (N+1)/2 days (for odd N)</strong>.</p>

<p>Actually, <strong>we only need to solve the problem for even N</strong>, and the solutions for odd N will follow very simply. Indeed, suppose that you have an odd number N of employees. If you add one <em>imaginary</em> employee, you come to an even number (N+1) of employees. Suppose that you have found a solution for these (N+1) employees, which means that you have found a series of (N+1)/2 arrangements which form all pairs of neighbours. Then remove the <em>imaginary</em> employee from each of these arrangements. What you obtain is a series of (N+1)/2 arrangements, in which all pairs of the employees 1 to N are formed. In other words, you have solved the problem for N.</p>

<h2 id="representing-the-problem-with-a-graph">Representing the problem with a graph</h2>

<p>This problem can be very well represented using a graph whose nodes are the employees. Each day we add an edge in the graph between each pair of employees which have been neighbours, our goal being to cover all the possible edges of the graph:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/placements_are_paths.jpeg" title="'graph representation of the problem'" /></p>

<p>Notice how each day you actually trace a <em>path</em> in the graph.</p>

<p>Now our problem has become: given a graph of size N (even), find N/2 paths, each going through each node exactly once, such that they cover all the possible edges of the graph.</p>

<p>And here is a sketch of a solution that will always work:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/solution_for_8.jpeg" title="'Solution for 8 employees'" /></p>

<p>The first path is a simple pattern 1, N, 2, N-1, etc. and the others are just <em>rotations</em> of the first path. The nice thing with the graph representation is that I can use a simple geometric argument to prove that these paths will cover all the edges: if we place the N nodes of the graph cyclically like in the figures above, the path number K will have edges that make an angle $2K\pi/N$ or $(2K+1)\pi/N$ with the horizontal line. So the different paths have edges of completely different angles. For this reason an edge cannot belong to more than one path. Since there are N/2 paths and each path covers N-1 different edges, the paths cover N(N-1)/2 edges in total, which is all the edges.</p>

<p>This construction of paths may seem simple to some of you, but I couldn’t figure it out on my own, and it is an application of a 19th century mathematical trick called the Walecki construction, which I found after some googling, as I explain in <a href="#thanksGoogle">the last section</a>.</p>

<h2 id="a-idsolutiona-solution"><a id="Solution"></a> Solution</h2>

<p>If N is even, arrange the employees in this order the first day: 1, N, 2, (N-1), 3, (N-2), etc. From day 2 to day N/2, place the employees by taking their arrangement of the day before and replacing employee 1 by 2, 2 by 3, 3 by 4… and N by 1.</p>

<p>If N is odd, add an imaginary (N+1)th employee, solve the problem for the N+1 employees using the mehod above, then remove the imaginary employee from each of the arrangements obtained.</p>

<p>Here is the Python implementation of this solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">place</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Returns a minimal series of permutations of 1..N such</span>
</span><span class="line"><span class="sd">    that each number is neighbour at least once with each of</span>
</span><span class="line"><span class="sd">    the others.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="mi">2</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        N is odd. Solve the problem for (N+1), then remove</span>
</span><span class="line"><span class="sd">        element (N+1) in the result</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">arrangements</span> <span class="o">=</span> <span class="n">place</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">arr</span> <span class="ow">in</span> <span class="n">arrangements</span><span class="p">:</span>
</span><span class="line">            <span class="n">arr</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">arrangements</span>
</span><span class="line">
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        N is even. Place the elements in that order:</span>
</span><span class="line"><span class="sd">        1, N, 2, N-1, 3, N-2, etc. then roll !</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">arr1</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># construct the first arrangement</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">            <span class="n">arr1</span> <span class="o">=</span> <span class="n">arr1</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="c"># construct the subsequent arrangements using p1</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span> <span class="p">[((</span><span class="n">e</span><span class="o">+</span><span class="n">K</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">N</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">arr1</span><span class="p">]</span>
</span><span class="line">                                 <span class="k">for</span> <span class="n">K</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>&gt;&gt;&gt; place(12)
[[1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7],
 [2, 1, 3, 12, 4, 11, 5, 10, 6, 9, 7, 8],
 [3, 2, 4, 1, 5, 12, 6, 11, 7, 10, 8, 9],
 [4, 3, 5, 2, 6, 1, 7, 12, 8, 11, 9, 10],
 [5, 4, 6, 3, 7, 2, 8, 1, 9, 12, 10, 11],
 [6, 5, 7, 4, 8, 3, 9, 2, 10, 1, 11, 12]]
</code></pre>

<h2 id="a-idthanksgooglea-bonus-how-to-be-a-graph-theorist-with-google"><a id="thanksGoogle"></a> [Bonus] How to be a graph theorist with Google</h2>

<p>For the anecdote, I was not really happy when I figured out that the problem could be represented with graphs, as I really know nothing about graphs theory.</p>

<p>However, I thought that, as we are dealing with graphs in which everyone is connected with everyone, they must have some interesting properties. So I googled <em>fully connected graphs</em>, which led me to Wolfram Mathworld’s article on <em>Complete graphs</em> (apparently that’s their real name), where we can read on the 6th line:</p>

<p><em>“In the 1890s, Walecki showed that complete graphs Kn admit a Hamilton decomposition for odd n, and decompositions into Hamiltonian cycles plus a perfect matching for even n (Lucas 1892, Bryant 2007, Alspach 2008). Alspach et al. (1990) give a construction for Hamilton decompositions of all Kn.”</em></p>

<p>That’s not what you’d call crystal clear, but it says <em>decomposition</em> several times, and that sounds like what I want to do. So I looked for the last reference, Alspach 1990. Springer, the publisher, gracefully gives you access to the first two pages for free. The good news is, they contain all the properties and proofs that we need, in a compacted yet very understandable form. Let us see in details what they say.</p>

<p>It starts with Hamiltonian cycles. An Hamiltonian cycle is a path that starts from one node, visits every other node exactly once, and come back to initial node. The two first figures below are two Hamiltonian cycles for a graph with five nodes:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/hamilton_decomposition.jpeg" title="'Solution for 8 employees'" /></p>

<p>As you can see, these paths have no edge in common, but put together they cover all the edges of the complete graph. They form what is called a <em>Hamilton decomposition</em> of the complete graph.</p>

<p>Now what happens if you remove one person from the graph, say, the person at the top ? You get this:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/solution_for_4.jpeg" title="'Solution for 4 employees'" /></p>

<p>You obtain two paths that describe a solution of our problem for N=4 employees ! And it will always work: if you can find an Hamilton decomposition of the complete graph of N+1 nodes (N being even), just removing one node will give you a decomposition into paths of the complete graph of N nodes, from which you can deduce a solution to our problem with N employees.</p>

<p>So now the important question is: how do we find an Hamiltonian decomposition of the complete graph of (N+1) nodes (N+1 being odd) ?</p>

<p>This has been answered in 1890 by Walecki with the following construction. I use the same notations as in Alspach 1990. Note that node 0 stays in place while all the other numbers rotate clockwise from one cycle to another.</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/Walecki.jpeg" title="'The Walecki Hamilton decomposition'" /></p>

<p>There is no extensive proof in Alspach 1990 of why this covers all edges, but I guess that a geometrical proof, like the one I give in a previous section, could do the trick. Now all we have to do is to remove one node of the graph: we choose the node 0:</p>

<p><img class="center" src="http://Zulko.github.io/images/placing-your-employees/Walecki2.jpeg" title="'Tada !'" /></p>

<p>With just a few tweaks in the order of the nodes, we come to the solution presented in the previous section.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delay differential equations in Python]]></title>
    <link href="http://Zulko.github.io/blog/2013/10/22/delay-differential-equations-in-python/"/>
    <updated>2013-10-22T07:50:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2013/10/22/delay-differential-equations-in-python</id>
    <content type="html"><![CDATA[<p><em>I wrote</em> <code>ddeint</code>, <em>a function for solving Delay Differential Equations 
(DDEs)
in Python. It is not very fast, but very flexible, and simply coded: just <a href="https://gist.github.com/Zulko/7096011">a few lines</a> on top of Scipy’s 
differential equations solver,</em> <code>odeint</code>.</p>

<!-- more -->

<p>Say you have a DDE like this:</p>

<p>$ y(t) = g(t) \ \ \ for\ \ \ t &lt; 0 $</p>

<p>$ y’(t) = F( y, t) \ \ \ for\ \ \ t \geq 0$</p>

<p>Where $F(y, t)$ can involve delayed values of $y$, of the form $y(t-d)$.</p>

<p>To  solve this DDE in a series of points <code>t=[t1, t2 ...]</code> you would just write</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">ddeint</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="c"># returns [y(t1), y(t2) ...]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-simple-example">A simple example</h2>

<p>Let us start with a Delay Differential Equation whose exact solution is 
known (it is the sine function), just to check that the algorithm works as expected:</p>

<p>$ y(t) = \sin(t) \ \ \ for\ \ \ t &lt; 0 $</p>

<p>$ y’(t) = y(t-3\pi/2) \ \ \ for\ \ \ t \geq 0$</p>

<p>Here is how we solve it with <code>ddeint</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">pylab</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line">
</span><span class="line"><span class="n">model</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">Y</span><span class="p">,</span><span class="n">t</span> <span class="p">:</span> <span class="n">Y</span><span class="p">(</span><span class="n">t</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c"># Model</span>
</span><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">10000</span><span class="p">)</span> <span class="c"># Time start, end, and number of points/steps</span>
</span><span class="line"><span class="n">g</span><span class="o">=</span><span class="n">sin</span> <span class="c"># Expression of Y(t) before the integration interval</span>
</span><span class="line"><span class="n">yy</span> <span class="o">=</span> <span class="n">ddeint</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">tt</span><span class="p">)</span> <span class="c"># Solving</span>
</span><span class="line">
</span><span class="line"><span class="c"># PLOTTING</span>
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span><span class="n">yy</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="s">&#39;r&#39;</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;$y(t)$&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span><span class="n">sin</span><span class="p">(</span><span class="n">tt</span><span class="p">),</span><span class="n">c</span><span class="o">=</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;$sin(t)$&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">set_ylim</span><span class="p">(</span><span class="n">ymax</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c"># make room for the legend</span>
</span><span class="line"><span class="n">legend</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/ddeint/dde_sin.jpeg" /></p>

<p>The resulting plot compares our solution (red) with the exact solution (blue). See how our result eventually detaches itself from the actual solution as a consequence of many successive approximations ? As DDEs tend to create chaotic behaviors, you can expect the error to explode very fast. As I am no DDE expert, I would recommend checking for convergence in all cases, i.e. increasing the time resolution and see how it affects the result. Keep in mind that the past values of Y(t) are computed by interpolating the values of Y found at the previous integration points, so the more points you ask for, the more precise your result.</p>

<h2 id="an-example-with-parameters">An example with parameters</h2>

<p>You can set the parameters of your model at integration time, like in 
Scipy’s <code>ODE</code> and <code>odeint</code>. As an example, imagine a chemical product with degradation rate r, and whose production rate is negatively linked to the quantity of this same product at the time (t-d):</p>

<p>$ y(t) = 0 \ \ \ for\ \ \ t &lt; 0 $</p>

<p>$ y’(t) = \dfrac{1}{1+(\dfrac{y(t-d)}{K})^2} -ry(t) \ \ \ for\ \ \ t \geq 0$</p>

<p>We have three parameters that we can choose freely. For K = 0.1, d = 5, r = 1, we obtain oscillations !</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># MODEL, WITH UNKNOWN PARAMETERS</span>
</span><span class="line"><span class="n">model</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">Y</span><span class="p">,</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">r</span> <span class="p">:</span>  <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="p">(</span><span class="n">Y</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">d</span><span class="p">)</span><span class="o">/</span><span class="n">k</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">r</span><span class="o">*</span><span class="n">Y</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class="line"><span class="n">g</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">t</span><span class="p">:</span><span class="mi">0</span> <span class="c"># history before t=0</span>
</span><span class="line">
</span><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">10000</span><span class="p">)</span>
</span><span class="line"><span class="n">yy</span> <span class="o">=</span> <span class="n">ddeint</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">tt</span><span class="p">,</span> <span class="n">fargs</span><span class="o">=</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="c"># K=0.1, d=5, r=1</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span><span class="n">yy</span><span class="p">,</span><span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/ddeint/dde_sin.jpeg" /></p>

<h2 id="example-with-several-variables">Example with several variables</h2>

<p>The variable Y can be a vector, which means that you can solve DDE 
systems of several variables. Here is a version of the famous 
Lotka-Volterra two-variables system, where we introduce a delay $d$. 
For $d=0$ the system is a classical Lotka-Volterra system ; for 
$d\neq 0$ the system undergoes an important amplification:</p>

<p>$ \big(x(t), y(t)\big) = (1,2) \ \ \ for\ \ t &lt; 0, \ \ else.$</p>

<p>$x’(t) = 0.5x(t)\big(1-y(t-d)\big)$</p>

<p>$y’(t) = -0.5y(t)\big(1-x(t-d)\big)$</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">model</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">d</span><span class="p">):</span>
</span><span class="line">    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">Y</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class="line">    <span class="n">xd</span><span class="p">,</span><span class="n">yd</span> <span class="o">=</span> <span class="n">Y</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">array</span><span class="p">([</span><span class="mf">0.5</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">yd</span><span class="p">),</span> <span class="o">-</span><span class="mf">0.5</span><span class="o">*</span><span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">xd</span><span class="p">)])</span>
</span><span class="line">
</span><span class="line"><span class="n">g</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">t</span> <span class="p">:</span> <span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">]:</span>
</span><span class="line">    <span class="n">yy</span> <span class="o">=</span> <span class="n">ddeint</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">tt</span><span class="p">,</span><span class="n">fargs</span><span class="o">=</span><span class="p">(</span><span class="n">d</span><span class="p">,))</span>
</span><span class="line">    <span class="c"># WE PLOT X AGAINST Y</span>
</span><span class="line">    <span class="n">plot</span><span class="p">(</span><span class="n">yy</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">yy</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;delay = </span><span class="si">%.01f</span><span class="s">&#39;</span><span class="o">%</span><span class="n">d</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">legend</span><span class="p">()</span> <span class="c"># display the legend</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/ddeint/dde_sin.jpeg" /></p>

<h2 id="example-with-a-non-constant-delay">Example with a non-constant delay</h2>

<p>In this last example the delay depends on the value of $y(t)$ :</p>

<p>$ y(t) = 1,\ \ \ t \leq 0$</p>

<p>$ y’(t) = - y\big(t-3\cos(y(t))^2 \big),\ \ \ t &gt; 0 $</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">model</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">Y</span><span class="p">,</span><span class="n">t</span><span class="p">:</span>  <span class="o">-</span><span class="n">Y</span><span class="p">(</span> <span class="n">t</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span> <span class="n">Y</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span>
</span><span class="line"><span class="n">tt</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>
</span><span class="line"><span class="n">yy</span> <span class="o">=</span> <span class="n">ddeint</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">t</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">tt</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">plot</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span> <span class="n">yy</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://Zulko.github.io/images/ddeint/dde_sin.jpeg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read and write audio files in Python using FFMPEG]]></title>
    <link href="http://Zulko.github.io/blog/2013/10/04/read-and-write-audio-files-in-python-using-ffmpeg/"/>
    <updated>2013-10-04T21:28:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2013/10/04/read-and-write-audio-files-in-python-using-ffmpeg</id>
    <content type="html"><![CDATA[<p><em>This article shows how easy it is to read or write audio files in Python, by calling the external software FFMPEG through pipes. Check also <a href="http://Zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg/">that other article</a> for the same with video files.</em></p>

<!-- more -->

<p>Before we start, you must have FFMPEG installed on your computer and you must know the name (or path) of the FFMPEG binary on your computer. It should be one of the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">FFMPEG_BIN</span> <span class="o">=</span> <span class="s">&quot;ffmpeg&quot;</span> <span class="c"># on Linux</span>
</span><span class="line"><span class="n">FFMPEG_BIN</span> <span class="o">=</span> <span class="s">&quot;ffmpeg.exe&quot;</span> <span class="c"># on Windows</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reading">Reading</h2>

<p>To read the audio file “mySong.mp3” we first ask FFMPEG to open this file and to direct its output to Python:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">subprocess</span> <span class="kn">as</span> <span class="nn">sp</span>
</span><span class="line">
</span><span class="line"><span class="n">command</span> <span class="o">=</span> <span class="p">[</span> <span class="n">FFMPEG_BIN</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;mySong.mp3&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="s">&#39;s16le&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-acodec&#39;</span><span class="p">,</span> <span class="s">&#39;pcm_s16le&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-ar&#39;</span><span class="p">,</span> <span class="s">&#39;44100&#39;</span><span class="p">,</span> <span class="c"># ouput will have 44100 Hz</span>
</span><span class="line">        <span class="s">&#39;-ac&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="c"># stereo (set to &#39;1&#39; for mono)</span>
</span><span class="line">        <span class="s">&#39;-&#39;</span><span class="p">]</span>
</span><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the code above <code>-i mySong.mp3</code> indicates the input file, while <code>s16le/pcm_s16le</code> asks for a raw 16-bit sound output. The <code>-</code> at the end tells FFMPEG that it is being used with a pipe by another program. In <code>sp.Popen</code>, the <code>bufsize</code> parameter must be bigger than the biggest chunk of data that you will want to read (see below). It can be omitted most of the time in Python 2 but not in Python 3 where its default value is pretty small.</p>

<p>Now you just have to read the output of FFMPEG. In our case we have two channels (stereo sound) so one <em>frame</em> of out output will be represented by a pair of integers, each coded on 16 bits (2 bytes). Therefore one frame will be 4-bytes long. To read 88200 audio frames (2 seconds of sound in our case) we will write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">raw_audio</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">proc</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">88200</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Reorganize raw_audio as a Numpy array with two-columns (1 per channel)</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line">
</span><span class="line"><span class="n">audio_array</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">raw_audio</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">&quot;int16&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">audio_array</span> <span class="o">=</span> <span class="n">audio_array</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">audio_array</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can now play this sound using for instance Pygame’s sound mixer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">pygame</span>
</span><span class="line"><span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
</span><span class="line"><span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="mi">44100</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c"># 44100 Hz, 16bit, 2 channels</span>
</span><span class="line"><span class="n">sound</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">sndarray</span><span class="o">.</span><span class="n">make_sound</span><span class="p">(</span> <span class="n">audio_array</span> <span class="p">)</span>
</span><span class="line"><span class="n">sound</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, you can get informations on a file (audio format, frequency, etc.) by calling</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="n">FFMPEG_BINARY</span><span class="p">,</span><span class="s">&quot;-i&quot;</span><span class="p">,</span> <span class="s">&#39;mySong.mp3&#39;</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">],</span>
</span><span class="line">                <span class="n">stdin</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>  <span class="n">stderr</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class="line"><span class="n">infos</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now <code>infos</code> contains a text describing the file, that you would need to parse to obtain the relevant informations. See section <em>Going Further</em> below for a link to an implementation.</p>

<h2 id="writing">Writing</h2>

<p>To write an audio file we open FFMPEG and specify that the input will be piped and that it will consist in raw audio data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span> <span class="n">FFMPEG_BIN</span><span class="p">,</span>
</span><span class="line">       <span class="s">&#39;-y&#39;</span><span class="p">,</span> <span class="c"># (optional) means overwrite the output file if it already exists.</span>
</span><span class="line">       <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&#39;s16le&#39;</span><span class="p">,</span> <span class="c"># means 16bit input</span>
</span><span class="line">       <span class="s">&quot;-acodec&quot;</span><span class="p">,</span> <span class="s">&quot;pcm_s16le&quot;</span><span class="p">,</span> <span class="c"># means raw 16bit input</span>
</span><span class="line">       <span class="s">&#39;-r&#39;</span><span class="p">,</span> <span class="s">&quot;44100&quot;</span><span class="p">,</span> <span class="c"># the input will have 44100 Hz</span>
</span><span class="line">       <span class="s">&#39;-ac&#39;</span><span class="p">,</span><span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="c"># the input will have 2 channels (stereo)</span>
</span><span class="line">       <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="c"># means that the input will arrive from the pipe</span>
</span><span class="line">       <span class="s">&#39;-vn&#39;</span><span class="p">,</span> <span class="c"># means &quot;don&#39;t expect any video input&quot;</span>
</span><span class="line">       <span class="s">&#39;-acodec&#39;</span><span class="p">,</span> <span class="s">&quot;libfdk_aac&quot;</span> <span class="c"># output audio codec</span>
</span><span class="line">       <span class="s">&#39;-b&#39;</span><span class="p">,</span> <span class="s">&quot;3000k&quot;</span><span class="p">,</span> <span class="c"># output bitrate (=quality). Here, 3000kb/second</span>
</span><span class="line">       <span class="s">&#39;my_awesome_output_audio_file.mp3&#39;</span><span class="p">],</span>
</span><span class="line">        <span class="n">stdin</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span><span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The codec can be any valid FFMPEG audio codec. For some codecs providing the output bitrate is optional. Now you just have to write raw audio data into the file. For instance, if your sound is represented have a Nx2 Numpy array of integers, you will just write</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">audio_array</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s">&quot;int16&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">tofile</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="going-further">Going further</h2>

<p>I tried to keep the code as simple as possible here. With a few more lines you can make useful classes to manipulate video files, like <a href="https://github.com/Zulko/moviepy/blob/master/moviepy/audio/io/readers.py">FFMPEG_AudioReader</a> and <a href="https://github.com/Zulko/moviepy/blob/master/moviepy/audio/io/ffmpeg_audiowriter.py">FFMPEG_AudioWriter</a> that I wrote for my video editing software. In these files in particular how to parse the information on the video, how to save/load pictures using FFMPEG, etc.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read and write video frames in Python using FFMPEG]]></title>
    <link href="http://Zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg/"/>
    <updated>2013-09-27T23:53:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg</id>
    <content type="html"><![CDATA[<p><em>This article shows how easy it is to read or write video frames with Python, by calling the external software FFMPEG through pipes. Check also <a href="http://Zulko.github.io/blog/2013/10/04/read-and-write-audio-files-in-python-using-ffmpeg">that other article</a> for the same with audio files.</em></p>

<!-- more -->

<p>Before we start, you must have FFMPEG installed on your computer and you must know the name (or path) of the FFMPEG binary on your computer. It should be one of the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">FFMPEG_BIN</span> <span class="o">=</span> <span class="s">&quot;ffmpeg&quot;</span> <span class="c"># on Linux</span>
</span><span class="line"><span class="n">FFMPEG_BIN</span> <span class="o">=</span> <span class="s">&quot;ffmpeg.exe&quot;</span> <span class="c"># on Windows</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reading">Reading</h2>

<p>To read the frames of the video “myHolidays.mp4” we first ask FFMPEG to open this file and to direct its output to Python:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">subprocess</span> <span class="kn">as</span> <span class="nn">sp</span>
</span><span class="line"><span class="n">command</span> <span class="o">=</span> <span class="p">[</span> <span class="n">FFMPEG_BIN</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;myHolidays.mp4&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="s">&#39;image2pipe&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-pix_fmt&#39;</span><span class="p">,</span> <span class="s">&#39;rgb24&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-vcodec&#39;</span><span class="p">,</span> <span class="s">&#39;rawvideo&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">]</span>
</span><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the code above <code>-i myHolidays.mp4</code> indicates the input file, while <code>rawvideo/rgb24</code> asks for a raw RGB output. The format <code>image2pipe</code> and the <code>-</code> at the end tell FFMPEG that it is being used with a pipe by another program. In <code>sp.Popen</code>, the <code>bufsize</code> parameter must be bigger than the size of one frame (see below). It can be omitted most of the time in Python 2 but not in Python 3 where its default value is pretty small.</p>

<p>Now we just have to read the output of FFMPEG. If the video has a size of 420x320 pixels, then the first 420x360x3 bytes outputed by 
FFMPEG will give the RGB values of the pixels of the first frame, line by line, top to bottom. The next 420x360x3 bytes afer that will represent the second frame, etc.
In the next lines we extract one frame and reshape it as a 420x360x3 Numpy array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line"><span class="c"># read 420*360*3 bytes (= 1 frame)</span>
</span><span class="line"><span class="n">raw_image</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">420</span><span class="o">*</span><span class="mi">360</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="c"># transform the byte read into a numpy array</span>
</span><span class="line"><span class="n">image</span> <span class="o">=</span>  <span class="n">numpy</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">raw_image</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">&#39;uint8&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">360</span><span class="p">,</span><span class="mi">420</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
</span><span class="line"><span class="c"># throw away the data in the pipe&#39;s buffer.</span>
</span><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can now view the image with for instance Pylab’s <code>imshow( image )</code>. By repeating the two lines above you can read all the frames of the video one after the other. Reading one frame with this method takes 2 milliseconds on my computer.</p>

<p>What if you want to read the frame that is at time 01h00 in the video ? You could do as above: open the pipe, and read all the frames of the video one by one until you reach that corresponding to t=01h00. But this may be VERY long. A better solution is to call FFMPEG with arguments telling it to start reading “myHolidays.mp4” at time 01h00:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="n">FFMPEG_BIN</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-ss&#39;</span><span class="p">,</span> <span class="s">&#39;00:59;59&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;myHolidays.mp4&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-ss&#39;</span><span class="p">,</span> <span class="s">&#39;1&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="s">&#39;image2pipe&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-pix_fmt&#39;</span><span class="p">,</span> <span class="s">&#39;rgb24&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;-vcodec&#39;</span><span class="p">,</span><span class="s">&#39;rawvideo&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">]</span>
</span><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the code above we ask FFMPEG to quickly (and imprecisely) reach 00:59:59, then to skip 1 second of movie with precision (<code>-ss 1</code>), so that it will effectively start at 01:00:00 sharp (see <a href="https://trac.ffmpeg.org/wiki/Seeking%20with%20FFmpeg">this page</a> for more infos).Then you can start reading frames as previously shown. Seeking a frame with this method takes at most 0.1 second on my computer.</p>

<p>You can also get informations on a file (frames size, number of frames per second, etc.) by calling</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="n">FFMPEG_BINARY</span><span class="p">,</span><span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;my_video.mp4&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">]</span>
</span><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span> <span class="n">stderr</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span>
</span><span class="line"><span class="n">infos</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now <code>infos</code> contains a text describing the file, that you would need to parse to obtain the relevant informations. See the last section for a link to an implementation.</p>

<h2 id="writing">Writing</h2>

<p>To write a series of frames of size 460x360 into the file <code>'my_output_videofile.mp4'</code>, we open FFMPEG and indicate that raw RGB data is going to be piped in:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">command</span> <span class="o">=</span> <span class="p">[</span> <span class="n">FFMPEG_BIN</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-y&#39;</span><span class="p">,</span> <span class="c"># (optional) overwrite output file if it exists</span>
</span><span class="line">        <span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="s">&#39;rawvideo&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-vcodec&#39;</span><span class="p">,</span><span class="s">&#39;rawvideo&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-s&#39;</span><span class="p">,</span> <span class="s">&#39;420x360&#39;</span><span class="p">,</span> <span class="c"># size of one frame</span>
</span><span class="line">        <span class="s">&#39;-pix_fmt&#39;</span><span class="p">,</span> <span class="s">&#39;rgb24&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;-r&#39;</span><span class="p">,</span> <span class="s">&#39;24&#39;</span><span class="p">,</span> <span class="c"># frames per second</span>
</span><span class="line">        <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="c"># The imput comes from a pipe</span>
</span><span class="line">        <span class="s">&#39;-an&#39;</span><span class="p">,</span> <span class="c"># Tells FFMPEG not to expect any audio</span>
</span><span class="line">        <span class="s">&#39;-vcodec&#39;</span><span class="p">,</span> <span class="s">&#39;mpeg&#39;&quot;,</span>
</span><span class="line">        <span class="s">&#39;my_output_videofile.mp4&#39;</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">pipe</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span> <span class="n">command</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">sp</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The codec of the output video can be any valid FFMPEG codec but for many codecs you will need to provide the bitrate as an additional argument (for instance <code>-bitrate 3000k</code>). Now we can write raw frames one after another in the file. These will be raw frames, like the ones outputed by FFMPEG in the previous section: they should be strings of the form “RGBRGBRGB…” where R,G,B are <em>caracters</em> that represent a number between 0 and 255. If our frame is represented as a Numpy array, we simply write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">pipe</span><span class="o">.</span><span class="n">proc</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span> <span class="n">image_array</span><span class="o">.</span><span class="n">tostring</span><span class="p">()</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="going-further">Going further</h2>

<p>I tried to keep the code as simple as possible here. With a few more lines you can make useful classes to manipulate video files, like <a href="https://github.com/Zulko/moviepy/blob/master/moviepy/video/io/ffmpeg_reader.py">FFMPEG_VideoReader</a> and <a href="https://github.com/Zulko/moviepy/blob/master/moviepy/video/io/ffmpeg_writer.py">FFMPEG_VideoWriter</a> that I wrote for my video editing software. In these files in particular how to parse the information on the video, how to save/load pictures using FFMPEG, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A basic example of threads synchronization in Python]]></title>
    <link href="http://Zulko.github.io/blog/2013/09/19/a-basic-example-of-threads-synchronization-in-python/"/>
    <updated>2013-09-19T22:58:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2013/09/19/a-basic-example-of-threads-synchronization-in-python</id>
    <content type="html"><![CDATA[<p><em>We will see how to use threading Events to have functions in different Python threads start at the same time.</em></p>

<!-- more -->

<p>I recently coded a method to view movies in Python : it plays the video, and in the same time, in a parralel thread, it renders the audio. The difficult part is that the audio and video should be exactly synchronized. The pseudo-code looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">movie</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">new_thread</span><span class="p">(</span> <span class="n">play_audio</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">    <span class="n">play_video</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this code, <code>play_audio()</code> and <code>play_video()</code> will start at approximately the same time and will run parallely, but these functions need some preparation before actually starting playing stuff. Their code looks like that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">play_audio</span><span class="p">(</span><span class="n">movie</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">audio</span> <span class="o">=</span> <span class="n">prepare_audio</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span>
</span><span class="line">    <span class="n">audio</span><span class="o">.</span><span class="n">start_playing</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">play_video</span><span class="p">(</span><span class="n">movie</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">video</span> <span class="o">=</span> <span class="n">prepare_video</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span>
</span><span class="line">    <span class="n">video</span><span class="o">.</span><span class="n">start_playing</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To have a well-synchronized movie we need the internal functions <code>audio.start_playing()</code> and <code>video.start_playing()</code>, which are run in two separate threads, to start at exactly the same time. How do we do that ?</p>

<p>The solution seems to be using <code>threading.Event</code> objects. An <code>Event</code> is an object that can be accessed from all the threads and allows very basic communication between them : each thread can <em>set</em> or <em>unset</em> an Event, or check whether this event has already been been <em>set</em> (by another thread).</p>

<p>For our problem we will use two events <code>video_ready</code> and <code>audio_ready</code> which will enable our two threads to scream at each other <em>“I am ready ! Are you ?”</em>. Here is the Python fot that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">threading</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">play_audio</span><span class="p">(</span><span class="n">movie</span><span class="p">,</span> <span class="n">audio_ready</span><span class="p">,</span> <span class="n">video_ready</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">audio</span> <span class="o">=</span> <span class="n">prepare_audio</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">audio_ready</span><span class="o">.</span><span class="n">set</span><span class="p">()</span> <span class="c"># Say &quot;I&#39;m ready&quot; to play_video()</span>
</span><span class="line">    <span class="n">video_ready</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span> <span class="c"># Wait for play_video() to say &quot;I&#39;m ready&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">audio</span><span class="o">.</span><span class="n">start_playing</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">play_video</span><span class="p">(</span><span class="n">movie</span><span class="p">,</span> <span class="n">audio_ready</span><span class="p">,</span> <span class="n">video_ready</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">video</span> <span class="o">=</span> <span class="n">prepare_video</span><span class="p">(</span> <span class="n">movie</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">video_ready</span><span class="o">.</span><span class="n">set</span><span class="p">()</span> <span class="c"># Say &quot;I&#39;m ready&quot; to play_audio()</span>
</span><span class="line">    <span class="n">audio_ready</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>  <span class="c"># Wait for play_audio() to say &quot;I&#39;m ready&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">video</span><span class="o">.</span><span class="n">start_playing</span><span class="p">()</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and finally the code for <code>view(movie)</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">movie</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">audio_ready</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>
</span><span class="line">    <span class="n">video_ready</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="c"># launch the parrallel audio thread</span>
</span><span class="line">    <span class="n">audiothread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">play_audio</span><span class="p">,</span>
</span><span class="line">                              <span class="n">args</span> <span class="o">=</span> <span class="p">(</span><span class="n">movie</span><span class="p">,</span> <span class="n">audio_ready</span><span class="p">,</span> <span class="n">video_ready</span><span class="p">))</span>
</span><span class="line">    <span class="n">audiothread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">play_video</span><span class="p">(</span><span class="n">movie</span><span class="p">,</span> <span class="n">audio_ready</span><span class="p">,</span> <span class="n">video_ready</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A few tips tips to go further:</p>

<ul>
  <li>Here I am using the module <code>threading</code>, and the two threads will be played in parrallel on the same processor. If you have a computer with several processors you can also use the <code>multiprocessing</code> module to have your threads played on two different processors (which can be MUCH faster). Nicely enough the two modules have the same syntax: simply replace <code>threading</code> by <code>multiprocessing</code> and <code>Thread</code> by <code>Process</code> in the example above and it should work.</li>
  <li>In <a href="http://zulko.github.io/moviepy/">my original program</a>, I also use an Event to terminate <code>play_video</code> and <code>play_audio</code> at the same time: when the video playing is exited, <code>play_video</code> <em>unsets</em> that Event. In <code>play_audio</code>, this event is regularly checked, and when it is seen to be unset, <code>play_audio</code> exits too.</li>
  <li>Instead of using <code>wait</code> to wait for an Event to be set, you can use a loop to you decide at which frequency you want to check the Event. Only do that if don’t mind a lag of a few milliseconds between your processes :</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="k">while</span> <span class="ow">not</span> <span class="n">audio_ready</span><span class="o">.</span><span class="n">is_set</span><span class="p">():</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.002</span><span class="p">)</span> <span class="c"># sleep 2 milliseconds</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
</feed>
