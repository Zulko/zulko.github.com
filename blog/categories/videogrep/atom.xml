<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Videogrep, | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/videogrep/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-07-05T13:59:00+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some more Videogreping with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/06/21/some-more-videogreping-with-python/"/>
    <updated>2014-06-21T18:03:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/06/21/some-more-videogreping-with-python</id>
    <content type="html"><![CDATA[<p><em>In this post I give a minimalistic version of Sam Lavigne’s Videogrep and use it to promote world peace.</em></p>

<!-- more -->

<p>This week Sam Lavigne wrote a very entertaining <a href="http://lav.io/2014/06/videogrep-automatic-supercuts-with-python/">blog post</a> introducing Videogrep, a Python script that searches through dialog in videos (using the associated subtitles file), selects scenes (for instance all scenes containing a given word), and cuts together a new video.</p>

<p>The <a href="https://github.com/antiboredom/videogrep">script on Github</a> implements many tweaks and goodies (such as working on multiple files, identifying complex patterns, etc.). In this post I present the code for a minimal videogreper in Python and attempt to refine cuts to get scenes containing whole sentences or single words.</p>

<h2 id="getting-started">Getting started</h2>

<p>A good place to find public domain videos with subtitles is the White House channel on Youtube. In what follows I will be working on the 2012 State Of The Union Address:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Zgfi7wnGZlE "></iframe></div></p>

<p>To get both the video and the subtitles you can use <a href="http://rg3.github.io/youtube-dl/">youtube-dl</a> in a terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>youtube-dl –write-srt –srt-lang en Zgfi7wnGZlE state.mp4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This downloads a video file <code>state.mp4</code> and a text file <code>state.en.srt</code> indicating the subtitles as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1
</span><span class='line'>00:00:00,166 –&gt; 00:00:00,667
</span><span class='line'>(applause)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>2
</span><span class='line'>00:00:00,667 –&gt; 00:00:02,066
</span><span class='line'>The President:
</span><span class='line'>Thank you.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This file can be easily parsed in Python to get a list of elements of the form <code>([t_start,t_end], text_block)</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span> <span class="c"># module for regular expressions&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">convert_time</span><span class="p">(</span><span class="n">timestring</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Converts</span> <span class="n">a</span> <span class="n">string</span> <span class="n">into</span> <span class="n">seconds</span> <span class="err">“””</span>
</span><span class='line'>    <span class="n">nums</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">r</span><span class="err">’</span>\<span class="n">d</span><span class="o">+</span><span class="err">’</span><span class="p">,</span> <span class="n">timestring</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">3600</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">60</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">/</span><span class="mi">1000</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="err">“</span><span class="n">state</span><span class="o">.</span><span class="n">en</span><span class="o">.</span><span class="n">srt</span><span class="err">”</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">times_texts</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">current_times</span> <span class="p">,</span> <span class="n">current_text</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="err">“”</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>    <span class="n">times</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="err">“</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">:[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">:[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="err">”</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">times</span> <span class="o">!=</span> <span class="p">[]:</span>
</span><span class='line'>        <span class="n">current_times</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">convert_time</span><span class="p">,</span> <span class="n">times</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">line</span> <span class="o">==</span> <span class="err">‘</span>\<span class="n">n</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>        <span class="n">times_texts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">current_times</span><span class="p">,</span> <span class="n">current_text</span><span class="p">))</span>
</span><span class='line'>        <span class="n">current_times</span><span class="p">,</span> <span class="n">current_text</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="err">“”</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">current_times</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">current_text</span> <span class="o">=</span> <span class="n">current_text</span> <span class="o">+</span> <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="err">“</span>\<span class="n">n</span><span class="err">”</span><span class="p">,</span><span class="err">”</span> <span class="err">“</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="p">(</span><span class="n">times_texts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>»&gt; [([0.166, 0.667], ‘(applause) ‘),
</span><span class='line'>»&gt;  ([0.667, 2.066], ‘The President: Thank you. ‘)
</span><span class='line'>»&gt;   … ]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="a-simple-videogreper">A simple videogreper</h2>

<p>Let us have a look at the most common words in the speech:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'><span class="n">whole_text</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">text</span> <span class="k">for</span> <span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span> <span class="ow">in</span> <span class="n">times_texts</span><span class="p">])</span>
</span><span class='line'><span class="n">all_words</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="err">“</span>\<span class="n">w</span><span class="o">+</span><span class="err">”</span><span class="p">,</span> <span class="n">whole_text</span><span class="p">)</span>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">([</span><span class="n">w</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">all_words</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>»&gt; [(‘applause’, 82), (‘american’, 35), (‘america’, 33), (‘because’, 25),
</span><span class='line'>»&gt;  (‘should’, 24), (‘energy’, 23), (‘people’, 23), (‘americans’, 20),
</span><span class='line'>»&gt;  (‘country’, 18), (‘cheering’, 15)]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Seems like the word <em>“should”</em> has been pronounced a lot. Let us find the times of all the subtitle blocks in which it appears:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cuts</span> <span class="o">=</span> <span class="p">[</span><span class="n">times</span> <span class="k">for</span> <span class="p">(</span><span class="n">times</span><span class="p">,</span><span class="n">text</span><span class="p">)</span> <span class="ow">in</span> <span class="n">times_texts</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="err">“</span><span class="n">should</span><span class="err">”</span><span class="p">,</span><span class="n">text</span><span class="p">)</span> <span class="o">!=</span> <span class="p">[])]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we cut and put together all these scenes using MoviePy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span><span class="p">,</span> <span class="n">concatenate</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">video</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">state</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">assemble_cuts</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="n">outputfile</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Concatenate</span> <span class="n">cuts</span> <span class="ow">and</span> <span class="n">generate</span> <span class="n">a</span> <span class="n">video</span> <span class="nb">file</span><span class="o">.</span> <span class="err">“””</span>
</span><span class='line'>    <span class="n">final</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">video</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>                         <span class="k">for</span> <span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="p">)</span> <span class="ow">in</span> <span class="n">cuts</span><span class="p">])</span>
</span><span class='line'>    <span class="n">final</span><span class="o">.</span><span class="n">to_videofile</span><span class="p">(</span><span class="n">outputfile</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">assemble_cuts</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="err">“</span><span class="n">should</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the result:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/dNme5GR1Al4 "></iframe></div></p>

<p>It is promising, but in some scenes we don’t get to know exactly <em>what should be done</em>, which is frustrating. In the next section we add a little content-awareness to get more relevant cuts.</p>

<h2 id="greping-whole-sentences">Greping whole sentences</h2>

<p>We now want to cut together all the sentences containing the word <em>“should”</em>. We first explore the whole text looking for sentences containing that word, then we find the subtitle blocks corresponding to the start and end of each sentence, and we cut the video file accordingly.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">times</span><span class="p">,</span> <span class="n">texts</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">times_texts</span><span class="p">)</span>
</span><span class='line'><span class="n">txt_lengths</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">texts</span><span class="p">)</span> <span class="c"># length of each subtitle block</span>
</span><span class='line'><span class="n">indices</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">txt_lengths</span><span class="p">[:</span><span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">texts</span><span class="p">))]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">find_times</span><span class="p">(</span><span class="n">position</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Finds</span> <span class="n">the</span> <span class="p">(</span><span class="n">t_start</span><span class="p">,</span> <span class="n">t_end</span><span class="p">)</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">subtitles</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">a</span> <span class="n">given</span> <span class="n">position</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">whole</span> <span class="n">text</span><span class="o">.</span> <span class="err">“””</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">times</span><span class="p">[</span> <span class="nb">max</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">))</span>
</span><span class='line'>                       <span class="k">if</span> <span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">position</span><span class="p">)])]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;regular-expression-matching-all-sentences-with-should&quot;</span><span class="o">&gt;</span><span class="n">Regular</span> <span class="n">expression</span> <span class="n">matching</span> <span class="nb">all</span> <span class="n">sentences</span> <span class="k">with</span> <span class="err">‘</span><span class="n">should</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">regexpr</span> <span class="o">=</span> <span class="err">“</span><span class="p">([</span><span class="n">A</span><span class="o">-</span><span class="n">Z</span><span class="p">][</span><span class="o">^.</span><span class="err">!?</span><span class="p">]</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;%</span><span class="n">s</span><span class="p">[</span><span class="o">^.</span><span class="err">!?</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">[</span><span class="o">.</span><span class="err">!?</span><span class="p">])</span><span class="err">”</span><span class="o">%</span><span class="p">(</span><span class="err">“</span><span class="n">should</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cuts</span> <span class="o">=</span> <span class="p">[</span> <span class="p">(</span><span class="n">find_times</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">())[</span><span class="mi">0</span><span class="p">],</span> <span class="n">find_times</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">())[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>         <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">regexpr</span><span class="p">,</span> <span class="n">whole_text</span><span class="p">)</span> <span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">assemble_cuts</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="err">“</span><span class="n">should_sentence</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s much better:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/0nDgurPQsXc "></iframe></div></p>

<p>Note that with just a little more code you could achieve much more. In Videogrep the author uses the Python package <code>pattern</code> to look for advanced phrase constructions, such as all phrases of the form gerund-determiner-adjective-noun.</p>

<h2 id="greping-single-words">Greping single words</h2>

<p>Let us take a step in the other direction and see if it is possible to automatically cut a scene with exactly one word or expression, and as little possible of the words around it. Consider the following subtitle block:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00:03:20,100 –&gt; 00:03:23,100
</span><span class='line'>We can do this.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can roughly evaluate that the word <em>“We”</em> will be pronounced in the first quarter of the time span (from 3:20.1 to 3:20.85), <em>“can”</em> in the second quarter (from 3:20.85 to 3:21.6), etc. Following this reasoning, here is a function that finds the <em>exact</em> times using the relative position of the characters in the subtitles blocks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">find_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">padding</span><span class="o">=.</span><span class="mo">05</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Finds</span> <span class="nb">all</span> <span class="err">‘</span><span class="n">exact</span><span class="err">’</span> <span class="p">(</span><span class="n">t_start</span><span class="p">,</span> <span class="n">t_end</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="n">word</span> <span class="err">“””</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>               <span class="k">for</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">text</span><span class="p">)</span> <span class="ow">in</span> <span class="n">times_texts</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[(</span><span class="n">t1</span> <span class="o">+</span> <span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t2</span><span class="o">-</span><span class="n">t1</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">-</span> <span class="n">padding</span><span class="p">,</span>
</span><span class='line'>             <span class="n">t1</span> <span class="o">+</span> <span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t2</span><span class="o">-</span><span class="n">t1</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">+</span> <span class="n">padding</span><span class="p">)</span>
</span><span class='line'>             <span class="k">for</span> <span class="n">m</span><span class="p">,((</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">),</span><span class="n">text</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">times_texts</span><span class="p">)</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="n">m</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let us try it on <em>“Americans”</em>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">assemble_cuts</span><span class="p">(</span> <span class="n">find_word</span><span class="p">(</span><span class="err">“</span><span class="n">Americans</span><span class="err">”</span><span class="p">),</span> <span class="err">“</span><span class="n">americans</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/L59kcu6Zy9Q "></iframe></div></p>

<p>At least some of the cuts worked properly. If we use much-pronounced words we may find at least one correct cut for each of them and we can build a whole sentence:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="err">“</span><span class="n">Americans</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">must</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">develop</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nb">open</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">source</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>          <span class="err">“</span> <span class="n">software</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="k">for</span> <span class="n">the</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span> <span class="n">rest</span> <span class="err">“</span><span class="p">,</span> <span class="err">“</span><span class="n">of</span> <span class="n">the</span> <span class="n">world</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>          <span class="err">“</span><span class="n">instead</span> <span class="n">of</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span> <span class="n">soldiers</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="c"># take clip number ‘n’&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cuts</span> <span class="o">=</span> <span class="p">[</span><span class="n">find_word</span><span class="p">(</span><span class="n">word</span><span class="p">)[</span><span class="n">n</span><span class="p">]</span> <span class="k">for</span> <span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="n">n</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)]</span>
</span><span class='line'><span class="n">assemble_cuts</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="err">“</span><span class="n">fake_speech</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/iWRYGULFd_c "></iframe></div></p>

<p>Wow ! That seemed <em>so</em> real, and it almost made sense. From there the cuts could be refined by hand, but the script did most of the work and surely deserved, if not a Nobel Peace Prize, fourteen minutes of applause:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cuts</span> <span class="o">=</span> <span class="p">[</span><span class="n">times</span> <span class="k">for</span> <span class="p">(</span><span class="n">times</span><span class="p">,</span><span class="n">text</span><span class="p">)</span> <span class="ow">in</span> <span class="n">times_texts</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="err">“</span><span class="n">applause</span><span class="err">”</span><span class="p">,</span><span class="n">text</span><span class="p">)</span> <span class="o">!=</span> <span class="p">[])]</span>
</span><span class='line'><span class="n">assemble_cuts</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="err">“</span><span class="n">applause</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/81uprP2GzxI "></iframe></div></p>

]]></content>
  </entry>
  
</feed>
