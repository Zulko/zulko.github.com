<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Loops | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/loops/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2015-02-10T15:56:17+01:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An algorithm to extract looping GIFs from videos]]></title>
    <link href="http://Zulko.github.io/blog/2015/02/01/extracting-perfectly-looping-gifs-from-videos-with-python-and-moviepy/"/>
    <updated>2015-02-01T15:34:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2015/02/01/extracting-perfectly-looping-gifs-from-videos-with-python-and-moviepy</id>
    <content type="html"><![CDATA[<p>Looping GIFs are a popular form of art on the Web, with two dedicated forums on Reddit (<a href="http://www.reddit.com/r/perfectloops/">r/perfectloops</a> and <a href="http://www.reddit.com/r/cinemagraphs">r/cinemagraphs</a>) and countless <a href="https://www.tumblr.com/tagged/looping-gif">Tumblr pages</a>.</p>

<p><img class="center" src="http://i.imgur.com/g9UBTNM.gif" width="400" title="By ORBO, one of my favorite GIF artists." ></p>

<p>Finding and extracting well-looping segments from a movie requires much attention and patience, and will likely leave you like this in front of your computer:</p>

<p><img class="center" src="http://i.imgur.com/sLgEFC4.gif"></p>

<p>To make things easier I wrote a Python script which automates the task. This post explains the math behind the algorithm and provides a few examples of use.</p>

<h2 id="when-is-a-video-segment-well-looping-">When is a video segment well-looping ?</h2>

<p>We will say that a video segment loops well when its first and last video frames are very similar. 
A video frame <script type="math/tex">F</script> can be represented by a sequence of <script type="math/tex">N</script> integers <script type="math/tex">(F[1], \cdots, F[N])</script> whose values indicate the colors of the image’s pixels. For instance, <script type="math/tex">F[1]</script> <script type="math/tex">F[2]</script> and <script type="math/tex">F[3]</script>  give the Red, Green, Blue values of the first pixel, <script type="math/tex">F[4]</script>, <script type="math/tex">F[5]</script>, <script type="math/tex">F[6]</script> define the color of the second pixel, etc. </p>

<p>Given two frames <script type="math/tex">F_1</script>, <script type="math/tex">F_2</script> of a same video, we define the difference between these frames as the sum of the differences between their color values:</p>

<script type="math/tex; mode=display"> d(F_1,  F_2) = \sqrt{\sum_{i=1}^N (F_1[i] -  F_2[i])^2}. </script>

<p>We will consider that the two frames are similar when <script type="math/tex">d(F_1,F_2) </script> is under some arbitrary threshold <script type="math/tex">T</script>.</p>

<p>For what follows, it is important to note that <script type="math/tex">d(F_1, F_2)</script> defines a <em>distance</em> between the frames, and can be seen as a generalization of the geometrical distance between two points in a plan:</p>

<p><img class="center" src="/images/loopsvideo/distance.png"></p>

<p>As a consequence <script type="math/tex">d(F_1,F_2)</script> has nice mathematical properties which will use in the next section to speed up computations.</p>

<h2 id="finding-well-looping-segments">Finding well-looping segments</h2>

<p>In this section we want to find the times (start and end) of all the well-looping video segments of duration 3 seconds or less in a given video. A simple way to do this is to compare each frame of the movie with all the frames in the previous three seconds. When we find two similar frames (that is, whose distance in under some pre-defined threshold <script type="math/tex">T</script>), we add their corresponding times to our list.</p>

<p>The problem is that this method requires a huge number of frame comparisons (around ten millions in a standard video) which takes hours. So let us see a few tricks to makes computations faster.</p>

<p><strong>Trick 1: use reduced versions of the frames.</strong> HD videos frames can have millions of pixels, so computing the distance between them will require millions of operations. When reduced to small (150-pixel-wide) thumbnails these frames are still detailed enough for our purpose, and their distance can be computed much faster (they also take less place in the RAM).</p>

<p><strong>Trick 2: use triangular inequalities.</strong> With this very efficient trick we will be able to deduce whether two frames match, without having to compute their distance. Since <script type="math/tex">d(F_1, F_2)</script> defines a mathematical distance between two frames, many results from classical geometry apply, and in particular the following inequalities on the lengths of a triangle:</p>

<p><img class="center" src="/images/loopsvideo/trineq1.png" width="350">
<img class="center" src="/images/loopsvideo/trineq2.png" width="320"></p>

<p>The first inequality tells us that if A is very close to B which in turn is very close to C, then A is also close to C. In terms of video frames, this becomes:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
 d(F_1, F_3) < d(F_1,  F_2) + d(F_2, F_3)  %]]&gt;</script>

<p>In practice we will use it as follows: if we already know that a frame <script type="math/tex">F_1</script> is very similar to a frame <script type="math/tex">F_2</script>, and that  <script type="math/tex">F_2</script> is very similar to another frame <script type="math/tex">F_3</script>, then we do not need to compute <script type="math/tex">d(F_1,F_3)</script> to know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are also very similar.</p>

<p>The second inequality tells us that if a point A is very far from B, and B is close to C, then A is also far from C. Or in terms of frames:</p>

<script type="math/tex; mode=display"> d(F_1, F_3) > d(F_2, F_3) - d(F_1,  F_2) </script>

<p>If <script type="math/tex">F_1</script> is very similar to <script type="math/tex">F_2</script>, and <script type="math/tex">F_2</script> is different from <script type="math/tex">F_3</script>, then we do not need to compute <script type="math/tex">d(F_1,F_3)</script> to know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are also very different.</p>

<p>Now it gets a little more complicated: we will apply these triangular inequalities to get informations on the upper and lower bounds of the distances between frames, which will be updated every time we compute a distance between two frames. For instance, after computing the distance <script type="math/tex">d(F_1, F_2)</script>, the upper and lower bounds of <script type="math/tex">d(F_1, F3)</script>, denoted <script type="math/tex">\overline{F_1F_3}</script> and <script type="math/tex">\underline{F_1F_3}</script>, can be updated as follows:</p>

<script type="math/tex; mode=display">
\mbox{Eq.1}\,
\begin{cases}
\overline{F_1F_3} \leftarrow  \min\left(\overline{F_1F_3} ,\,\,\, d(F_1,F_2) + \overline{F_2F_3}\right) \\
\underline{F_1F_3} \leftarrow  \max\left(\underline{F_1F_3},\,\,\, d(F_1,F_2) - \overline{F_2F_3},\,\,\,
\underline{F_2F_3} - d(F_1,F_2) \right)
\end{cases}
</script>

<p>If after the update we have <script type="math/tex">% &lt;![CDATA[
\overline{F_1F_3}<T %]]&gt;</script>, we conclude that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are a good match. And if at some point <script type="math/tex">\underline{F_1F_3}>T</script>, we know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> don’t match. If we cannot decide whether <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> match using this technique, we will eventually need to compute explicity <script type="math/tex">d(F_1, F_3)</script>, but then knowing <script type="math/tex">d(F_1, F_3)</script> will in turn enable us to update the bounds on another distance, <script type="math/tex">d(F_1, F_4)</script>, and so on.</p>

<p>As an illustration, suppose that a video has the following frames in this order:</p>

<p><img class="center" src="/images/loopsvideo/action.png"></p>

<p>When the algorithm arrives at <script type="math/tex">F_4</script>, it first computes the distance between this frame and <script type="math/tex">F_3</script> and finds that they don’t match. At this point the algorithm has already found thaft <script type="math/tex">F_3</script> is quite similar to <script type="math/tex">F_2</script> and <script type="math/tex">F_1</script>, so it deduces that neither <script type="math/tex">F_1</script> nor <script type="math/tex">F_2</script> match with <script type="math/tex">F_4</script> (and, certainly, neither do the dozen frames before ). In practice, this method avoids computing 80% to 90% of the distances between frames.</p>

<p><strong>Trick 3: use an efficient formula for the distance.</strong> When we compute the distance between two frames using the formula from the last section, we need approximately <script type="math/tex">3N</script> operations: <script type="math/tex">N</script> subtractions, <script type="math/tex">N</script> products, and <script type="math/tex">(N-1)</script> additions to obtain the final sum. But the formula for <script type="math/tex">d(F_1, F_2)</script> can also be rewritten under this form, known as the <a href="http://en.wikipedia.org/wiki/Law_of_cosines#Vector_formulation">law of cosines</a>:</p>

<script type="math/tex; mode=display">
d(F_1,  F_2) = \sqrt{ \|F_1\|_2^2 + \| F_2\|_2^2 - 2 (F_1 \cdot  F_2) },
</script>

<p>where we used the following notations:</p>

<script type="math/tex; mode=display">
\|F\|_2^2 = \sum_{i=1}^N F[i]^2,  \,\,\,\,\,\,\, F_1 \cdot F_2 =  \sum_{i=1}^N F_1[i]F_2[i]
</script>

<p>The interesting thing with this expression of <script type="math/tex">d(F_1, F_2)</script> is that if we first compute the norm <script type="math/tex">\|F\|</script> of each frame once, we can obtain the distance between any pair of <script type="math/tex">F_1</script> and  <script type="math/tex">F_2</script> simply by computing <script type="math/tex">(F_1 \cdot  F_2)</script>, which requires only <script type="math/tex">2N</script> operations and is therefore 50% faster.</p>

<p>Another advantage of computing <script type="math/tex">\|F\|</script> for each frame is that for two frames <script type="math/tex">F_1</script> and <script type="math/tex">F_2</script> we have</p>

<script type="math/tex; mode=display">
\mbox{abs}(\|F_1\| - \|F_2\|) \leq d(F_1, F_2) \leq  \|F_1\| + \|F_2\|
</script>

<p>which provides initial values for the upper and lower bounds on the frame distances used in Trick 2:</p>

<script type="math/tex; mode=display">
\mbox{Eq.2}\,
\begin{cases}
\overline{F_1F_2} \leftarrow  \|F_1\| + \|F_2\| \\
\underline{F_1F_2} \leftarrow  \mbox{abs}(\|F_1\| - \|F_2\|).
\end{cases}
</script>

<p><strong>Final algorithm in pseudo-code.</strong> Putting everything together, we obtain the following algorithm:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>for each frame F1 in the movie:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>F1 &lt;- downsized( F1 )
</span><span class='line'>previous_frames &lt;- list of frames in the 3 seconds before F1
</span><span class='line'>
</span><span class='line'>compute and store |F1|
</span><span class='line'>
</span><span class='line'>for each frame F2 in previous_frames:
</span><span class='line'>    compute upper_F1_F2 and lower_F1_F2 using Eq.2
</span><span class='line'>    if upper_F1_F2 &lt; T:
</span><span class='line'>        mark (F1, F2) as accepted 
</span><span class='line'>    if lower_F1_F2 &gt; T:
</span><span class='line'>        mark (F1, F2) as rejected
</span><span class='line'>
</span><span class='line'>for each frame F2 in previous_frames:
</span><span class='line'>    if couple (F1,F2) isn't already accepted or rejected:
</span><span class='line'>        compute d(F1, F2)
</span><span class='line'>        for each frame F3 after F2 in previous_frames:
</span><span class='line'>            update upper_F1_F3 and lower_F1_F3 using Eq.1
</span><span class='line'>            if upper_F1_F3 &lt; T:
</span><span class='line'>                mark (F1, F3) as accepted 
</span><span class='line'>            if lower_F1_F3 &gt; T:
</span><span class='line'>                mark (F1, F3) as rejected</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Here is the <a href="https://github.com/Zulko/moviepy/blob/1ddd608ccc28cf604ada17c85e2c436dc8ab61b2/moviepy/video/tools/cuts.py#L115-L172">implementation in Python</a>. The computation time may depend on the quality of the video file, but most movies I tried were processed in circa 20 minutes. Impressive, right, Eugene ?</p>

<p><img class="center" src="http://i.imgur.com/CpJ4UbL.gif" title="I really wanted to place this GIF somewhere because I’m so proud of it. It’s not every day I get to make a pun in English. Also: Eugene is “stuck in a loop” of hair. Ah ah ah ah." ></p>

<h2 id="selecting-interesting-segments">Selecting interesting segments</h2>

<p>In the previous section we described a method to find <em>all</em> pairs of matching frames, including consecutive frames (which often look very much alike) and frames from still segments (typically, black screens). So we end up with typically a hundred thousand video segments, only a few of which are really interesting, and we must find a way to filter out all the segments we don’t want before extracting GIFs. This filtering operation takes just a few seconds but its success depends greatly on the filtering criteria you use. Here are some examples that work well:</p>

<ul>
  <li>The first and last frames must be separated by at least 0.5 second.</li>
  <li>There must be at least one frame in the sequence which doesn’t match at all with the first frame. This criterion enables to eliminate still segments.</li>
  <li>The start of the first frame must be at least 0.5 seconds after the start of the last extracted segment. This is to avoid doublons (segments which start and end almost at the same times).</li>
</ul>

<p>I try to be not too restrictive (to avoid filtering out good segments by accident) so I generally end up with about 200 GIFs, many of them them only midly interesting (blinking eyes and such). The last step is a manual filtering which looks like this:</p>

<p><img class="center" src="http://i.imgur.com/3y3OI1b.gif"></p>

<h2 id="examples-of-use">Examples of use</h2>

<p>I implemented this algorithm as a plugin of my Python video library <a href="http://zulko.github.io/moviepy/">MoviePy</a>. Here is an example script with much details:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;open-a-video-file-any-format-should-work&quot;</span><span class="o">&gt;</span><span class="n">Open</span> <span class="n">a</span> <span class="n">video</span> <span class="nb">file</span> <span class="p">(</span><span class="nb">any</span> <span class="n">format</span> <span class="n">should</span> <span class="n">work</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">myvideo</span><span class="o">.</span><span class="n">avi</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;downsize-the-clip-to-a-width-of-150px-to-speed-up-things&quot;</span><span class="o">&gt;</span><span class="n">Downsize</span> <span class="n">the</span> <span class="n">clip</span> <span class="n">to</span> <span class="n">a</span> <span class="n">width</span> <span class="n">of</span> <span class="mi">150</span><span class="n">px</span> <span class="n">to</span> <span class="n">speed</span> <span class="n">up</span> <span class="n">things</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip_small</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;find-all-the-pairs-of-matching-frames-an-return-their&quot;</span><span class="o">&gt;</span><span class="n">Find</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">pairs</span> <span class="n">of</span> <span class="n">matching</span> <span class="n">frames</span> <span class="n">an</span> <span class="k">return</span> <span class="n">their</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># corresponding start and end times. Takes 15-60 minutes.</span>
</span><span class='line'><span class="n">matches</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip_small</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;optional-save-the-matches-for-later-use&quot;</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Optional</span><span class="p">)</span> <span class="n">Save</span> <span class="n">the</span> <span class="n">matches</span> <span class="k">for</span> <span class="n">later</span> <span class="n">use</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># matches.save(“myvideo_matches.txt”)</span>
</span><span class='line'><span class="c"># matches = FramesMatches.load(“myvideo_matches.txt”)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;filter-the-scenes-keep-only-segments-with-duration-15-seconds&quot;</span><span class="o">&gt;</span><span class="n">Filter</span> <span class="n">the</span> <span class="n">scenes</span><span class="p">:</span> <span class="n">keep</span> <span class="n">only</span> <span class="n">segments</span> <span class="k">with</span> <span class="n">duration</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">1.5</span> <span class="n">seconds</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># where the first and last frame have a per-pixel distance &amp;lt; 1,</span>
</span><span class='line'><span class="c"># with at least one frame at a distance 2 of the first frame,</span>
</span><span class='line'><span class="c"># and with &amp;gt;0.5 seconds between the starts of the selected segments.</span>
</span><span class='line'><span class="n">selected_scenes</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">select_scenes</span><span class="p">(</span><span class="n">match_thr</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">min_time_span</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">nomatch_thr</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">time_distance</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;the-final-gifs-will-be-450-pixels-wide&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">final</span> <span class="n">GIFs</span> <span class="n">will</span> <span class="n">be</span> <span class="mi">450</span> <span class="n">pixels</span> <span class="n">wide</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip_medium</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">450</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;extract-all-the-selected-scenes-as-gifs-in-folder-myfolder&quot;</span><span class="o">&gt;</span><span class="n">Extract</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">selected</span> <span class="n">scenes</span> <span class="k">as</span> <span class="n">GIFs</span> <span class="ow">in</span> <span class="n">folder</span> <span class="err">“</span><span class="n">myfolder</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">selected_scenes</span><span class="o">.</span><span class="n">write_gifs</span><span class="p">(</span><span class="n">clip_medium</span><span class="p">,</span> <span class="err">“</span><span class="n">myfolder</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is what be obtain when we try it on Disney’s Snow White:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mp</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span>
</span><span class='line'><span class="n">clip</span> <span class="o">=</span> <span class="n">mp</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">vz</span><span class="o">/</span><span class="n">Vid</span><span class="err">é</span><span class="n">os</span><span class="o">/</span><span class="n">snowwhite</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">scenes</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">120</span><span class="p">),</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">selected_scenes</span> <span class="o">=</span> <span class="n">scenes</span><span class="o">.</span><span class="n">select_scenes</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">selected_scenes</span><span class="o">.</span><span class="n">write_gifs</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">270</span><span class="p">),</span> <span class="err">“</span><span class="n">snow_white</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<div align="center">
<iframe class="imgur-album" width="400" height="350" frameborder="0" src="http://Zulko.github.io//imgur.com/a/nVcqQ/embed?background=f2f2f2&amp;text=1a1a1a&amp;link=4e76c9"></iframe>
</div>

<p>Some of these GIFs could be cut better, some are not really interesting (too short), and a few looping segments have been missed. I think the culprits are the parameters in the last filtering step, which could have been tuned better.</p>

<p>As another example, someone recently posted a Youtube video on <a href="http://www.reddit.com/r/perfectloops/">r/perfectloops</a> and required that it be transformed into a looping GIF. The following script does just that: it downloads the video from Youtube, finds the best times (t1,t2) to cut a looping sequence, and generates a GIF:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;get-the-video-from-youtube-save-it-as-hamacmp4&quot;</span><span class="o">&gt;</span><span class="n">Get</span> <span class="n">the</span> <span class="n">video</span> <span class="kn">from</span> <span class="nn">youtube</span><span class="p">,</span> <span class="n">save</span> <span class="n">it</span> <span class="k">as</span> <span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mpy</span><span class="o">.</span><span class="n">download_webfile</span><span class="p">(</span><span class="err">“</span><span class="n">NpxD9TZIlv8</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">matches</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c"># loose matching</span>
</span><span class='line'><span class="c"># find the best matching pair of frames &amp;gt; 1.5s away</span>
</span><span class='line'><span class="n">best</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">time_span</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">1.5</span><span class="p">)</span><span class="o">.</span><span class="n">best</span><span class="p">()</span>
</span><span class='line'><span class="c"># Write the sequence to a GIF (with speed=30% of the original)</span>
</span><span class='line'><span class="n">final</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="n">best</span><span class="o">.</span><span class="n">t1</span><span class="p">,</span> <span class="n">best</span><span class="o">.</span><span class="n">t2</span><span class="p">)</span><span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
</span><span class='line'><span class="n">final</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/APJHiej.gif" title="Sea sick ?" ></p>

<p>With MoviePy you can also post-process your GIFs to add text:</p>

<div align="center"><a href="https://gist.github.com/Zulko/25ea4d949aea5dbf8925">code</a></div>
<p><img class="center" src="http://i.imgur.com/thrh1TU.gif"></p>

<p>And since you read until there, here is a more advanced trick for you:</p>

<div align="center"><a href="https://gist.github.com/Zulko/c70f1469fc0a0cff94cd">code</a></div>
<p><img class="center" src="http://i.imgur.com/gxEHfLX.gif"></p>

<h2 id="your-turn-">Your turn !</h2>

<p>The algorithm I presented here is not perfect. It works poorly with low-luminosity clips, and sometimes a slight camera movement or a moving object in the background can prevent a segment from looping. While these segments could be easily corrected by a human, they are more difficult to spot and process with an algorithm.</p>

<p>So my script didn’t completely kill the game, and making looping gifs is still an art. If you have any ideas or remarks on the algorithm, or if you tried it and found some interesting loops in a movie, I’ll be happy to hear about it ! Until then, cheers, and happy GIFing !</p>
]]></content>
  </entry>
  
</feed>
