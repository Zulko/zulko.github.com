<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: threads, | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/threads/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-06-09T14:19:10+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A basic example of threads synchronization in Python]]></title>
    <link href="http://Zulko.github.io/blog/2013/09/19/a-basic-example-of-threads-synchronization-in-python/"/>
    <updated>2013-09-19T22:58:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2013/09/19/a-basic-example-of-threads-synchronization-in-python</id>
    <content type="html"><![CDATA[<p><em>We will see how to use threading Events to have functions in different Python threads start at the same time.</em></p>

<!-- more -->

<p>I recently coded a method to view movies in Python : it plays the video, and in the same time, in a parralel thread, it renders the audio. The difficult part is that the audio and video should be exactly synchronized. The pseudo-code looks like this:</p>

<p>{% codeblock lang:python %}
def view(movie):</p>

<pre><code>new_thread( play_audio( movie ) ) 
play_video( movie ) {% endcodeblock %}
</code></pre>

<p>In this code, <code>play_audio()</code> and <code>play_video()</code> will start at approximately the same time and will run parallely, but these functions need some preparation before actually starting playing stuff. Their code looks like that:</p>

<p>{% codeblock lang:python %}
def play_audio(movie):</p>

<pre><code>audio = prepare_audio( movie )
audio.start_playing()
</code></pre>

<p>def play_video(movie):</p>

<pre><code>video = prepare_video( movie )
video.start_playing() {% endcodeblock %}
</code></pre>

<p>To have a well-synchronized movie we need the internal functions <code>audio.start_playing()</code> and <code>video.start_playing()</code>, which are run in two separate threads, to start at exactly the same time. How do we do that ?</p>

<p>The solution seems to be using <code>threading.Event</code> objects. An <code>Event</code> is an object that can be accessed from all the threads and allows very basic communication between them : each thread can <em>set</em> or <em>unset</em> an Event, or check whether this event has already been been <em>set</em> (by another thread).</p>

<p>For our problem we will use two events <code>video_ready</code> and <code>audio_ready</code> which will enable our two threads to scream at each other <em>“I am ready ! Are you ?”</em>. Here is the Python fot that:</p>

<p>{% codeblock lang:python %}
import threading</p>

<p>def play_audio(movie, audio_ready, video_ready):</p>

<pre><code>audio = prepare_audio( movie )

audio_ready.set() # Say "I'm ready" to play_video()
video_ready.wait() # Wait for play_video() to say "I'm ready"

audio.start_playing()
</code></pre>

<p>def play_video(movie, audio_ready, video_ready):</p>

<pre><code>video = prepare_video( movie )

video_ready.set() # Say "I'm ready" to play_audio()
audio_ready.wait()  # Wait for play_audio() to say "I'm ready"

video.start_playing()
</code></pre>

<p>{% endcodeblock %}</p>

<p>and finally the code for <code>view(movie)</code>:</p>

<p>{% codeblock lang:python %}
def view(movie):</p>

<pre><code>audio_ready = threading.Event()
video_ready = threading.Event()


# launch the parrallel audio thread
audiothread = threading.Thread(target=play_audio,
                          args = (movie, audio_ready, video_ready))
audiothread.start()

play_video(movie, audio_ready, video_ready) {% endcodeblock %}
</code></pre>

<p>A few tips tips to go further:</p>

<ul>
  <li>Here I am using the module <code>threading</code>, and the two threads will be played in parrallel on the same processor. If you have a computer with several processors you can also use the <code>multiprocessing</code> module to have your threads played on two different processors (which can be MUCH faster). Nicely enough the two modules have the same syntax: simply replace <code>threading</code> by <code>multiprocessing</code> and <code>Thread</code> by <code>Process</code> in the example above and it should work.</li>
  <li>In <a href="http://zulko.github.io/moviepy/">my original program</a>, I also use an Event to terminate <code>play_video</code> and <code>play_audio</code> at the same time: when the video playing is exited, <code>play_video</code> <em>unsets</em> that Event. In <code>play_audio</code>, this event is regularly checked, and when it is seen to be unset, <code>play_audio</code> exits too.</li>
  <li>Instead of using <code>wait</code> to wait for an Event to be set, you can use a loop to you decide at which frequency you want to check the Event. Only do that if don’t mind a lag of a few milliseconds between your processes :</li>
</ul>

<p>{% codeblock lang:python %}
import time
while not audio_ready.is_set():
    time.sleep(0.002) # sleep 2 milliseconds
{% endcodeblock %}</p>

]]></content>
  </entry>
  
</feed>
