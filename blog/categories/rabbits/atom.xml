<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rabbits | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/rabbits/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-06-09T14:19:10+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interception of a linear trajectory with constant speed]]></title>
    <link href="http://Zulko.github.io/blog/2013/11/11/interception-of-a-linear-trajectory-with-constant-speed/"/>
    <updated>2013-11-11T23:59:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2013/11/11/interception-of-a-linear-trajectory-with-constant-speed</id>
    <content type="html"><![CDATA[<p><em>In this post I show how helpful trigonometry can be when it comes to catching rabbits.</em></p>

<!-- more -->

<h2 id="problem">Problem</h2>

<p>Alice just spotted a white rabbit urging to its rabbit hole ! Given the coordinates of the positions A, B, H, of Alice, the rabbit and the hole, as well as the respective speeds $S_A$ and $S_B$ of Alice and the rabbit, say whether Alice can catch the rabbit before it disappears, and give the time and place of the fastest possible interception.</p>

<h2 id="solution">Solution</h2>

<p>I guess that I am not the first one to solve this but I couldn’t find any simple solution on the internet. The one I am giving here relies on trigonometry, but interestingly it doesn’t require to compute any trigonometrical function !</p>

<p>If sines give you fever, don’t wait for the first <em>sines of fever</em> (uh uh uh), just skip this part, I summarize everything in the next section.</p>

<p>We call  C and $t_C$ the location and the time of the catch. It is straightforward that, since we are looking for the fastest catch, Alice’s trajectory towards C must be a straight line. Here is a sketch of the problem:</p>

<p>{% img center /images/alice/alice_schema.jpeg %}
Note that the lengths AC and BC denote the distance run by Alice and the Rabbit until the catch, therefore they verify</p>

<script type="math/tex; mode=display"> AC = S_A t_C </script>

<script type="math/tex; mode=display"> BC = S_B t_C </script>

<p><strong>So finding the length BC would answer the problem</strong>, as it would tell us whether Alice can catch the rabbit before it reaches the rabbit hole (case $BC&lt;BH$), and would immediately lead to both the location and time of the catch :</p>

<script type="math/tex; mode=display"> C = B + \dfrac{BC}{BH}\overrightarrow{BH} </script>

<script type="math/tex; mode=display"> t_C = BC/S_B </script>

<p>To express BC using the coordinates of the points, let us apply the famous <em>Law of Sines</em> to the triangle ABC:</p>

<script type="math/tex; mode=display"> \dfrac{\sin \alpha}{BC} = \dfrac{\sin \beta}{AC} = \dfrac{\sin \gamma}{AB} </script>

<p>Wich leads to</p>

<script type="math/tex; mode=display"> BC = \dfrac {\sin \alpha}{\sin \gamma} AB = \dfrac {\sin \alpha}{\sin \gamma} \sqrt{(x_B-x_A)^2+(y_B-y_A)^2} </script>

<p>Now all we have to do is to express $\sin \alpha$ and $\sin \gamma$ in function of the given data. To do so we first compute $\sin(\beta)$, then we express $\sin \alpha$ with $\sin \beta$, and we express $\sin \gamma$ as a function of $\sin \alpha$ and $\sin \beta$.</p>

<p>The value of $\sin \beta$ can be computed from the points coordinates as follows:</p>

<script type="math/tex; mode=display"> \sin \beta = \dfrac{det(\overrightarrow{BA},\overrightarrow{BH})}{ BA * BH } = \dfrac{(x_A - x_B)(y_H-y_B) - (y_A - y_B)(x_H-x_B)}{\sqrt{(x_B-x_A)^2+(y_B-y_A)^2} \sqrt{(x_B-x_H)^2+(y_B-y_H)^2}} </script>

<p>Then we use the Law of Sines again, to compute $\sin \alpha$:</p>

<script type="math/tex; mode=display"> \sin \alpha = \frac{BC}{AC} \sin \beta = \frac{S_b t_C}{S_a t_C} \sin \beta = \frac{S_b}{S_a} \sin \beta </script>

<p>This only makes sense, of course, if</p>

<script type="math/tex; mode=display"> \frac{S_A}{S_R} \mid \sin \beta \mid \leq 1 </script>

<p><strong>If this is not the case we conclude that Alice will never catch the rabbit, which solves the problem.</strong></p>

<p>Finally we use the fact that the angles of a triangle sum to $\pi$ to compute $\sin \gamma$:</p>

<script type="math/tex; mode=display"> \sin \gamma = \sin (\pi - \alpha - \beta) = \sin (\alpha + \beta) = \sin \alpha \cos \beta + \cos \alpha \sin \beta </script>

<p>We reformulate using the already-copmputed $\sin \alpha$ and $\sin \beta$:</p>

<script type="math/tex; mode=display"> \sin \gamma = (\sin \alpha) \sqrt{1 - \sin^2 \beta} + (\sin \beta) \sqrt{1 - \sin^2 \alpha} </script>

<p>And… we are done, we have everything we need to compute BC and answer the problem.</p>

<h2 id="summary-and-code">Summary and code</h2>

<p>So here is the short answer to the problem:</p>

<ul>
  <li>Compute $\sin \beta$ using the formula given above.</li>
  <li>Compute $\sin \alpha = (S_b * \sin \beta)/S_a$. If $\mid \sin \alpha \mid&gt;1$, Alice cannot catch the rabbit. Otherwise, advance to step 3.</li>
  <li>Compute $\sin \gamma$ with the formula above and the values of $\sin \alpha$ and $\sin \beta$ found in steps <em>1</em> and <em>2</em>.</li>
  <li>Compute BC using the formula given above and the values found for $\sin \alpha$ and $\sin \gamma$.  If $BC&gt;BH$, the rabbit will reach its hole before Alice can catch it. Otherwise, congratulation young girl, you will eat rabbit for dinner, here are the location and time of the fastest possible interception:</li>
</ul>

<script type="math/tex; mode=display"> C = B + \frac{BC}{BH}\overrightarrow{BH} </script>

<script type="math/tex; mode=display"> t_C = BC/S_B </script>

<p>Below is a script implementing this technique using Python’s pylab module:</p>

<p>{% codeblock lang:python %}</p>

<p>from pylab import * # imports srqt, norm, array, plot…</p>

<p>def interception(A, B, H, Sa, Sb):
    “”” Returns <code>(t_C, C)</code> if A can catch B, before B 
    reaches H. Otherwise, returns <code>None</code>. “””</p>

<pre><code>sin_b = det(array((A-B,H-B))) / ( norm(A-B) * norm(H-B) )

sin_a = (Sb / Sa) * sin_b

if abs(sin_a) &gt; 1 :
    
    print "B moves too fast to be ever caught !"
    return None

else:
    
    sin_c = ( sin_a * sqrt(1 - sin_b**2)
              + sin_b * sqrt(1 - sin_a**2) )
    
    BC = norm(B-A) * (sin_a / sin_c) 
    
    if BC &gt; norm(H-A):
        
        print "B reaches H before interception by A !"
        return None
        
    else:
        
        print "A intercepted B !"
        t_C = BC / Sb
        C = B + BC * (H-B)/norm(H-B)
        return t_C,C
</code></pre>

<p>{% endcodeblock %}</p>

<p>And here it is in action:</p>

<p>{% codeblock lang:python %}</p>

<h1 id="parameters-of-the-problem">PARAMETERS OF THE PROBLEM</h1>
<p>A = array(( 1.0 , 5.0 )) # Alice’s initial position
B = array(( 4.0 , 1.0 )) # Rabbit’s initial position
H =  array(( 6.0 , 7.0 )) # Hole’s coordinates
Sa = 1.1 # Alice’s speed
Sb = 1.0 # Rabbit’s speed</p>

<h1 id="find-the-intersection">Find the intersection</h1>
<p>t,C = interception(A, B, H, Sa, Sb)</p>

<h1 id="plot-the-results">Plot the results</h1>

<p>scatter(*zip(A,B,H,C), s=100, color=’r’)</p>

<p>for label, point in zip([‘A’,’B’,’H’,’C’], [A,B,H,C]):
    annotate( label, xy = point, xytext = (-10, 10),
        textcoords = ‘offset points’, fontsize = 24)</p>

<p>annotate(“”, xy=H, xytext=B, xycoords=’data’,
         textcoords=’data’,size=20,
         arrowprops=dict(arrowstyle=”simple”,
                         connectionstyle=”arc3”))</p>

<p>annotate(“”, xy=C, xytext=A, xycoords=’data’,
         textcoords=’data’,size=20,
         arrowprops=dict(arrowstyle=”simple”,
                         connectionstyle=”arc3”))</p>

<p>title(“A intercepts B in C”, fontsize = 24)</p>

<p>show()
{% endcodeblock %}</p>

<p>{% img center /images/alice/alice_matplotlib.jpeg %}</p>
]]></content>
  </entry>
  
</feed>
