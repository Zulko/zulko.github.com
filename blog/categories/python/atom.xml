<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2015-02-10T16:11:56+01:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An algorithm to extract looping GIFs from videos]]></title>
    <link href="http://Zulko.github.io/blog/2015/02/01/extracting-perfectly-looping-gifs-from-videos-with-python-and-moviepy/"/>
    <updated>2015-02-01T15:34:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2015/02/01/extracting-perfectly-looping-gifs-from-videos-with-python-and-moviepy</id>
    <content type="html"><![CDATA[<p>Looping GIFs are a popular form of art on the Web, with two dedicated forums on Reddit (<a href="http://www.reddit.com/r/perfectloops/">r/perfectloops</a> and <a href="http://www.reddit.com/r/cinemagraphs">r/cinemagraphs</a>) and countless <a href="https://www.tumblr.com/tagged/looping-gif">Tumblr pages</a>.</p>

<p><img class="center" src="http://i.imgur.com/g9UBTNM.gif" width="400" title="By ORBO, one of my favorite GIF artists." ></p>

<p>Finding and extracting well-looping segments from a movie requires much attention and patience, and will likely leave you like this in front of your computer:</p>

<p><img class="center" src="http://i.imgur.com/sLgEFC4.gif"></p>

<p>To make things easier I wrote a Python script which automates the task. This post explains the math behind the algorithm and provides a few examples of use.</p>

<h2 id="when-is-a-video-segment-well-looping-">When is a video segment well-looping ?</h2>

<p>We will say that a video segment loops well when its first and last video frames are very similar. 
A video frame <script type="math/tex">F</script> can be represented by a sequence of <script type="math/tex">N</script> integers <script type="math/tex">(F[1], \cdots, F[N])</script> whose values indicate the colors of the image’s pixels. For instance, <script type="math/tex">F[1]</script> <script type="math/tex">F[2]</script> and <script type="math/tex">F[3]</script>  give the Red, Green, Blue values of the first pixel, <script type="math/tex">F[4]</script>, <script type="math/tex">F[5]</script>, <script type="math/tex">F[6]</script> define the color of the second pixel, etc. </p>

<p>Given two frames <script type="math/tex">F_1</script>, <script type="math/tex">F_2</script> of a same video, we define the difference between these frames as the sum of the differences between their color values:</p>

<script type="math/tex; mode=display"> d(F_1,  F_2) = \sqrt{\sum_{i=1}^N (F_1[i] -  F_2[i])^2}. </script>

<p>We will consider that the two frames are similar when <script type="math/tex">d(F_1,F_2) </script> is under some arbitrary threshold <script type="math/tex">T</script>.</p>

<p>For what follows, it is important to note that <script type="math/tex">d(F_1, F_2)</script> defines a <em>distance</em> between the frames, and can be seen as a generalization of the geometrical distance between two points in a plan:</p>

<p><img class="center" src="/images/loopsvideo/distance.png"></p>

<p>As a consequence <script type="math/tex">d(F_1,F_2)</script> has nice mathematical properties which will use in the next section to speed up computations.</p>

<h2 id="finding-well-looping-segments">Finding well-looping segments</h2>

<p>In this section we want to find the times (start and end) of all the well-looping video segments of duration 3 seconds or less in a given video. A simple way to do this is to compare each frame of the movie with all the frames in the previous three seconds. When we find two similar frames (that is, whose distance in under some pre-defined threshold <script type="math/tex">T</script>), we add their corresponding times to our list.</p>

<p>The problem is that this method requires a huge number of frame comparisons (around ten millions in a standard video) which takes hours. So let us see a few tricks to makes computations faster.</p>

<p><strong>Trick 1: use reduced versions of the frames.</strong> HD videos frames can have millions of pixels, so computing the distance between them will require millions of operations. When reduced to small (150-pixel-wide) thumbnails these frames are still detailed enough for our purpose, and their distance can be computed much faster (they also take less place in the RAM).</p>

<p><strong>Trick 2: use triangular inequalities.</strong> With this very efficient trick we will be able to deduce whether two frames match, without having to compute their distance. Since <script type="math/tex">d(F_1, F_2)</script> defines a mathematical distance between two frames, many results from classical geometry apply, and in particular the following inequalities on the lengths of a triangle:</p>

<p><img class="center" src="/images/loopsvideo/trineq1.png" width="350">
<img class="center" src="/images/loopsvideo/trineq2.png" width="320"></p>

<p>The first inequality tells us that if A is very close to B which in turn is very close to C, then A is also close to C. In terms of video frames, this becomes:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
 d(F_1, F_3) < d(F_1,  F_2) + d(F_2, F_3)  %]]&gt;</script>

<p>In practice we will use it as follows: if we already know that a frame <script type="math/tex">F_1</script> is very similar to a frame <script type="math/tex">F_2</script>, and that  <script type="math/tex">F_2</script> is very similar to another frame <script type="math/tex">F_3</script>, then we do not need to compute <script type="math/tex">d(F_1,F_3)</script> to know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are also very similar.</p>

<p>The second inequality tells us that if a point A is very far from B, and B is close to C, then A is also far from C. Or in terms of frames:</p>

<script type="math/tex; mode=display"> d(F_1, F_3) > d(F_2, F_3) - d(F_1,  F_2) </script>

<p>If <script type="math/tex">F_1</script> is very similar to <script type="math/tex">F_2</script>, and <script type="math/tex">F_2</script> is different from <script type="math/tex">F_3</script>, then we do not need to compute <script type="math/tex">d(F_1,F_3)</script> to know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are also very different.</p>

<p>Now it gets a little more complicated: we will apply these triangular inequalities to get informations on the upper and lower bounds of the distances between frames, which will be updated every time we compute a distance between two frames. For instance, after computing the distance <script type="math/tex">d(F_1, F_2)</script>, the upper and lower bounds of <script type="math/tex">d(F_1, F3)</script>, denoted <script type="math/tex">\overline{F_1F_3}</script> and <script type="math/tex">\underline{F_1F_3}</script>, can be updated as follows:</p>

<script type="math/tex; mode=display">
\mbox{Eq.1}\,
\begin{cases}
\overline{F_1F_3} \leftarrow  \min\left(\overline{F_1F_3} ,\,\,\, d(F_1,F_2) + \overline{F_2F_3}\right) \\
\underline{F_1F_3} \leftarrow  \max\left(\underline{F_1F_3},\,\,\, d(F_1,F_2) - \overline{F_2F_3},\,\,\,
\underline{F_2F_3} - d(F_1,F_2) \right)
\end{cases}
</script>

<p>If after the update we have <script type="math/tex">% &lt;![CDATA[
\overline{F_1F_3}<T %]]&gt;</script>, we conclude that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> are a good match. And if at some point <script type="math/tex">\underline{F_1F_3}>T</script>, we know that <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> don’t match. If we cannot decide whether <script type="math/tex">F_1</script> and <script type="math/tex">F_3</script> match using this technique, we will eventually need to compute explicity <script type="math/tex">d(F_1, F_3)</script>, but then knowing <script type="math/tex">d(F_1, F_3)</script> will in turn enable us to update the bounds on another distance, <script type="math/tex">d(F_1, F_4)</script>, and so on.</p>

<p>As an illustration, suppose that a video has the following frames in this order:</p>

<p><img class="center" src="/images/loopsvideo/action.png"></p>

<p>When the algorithm arrives at <script type="math/tex">F_4</script>, it first computes the distance between this frame and <script type="math/tex">F_3</script> and finds that they don’t match. At this point the algorithm has already found thaft <script type="math/tex">F_3</script> is quite similar to <script type="math/tex">F_2</script> and <script type="math/tex">F_1</script>, so it deduces that neither <script type="math/tex">F_1</script> nor <script type="math/tex">F_2</script> match with <script type="math/tex">F_4</script> (and, certainly, neither do the dozen frames before ). In practice, this method avoids computing 80% to 90% of the distances between frames.</p>

<p><strong>Trick 3: use an efficient formula for the distance.</strong> When we compute the distance between two frames using the formula from the last section, we need approximately <script type="math/tex">3N</script> operations: <script type="math/tex">N</script> subtractions, <script type="math/tex">N</script> products, and <script type="math/tex">(N-1)</script> additions to obtain the final sum. But the formula for <script type="math/tex">d(F_1, F_2)</script> can also be rewritten under this form, known as the <a href="http://en.wikipedia.org/wiki/Law_of_cosines#Vector_formulation">law of cosines</a>:</p>

<script type="math/tex; mode=display">
d(F_1,  F_2) = \sqrt{ \|F_1\|_2^2 + \| F_2\|_2^2 - 2 (F_1 \cdot  F_2) },
</script>

<p>where we used the following notations:</p>

<script type="math/tex; mode=display">
\|F\|_2^2 = \sum_{i=1}^N F[i]^2,  \,\,\,\,\,\,\, F_1 \cdot F_2 =  \sum_{i=1}^N F_1[i]F_2[i]
</script>

<p>The interesting thing with this expression of <script type="math/tex">d(F_1, F_2)</script> is that if we first compute the norm <script type="math/tex">\|F\|</script> of each frame once, we can obtain the distance between any pair of <script type="math/tex">F_1</script> and  <script type="math/tex">F_2</script> simply by computing <script type="math/tex">(F_1 \cdot  F_2)</script>, which requires only <script type="math/tex">2N</script> operations and is therefore 50% faster.</p>

<p>Another advantage of computing <script type="math/tex">\|F\|</script> for each frame is that for two frames <script type="math/tex">F_1</script> and <script type="math/tex">F_2</script> we have</p>

<script type="math/tex; mode=display">
\mbox{abs}(\|F_1\| - \|F_2\|) \leq d(F_1, F_2) \leq  \|F_1\| + \|F_2\|
</script>

<p>which provides initial values for the upper and lower bounds on the frame distances used in Trick 2:</p>

<script type="math/tex; mode=display">
\mbox{Eq.2}\,
\begin{cases}
\overline{F_1F_2} \leftarrow  \|F_1\| + \|F_2\| \\
\underline{F_1F_2} \leftarrow  \mbox{abs}(\|F_1\| - \|F_2\|).
\end{cases}
</script>

<p><strong>Final algorithm in pseudo-code.</strong> Putting everything together, we obtain the following algorithm:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>for each frame F1 in the movie:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>F1 &lt;- downsized( F1 )
</span><span class='line'>previous_frames &lt;- list of frames in the 3 seconds before F1
</span><span class='line'>
</span><span class='line'>compute and store |F1|
</span><span class='line'>
</span><span class='line'>for each frame F2 in previous_frames:
</span><span class='line'>    compute upper_F1_F2 and lower_F1_F2 using Eq.2
</span><span class='line'>    if upper_F1_F2 &lt; T:
</span><span class='line'>        mark (F1, F2) as accepted 
</span><span class='line'>    if lower_F1_F2 &gt; T:
</span><span class='line'>        mark (F1, F2) as rejected
</span><span class='line'>
</span><span class='line'>for each frame F2 in previous_frames:
</span><span class='line'>    if couple (F1,F2) isn't already accepted or rejected:
</span><span class='line'>        compute d(F1, F2)
</span><span class='line'>        for each frame F3 after F2 in previous_frames:
</span><span class='line'>            update upper_F1_F3 and lower_F1_F3 using Eq.1
</span><span class='line'>            if upper_F1_F3 &lt; T:
</span><span class='line'>                mark (F1, F3) as accepted 
</span><span class='line'>            if lower_F1_F3 &gt; T:
</span><span class='line'>                mark (F1, F3) as rejected</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Here is the <a href="https://github.com/Zulko/moviepy/blob/1ddd608ccc28cf604ada17c85e2c436dc8ab61b2/moviepy/video/tools/cuts.py#L115-L172">implementation in Python</a>. The computation time may depend on the quality of the video file, but most movies I tried were processed in circa 20 minutes. Impressive, right, Eugene ?</p>

<p><img class="center" src="http://i.imgur.com/CpJ4UbL.gif" title="I really wanted to place this GIF somewhere because I’m so proud of it. It’s not every day I get to make a pun in English. Also: Eugene is “stuck in a loop” of hair. Ah ah ah ah." ></p>

<h2 id="selecting-interesting-segments">Selecting interesting segments</h2>

<p>In the previous section we described a method to find <em>all</em> pairs of matching frames, including consecutive frames (which often look very much alike) and frames from still segments (typically, black screens). So we end up with typically a hundred thousand video segments, only a few of which are really interesting, and we must find a way to filter out all the segments we don’t want before extracting GIFs. This filtering operation takes just a few seconds but its success depends greatly on the filtering criteria you use. Here are some examples that work well:</p>

<ul>
  <li>The first and last frames must be separated by at least 0.5 second.</li>
  <li>There must be at least one frame in the sequence which doesn’t match at all with the first frame. This criterion enables to eliminate still segments.</li>
  <li>The start of the first frame must be at least 0.5 seconds after the start of the last extracted segment. This is to avoid doublons (segments which start and end almost at the same times).</li>
</ul>

<p>I try to be not too restrictive (to avoid filtering out good segments by accident) so I generally end up with about 200 GIFs, many of them them only midly interesting (blinking eyes and such). The last step is a manual filtering which looks like this:</p>

<p><img class="center" src="http://i.imgur.com/3y3OI1b.gif"></p>

<h2 id="examples-of-use">Examples of use</h2>

<p>I implemented this algorithm as a plugin of my Python video library <a href="http://zulko.github.io/moviepy/">MoviePy</a>. Here is an example script with much details:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;open-a-video-file-any-format-should-work&quot;</span><span class="o">&gt;</span><span class="n">Open</span> <span class="n">a</span> <span class="n">video</span> <span class="nb">file</span> <span class="p">(</span><span class="nb">any</span> <span class="n">format</span> <span class="n">should</span> <span class="n">work</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">myvideo</span><span class="o">.</span><span class="n">avi</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;downsize-the-clip-to-a-width-of-150px-to-speed-up-things&quot;</span><span class="o">&gt;</span><span class="n">Downsize</span> <span class="n">the</span> <span class="n">clip</span> <span class="n">to</span> <span class="n">a</span> <span class="n">width</span> <span class="n">of</span> <span class="mi">150</span><span class="n">px</span> <span class="n">to</span> <span class="n">speed</span> <span class="n">up</span> <span class="n">things</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip_small</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;find-all-the-pairs-of-matching-frames-an-return-their&quot;</span><span class="o">&gt;</span><span class="n">Find</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">pairs</span> <span class="n">of</span> <span class="n">matching</span> <span class="n">frames</span> <span class="n">an</span> <span class="k">return</span> <span class="n">their</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># corresponding start and end times. Takes 15-60 minutes.</span>
</span><span class='line'><span class="n">matches</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip_small</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;optional-save-the-matches-for-later-use&quot;</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Optional</span><span class="p">)</span> <span class="n">Save</span> <span class="n">the</span> <span class="n">matches</span> <span class="k">for</span> <span class="n">later</span> <span class="n">use</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># matches.save(“myvideo_matches.txt”)</span>
</span><span class='line'><span class="c"># matches = FramesMatches.load(“myvideo_matches.txt”)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;filter-the-scenes-keep-only-segments-with-duration-15-seconds&quot;</span><span class="o">&gt;</span><span class="n">Filter</span> <span class="n">the</span> <span class="n">scenes</span><span class="p">:</span> <span class="n">keep</span> <span class="n">only</span> <span class="n">segments</span> <span class="k">with</span> <span class="n">duration</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">1.5</span> <span class="n">seconds</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># where the first and last frame have a per-pixel distance &amp;lt; 1,</span>
</span><span class='line'><span class="c"># with at least one frame at a distance 2 of the first frame,</span>
</span><span class='line'><span class="c"># and with &amp;gt;0.5 seconds between the starts of the selected segments.</span>
</span><span class='line'><span class="n">selected_scenes</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">select_scenes</span><span class="p">(</span><span class="n">match_thr</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">min_time_span</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">nomatch_thr</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">time_distance</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;the-final-gifs-will-be-450-pixels-wide&quot;</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">final</span> <span class="n">GIFs</span> <span class="n">will</span> <span class="n">be</span> <span class="mi">450</span> <span class="n">pixels</span> <span class="n">wide</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip_medium</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">450</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;extract-all-the-selected-scenes-as-gifs-in-folder-myfolder&quot;</span><span class="o">&gt;</span><span class="n">Extract</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">selected</span> <span class="n">scenes</span> <span class="k">as</span> <span class="n">GIFs</span> <span class="ow">in</span> <span class="n">folder</span> <span class="err">“</span><span class="n">myfolder</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">selected_scenes</span><span class="o">.</span><span class="n">write_gifs</span><span class="p">(</span><span class="n">clip_medium</span><span class="p">,</span> <span class="err">“</span><span class="n">myfolder</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is what be obtain when we try it on Disney’s Snow White:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mp</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span>
</span><span class='line'><span class="n">clip</span> <span class="o">=</span> <span class="n">mp</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">snowwhite</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">scenes</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">120</span><span class="p">),</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">selected_scenes</span> <span class="o">=</span> <span class="n">scenes</span><span class="o">.</span><span class="n">select_scenes</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">selected_scenes</span><span class="o">.</span><span class="n">write_gifs</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">270</span><span class="p">),</span> <span class="err">“</span><span class="n">snow_white</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<div align="center">
<iframe class="imgur-album" width="400" height="350" frameborder="0" src="http://Zulko.github.io//imgur.com/a/nVcqQ/embed?background=f2f2f2&amp;text=1a1a1a&amp;link=4e76c9"></iframe>
</div>

<p>Some of these GIFs could be cut better, some are not really interesting (too short), and a few looping segments have been missed. I think the culprits are the parameters in the last filtering step, which could have been tuned better.</p>

<p>As another example, someone recently posted a Youtube video on <a href="http://www.reddit.com/r/perfectloops/">r/perfectloops</a> and required that it be transformed into a looping GIF. The following script does just that: it downloads the video from Youtube, finds the best times (t1,t2) to cut a looping sequence, and generates a GIF:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">import</span> <span class="n">FramesMatches</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;get-the-video-from-youtube-save-it-as-hamacmp4&quot;</span><span class="o">&gt;</span><span class="n">Get</span> <span class="n">the</span> <span class="n">video</span> <span class="kn">from</span> <span class="nn">youtube</span><span class="p">,</span> <span class="n">save</span> <span class="n">it</span> <span class="k">as</span> <span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mpy</span><span class="o">.</span><span class="n">download_webfile</span><span class="p">(</span><span class="err">“</span><span class="n">NpxD9TZIlv8</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">matches</span> <span class="o">=</span> <span class="n">FramesMatches</span><span class="o">.</span><span class="n">from_clip</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c"># loose matching</span>
</span><span class='line'><span class="c"># find the best matching pair of frames &amp;gt; 1.5s away</span>
</span><span class='line'><span class="n">best</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">time_span</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">1.5</span><span class="p">)</span><span class="o">.</span><span class="n">best</span><span class="p">()</span>
</span><span class='line'><span class="c"># Write the sequence to a GIF (with speed=30% of the original)</span>
</span><span class='line'><span class="n">final</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="n">best</span><span class="o">.</span><span class="n">t1</span><span class="p">,</span> <span class="n">best</span><span class="o">.</span><span class="n">t2</span><span class="p">)</span><span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
</span><span class='line'><span class="n">final</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">hamac</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/APJHiej.gif" title="Sea sick ?" ></p>

<p>With MoviePy you can also post-process your GIFs to add text:</p>

<div align="center"><a href="https://gist.github.com/Zulko/25ea4d949aea5dbf8925">code</a></div>
<p><img class="center" src="http://i.imgur.com/thrh1TU.gif"></p>

<p>And since you read until there, here is a more advanced trick for you:</p>

<div align="center"><a href="https://gist.github.com/Zulko/c70f1469fc0a0cff94cd">code</a></div>
<p><img class="center" src="http://i.imgur.com/gxEHfLX.gif"></p>

<h2 id="your-turn-">Your turn !</h2>

<p>The algorithm I presented here is not perfect. It works poorly with low-luminosity clips, and sometimes a slight camera movement or a moving object in the background can prevent a segment from looping. While these segments could be easily corrected by a human, they are more difficult to spot and process with an algorithm.</p>

<p>So my script didn’t completely kill the game, and making looping gifs is still an art. If you have any ideas or remarks on the algorithm, or if you tried it and found some interesting loops in a movie, I’ll be happy to hear about it ! Until then, cheers, and happy GIFing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data animations with Python and MoviePy]]></title>
    <link href="http://Zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/"/>
    <updated>2014-11-29T22:04:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy</id>
    <content type="html"><![CDATA[<p><em>Python has some great data visualization librairies, but few can render GIFs or video animations. This post shows how to use MoviePy as a generic animation plugin for any other library.</em></p>

<!-- more -->

<p><a href="http://zulko.github.io/moviepy/">MoviePy</a> lets you define custom animations with a function <code>make_frame(t)</code>, which returns the video frame corresponding to time <code>t</code> (in seconds):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">returns</span> <span class="n">an</span> <span class="n">image</span> <span class="n">of</span> <span class="n">the</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">time</span> <span class="n">t</span> <span class="err">“””</span>
</span><span class='line'>    <span class="c"># … create the frame with any library</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">frame_for_time_t</span> <span class="c"># (Height x Width x 3) Numpy array&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c"># 3-second clip&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;for-the-export-many-optionsformatsoptimizations-are-supported&quot;</span><span class="o">&gt;</span><span class="n">For</span> <span class="n">the</span> <span class="n">export</span><span class="p">,</span> <span class="n">many</span> <span class="n">options</span><span class="o">/</span><span class="n">formats</span><span class="o">/</span><span class="n">optimizations</span> <span class="n">are</span> <span class="n">supported</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as video</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as GIF (slow)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In previous posts I used this method to <a href="http://zulko.github.io/blog/2014/09/20/vector-animations-with-python/">animate vector graphics</a> (with the library Gizeh), and <a href="http://zulko.github.io/blog/2014/11/13/things-you-can-do-with-python-and-pov-ray/">ray-traced 3D scenes</a> (generated by POV-Ray). This post covers the scientific libraries Mayavi, Vispy, Matplotlib, Numpy, and Scikit-image.</p>

<h2 id="animations-with-mayavi">Animations with Mayavi</h2>

<p><a href="http://docs.enthought.com/mayavi/mayavi/auto/examples.html">Mayavi</a> is a Python module for interactive 3D data visualization with a simple interface. In this first example we animate a surface whose elevation depends on the time <code>t</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mayavi.mlab</span> <span class="kn">as</span> <span class="nn">mlab</span>
</span><span class='line'><span class="kn">import</span>  <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">duration</span><span class="o">=</span> <span class="mi">2</span> <span class="c"># duration of the animation in seconds (it will loop)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;make-a-figure-with-mayavi&quot;</span><span class="o">&gt;</span><span class="n">MAKE</span> <span class="n">A</span> <span class="n">FIGURE</span> <span class="n">WITH</span> <span class="n">MAYAVI</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fig_myv</span> <span class="o">=</span> <span class="n">mlab</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span><span class="mi">220</span><span class="p">),</span> <span class="n">bgcolor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">200</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">XX</span><span class="p">,</span> <span class="n">YY</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'><span class="n">ZZ</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">sinc</span><span class="p">(</span><span class="n">XX</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">+</span><span class="n">YY</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">XX</span><span class="o">+</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;animate-the-figure-with-moviepy-write-an-animated-gif&quot;</span><span class="o">&gt;</span><span class="n">ANIMATE</span> <span class="n">THE</span> <span class="n">FIGURE</span> <span class="n">WITH</span> <span class="n">MOVIEPY</span><span class="p">,</span> <span class="n">WRITE</span> <span class="n">AN</span> <span class="n">ANIMATED</span> <span class="n">GIF</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mlab</span><span class="o">.</span><span class="n">clf</span><span class="p">()</span> <span class="c"># clear the figure (to reset the colors)</span>
</span><span class='line'>    <span class="n">mlab</span><span class="o">.</span><span class="n">mesh</span><span class="p">(</span><span class="n">YY</span><span class="p">,</span><span class="n">XX</span><span class="p">,</span><span class="n">ZZ</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">),</span> <span class="n">figure</span><span class="o">=</span><span class="n">fig_myv</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlab</span><span class="o">.</span><span class="n">screenshot</span><span class="p">(</span><span class="n">antialiased</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">sinc</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/5QPNGH7.gif"></p>

<p>Another example with a wireframe mesh whose coordinates and view angle depend on the time :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mayavi.mlab</span> <span class="kn">as</span> <span class="nn">mlab</span>
</span><span class='line'><span class="kn">import</span>  <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration of the animation in seconds (it will loop)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;make-a-figure-with-mayavi-1&quot;</span><span class="o">&gt;</span><span class="n">MAKE</span> <span class="n">A</span> <span class="n">FIGURE</span> <span class="n">WITH</span> <span class="n">MAYAVI</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fig</span> <span class="o">=</span> <span class="n">mlab</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">),</span> <span class="n">bgcolor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">u</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">xx</span><span class="p">,</span><span class="n">yy</span><span class="p">,</span><span class="n">zz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">u</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="c"># Points</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="n">mlab</span><span class="o">.</span><span class="n">plot3d</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span><span class="n">yy</span><span class="p">,</span><span class="n">zz</span><span class="p">,</span> <span class="n">representation</span><span class="o">=</span><span class="err">”</span><span class="n">wireframe</span><span class="err">”</span><span class="p">,</span> <span class="n">tube_sides</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                <span class="n">line_width</span><span class="o">=.</span><span class="mi">5</span><span class="p">,</span> <span class="n">tube_radius</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">fig</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;animate-the-figure-with-moviepy-write-an-animated-gif-1&quot;</span><span class="o">&gt;</span><span class="n">ANIMATE</span> <span class="n">THE</span> <span class="n">FIGURE</span> <span class="n">WITH</span> <span class="n">MOVIEPY</span><span class="p">,</span> <span class="n">WRITE</span> <span class="n">AN</span> <span class="n">ANIMATED</span> <span class="n">GIF</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Generates</span> <span class="ow">and</span> <span class="n">returns</span> <span class="n">the</span> <span class="n">frame</span> <span class="k">for</span> <span class="n">time</span> <span class="n">t</span><span class="o">.</span> <span class="err">“””</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">u</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">0.2</span><span class="o">+</span><span class="mf">0.5</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">))</span>
</span><span class='line'>    <span class="n">l</span><span class="o">.</span><span class="n">mlab_source</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">)</span> <span class="c"># change y-coordinates of the mesh</span>
</span><span class='line'>    <span class="n">mlab</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="n">azimuth</span><span class="o">=</span> <span class="mi">360</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">,</span> <span class="n">distance</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span> <span class="c"># camera angle</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mlab</span><span class="o">.</span><span class="n">screenshot</span><span class="p">(</span><span class="n">antialiased</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c"># return a RGB image&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="c"># Video generation takes 10 seconds, GIF generation takes 25s</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">wireframe</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">wireframe</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/SLYGVXI.gif"></p>

<p>As Mayavi relies on the powerful ITK visualization engine it can also process complex datasets. Here is an animation derived from a <a href="http://docs.enthought.com/mayavi/mayavi/auto/example_mri.html">Mayavi example</a>:</p>

<div align="center"><a href="https://gist.github.com/Zulko/c16a7f7383590d350b70">code</a></div>
<p><img class="center" src="http://i.imgur.com/EJZELfi.gif" title="" ></p>

<h2 id="animations-with-vispy">Animations with Vispy</h2>

<p><a href="http://vispy.org/gallery.html">Vispy</a> is another interactive 3D data visualization library, based on OpenGL. As for Mayavi, we first create a figure and a mesh, that we animate with MoviePy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">vispy</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">scene</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">vispy.gloo.util</span> <span class="kn">import</span> <span class="n">_screenshot</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">canvas</span> <span class="o">=</span> <span class="n">scene</span><span class="o">.</span><span class="n">SceneCanvas</span><span class="p">(</span><span class="n">keys</span><span class="o">=</span><span class="err">’</span><span class="n">interactive</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">view</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="n">central_widget</span><span class="o">.</span><span class="n">add_view</span><span class="p">()</span>
</span><span class='line'><span class="n">view</span><span class="o">.</span><span class="n">set_camera</span><span class="p">(</span><span class="err">‘</span><span class="n">turntable</span><span class="err">’</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="err">’</span><span class="n">perspective</span><span class="err">’</span><span class="p">,</span> <span class="n">up</span><span class="o">=</span><span class="err">’</span><span class="n">z</span><span class="err">’</span><span class="p">,</span> <span class="n">distance</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                <span class="n">azimuth</span><span class="o">=</span><span class="mf">30.</span><span class="p">,</span> <span class="n">elevation</span><span class="o">=</span><span class="mf">65.</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">.</span><span class="mo">02</span><span class="p">),</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">.</span><span class="mo">02</span><span class="p">)</span>
</span><span class='line'><span class="n">X</span><span class="p">,</span><span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span><span class="n">yy</span><span class="p">)</span>
</span><span class='line'><span class="n">R</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">X</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">+</span><span class="n">Y</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">Z</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">t</span> <span class="p">:</span> <span class="mf">0.1</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">10</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">R</span><span class="o">-</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="n">surface</span> <span class="o">=</span> <span class="n">scene</span><span class="o">.</span><span class="n">visuals</span><span class="o">.</span><span class="n">SurfacePlot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">xx</span><span class="o">-</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">yy</span><span class="o">+</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span> <span class="n">Z</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">shading</span><span class="o">=</span><span class="err">’</span><span class="n">smooth</span><span class="err">’</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">view</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="n">show</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;animate-with-moviepy&quot;</span><span class="o">&gt;</span><span class="n">ANIMATE</span> <span class="n">WITH</span> <span class="n">MOVIEPY</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span><span class="o">.</span><span class="n">set_data</span><span class="p">(</span><span class="n">z</span> <span class="o">=</span> <span class="n">Z</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="c"># Update the mathematical surface</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="n">on_draw</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span> <span class="c"># Update the image on Vispy’s canvas</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_screenshot</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">canvas</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">canvas</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]))[:,:,:</span><span class="mi">3</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">350</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">sinc_vispy</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">’</span><span class="n">OptimizePlus</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/EbSjT2T.gif" width="280"></p>

<p>Here are more advanced examples (derived from the Vispy gallery) where C code snippets are embedded in the Python code to fine-tune the 3D shaders:</p>

<div align="center"><a href="https://gist.github.com/Zulko/54e5468759396c5cbbd2">code</a></div>
<p><img class="center" src="http://i.imgur.com/6PNEYB9.gif" title="" ></p>

<div align="center"><a href="https://gist.github.com/Zulko/4dcaf3e38fdc118f22a3">code</a></div>
<p><img class="center" src="http://i.imgur.com/sSCBkFd.gif" width="280" title="" ></p>

<h2 id="animations-with-matplotlib">Animations with Matplotlib</h2>

<p>The 2D/3D plotting library <a href="http://matplotlib.org/gallery.html">Matplotlib</a> already has an animation module, but I found that MoviePy produces lighter, better quality videos, while being up to two times faster (not sure why, see <a href="https://github.com/matplotlib/matplotlib/issues/3865">here</a> for more details). Here is how you animate Matplotlib with MoviePy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.io.bindings</span> <span class="kn">import</span> <span class="n">mplfig_to_npimage</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;draw-a-figure-with-matplotlib&quot;</span><span class="o">&gt;</span><span class="n">DRAW</span> <span class="n">A</span> <span class="n">FIGURE</span> <span class="n">WITH</span> <span class="n">MATPLOTLIB</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fig_mpl</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">facecolor</span><span class="o">=</span><span class="err">’</span><span class="n">white</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span> <span class="c"># the x vector</span>
</span><span class='line'><span class="n">zz</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">sinc</span><span class="p">(</span><span class="n">xx</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">xx</span><span class="o">+</span><span class="n">d</span><span class="p">)</span> <span class="c"># the (changing) z vector</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="err">“</span><span class="n">Elevation</span> <span class="ow">in</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mf">1.5</span><span class="p">,</span><span class="mf">2.5</span><span class="p">)</span>
</span><span class='line'><span class="n">line</span><span class="p">,</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">zz</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">lw</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;animate-with-moviepy-update-the-curve-for-each-t-make-a-gif&quot;</span><span class="o">&gt;</span><span class="n">ANIMATE</span> <span class="n">WITH</span> <span class="n">MOVIEPY</span> <span class="p">(</span><span class="n">UPDATE</span> <span class="n">THE</span> <span class="n">CURVE</span> <span class="n">FOR</span> <span class="n">EACH</span> <span class="n">t</span><span class="p">)</span><span class="o">.</span> <span class="n">MAKE</span> <span class="n">A</span> <span class="n">GIF</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame_mpl</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">line</span><span class="o">.</span><span class="n">set_ydata</span><span class="p">(</span> <span class="n">zz</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">))</span>  <span class="c"># &amp;lt;= Update the curve</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mplfig_to_npimage</span><span class="p">(</span><span class="n">fig_mpl</span><span class="p">)</span> <span class="c"># RGB image of the figure&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span><span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame_mpl</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">sinc_mpl</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/6VoT16d.gif"></p>

<p>Matplotlib has many beautiful themes and works well with numerical modules like Pandas or Scikit-Learn. Let us watch a SVM classifier getting a better understanding of the map as the number of training point increases.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span> <span class="c"># sklearn = scikit-learn</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">make_moons</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.io.bindings</span> <span class="kn">import</span> <span class="n">mplfig_to_npimage</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">make_moons</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c"># semi-random data&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">facecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">fig</span><span class="o">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">bottom</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">500</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">500</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ax</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="err">‘</span><span class="n">off</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="err">“</span><span class="n">SVC</span> <span class="n">classification</span><span class="err">”</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">svm</span><span class="o">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">gamma</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c"># the varying weights make the points appear one after the other</span>
</span><span class='line'><span class="n">weights</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">minimum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">**</span><span class="mi">2</span><span class="o">+</span><span class="mi">10</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">50</span><span class="p">)))</span>
</span><span class='line'><span class="n">classifier</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">sample_weight</span><span class="o">=</span><span class="n">weights</span><span class="p">)</span>
</span><span class='line'><span class="n">Z</span> <span class="o">=</span> <span class="n">classifier</span><span class="o">.</span><span class="n">decision_function</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">c_</span><span class="p">[</span><span class="n">xx</span><span class="o">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="n">yy</span><span class="o">.</span><span class="n">ravel</span><span class="p">()])</span>
</span><span class='line'><span class="n">Z</span> <span class="o">=</span> <span class="n">Z</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">xx</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">contourf</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">bone</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span>
</span><span class='line'>            <span class="n">vmin</span><span class="o">=-</span><span class="mf">2.5</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">2.5</span><span class="p">,</span> <span class="n">levels</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">20</span><span class="p">))</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">Y</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="o">*</span><span class="n">weights</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">bone</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">mplfig_to_npimage</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span> <span class="o">=</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">svm</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/LuXmWar.gif"></p>

<p>Put simply, the background colors tell us where the classifier thinks the black points and white points belong. At the begining it has no real clue, but as more points appear it progressively understands that they are distributed along moon-shaped regions.</p>

<h2 id="animations-with-numpy">Animations with Numpy</h2>

<p>If you are working with Numpy arrays (<a href="http://www.numpy.org/">Numpy</a> is the central numerical library in Python), you don’t need any external plotting library, you can feed the arrays directly to MoviePy.</p>

<p>This is well illustrated by this simulation of a zombie outbreak in France (inspired by <a href="http://maxberggren.github.io/2014/11/27/model-of-a-zombie-outbreak/">this blog post</a> by Max Berggren). France is modelled as a grid (Numpy array) on which all the computations for dispersion and infection are done. At regular intervals, a few Numpy operations tranform the grid into a valid RGB image, and send it to MoviePy.</p>

<div align="center"><a href="https://gist.github.com/Zulko/6aa898d22e74aa9dafc3">code</a></div>
<p><img class="center" src="http://i.imgur.com/BsgBP4g.gif"></p>

<h2 id="putting-animations-together">Putting animations together</h2>

<p>What is better than an animation ? Two animations ! You can take advantage of MoviePy’s video composition capabilities to mix animations from different libraries:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="c"># We use the GIFs generated earlier to avoid recomputing the animations.</span>
</span><span class='line'><span class="n">clip_mayavi</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">sinc</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">clip_mpl</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">sinc_mpl</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="n">clip_mayavi</span><span class="o">.</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">clips_array</span><span class="p">([[</span><span class="n">clip_mpl</span><span class="p">,</span> <span class="n">clip_mayavi</span><span class="p">]])</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">sinc_plot</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/AHL6Aa8.gif"></p>

<p>Or for something more artistic:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Make the white color transparent in clip_mayavi</span>
</span><span class='line'><span class="n">clip_mayavi2</span> <span class="o">=</span> <span class="p">(</span><span class="n">clip_mayavi</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span> <span class="n">mpy</span><span class="o">.</span><span class="n">vfx</span><span class="o">.</span><span class="n">mask_color</span><span class="p">,</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">])</span>
</span><span class='line'>                <span class="o">.</span><span class="n">set_opacity</span><span class="p">(</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span> <span class="c"># whole clip is semi-transparent</span>
</span><span class='line'>                <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mf">0.85</span><span class="o">*</span><span class="n">clip_mpl</span><span class="o">.</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'>                <span class="o">.</span><span class="n">set_pos</span><span class="p">(</span><span class="err">‘</span><span class="n">center</span><span class="err">’</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">animation</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">clip_mpl</span><span class="p">,</span> <span class="n">clip_mayavi2</span><span class="p">])</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">sinc_plot2</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/ImVN4PR.gif"></p>

<p>It may be a tad too flashy, but sometimes you must give your audience something they can tweet.</p>

<p>You can also annotate the animations, which is useful when comparing different filters or algorithms. Let’s display four image transformations from the library <a href="http://scikit-image.org/">Scikit-image</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.exposure</span> <span class="kn">as</span> <span class="nn">ske</span> <span class="c"># rescaling, histogram eq.</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.filter</span> <span class="kn">as</span> <span class="nn">skf</span> <span class="c"># gaussian blur&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">sinc</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">gray</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span><span class="n">mpy</span><span class="o">.</span><span class="n">vfx</span><span class="o">.</span><span class="n">blackwhite</span><span class="p">)</span><span class="o">.</span><span class="n">to_mask</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">apply_effect</span><span class="p">(</span><span class="n">effect</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Returns</span> <span class="n">a</span> <span class="n">clip</span> <span class="k">with</span> <span class="n">the</span> <span class="n">effect</span> <span class="n">applied</span> <span class="ow">and</span> <span class="n">a</span> <span class="n">title</span><span class="err">”””</span>
</span><span class='line'>    <span class="n">filtr</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">im</span><span class="p">:</span> <span class="n">effect</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_clip</span> <span class="o">=</span> <span class="n">gray</span><span class="o">.</span><span class="n">fl_image</span><span class="p">(</span><span class="n">filtr</span><span class="p">)</span><span class="o">.</span><span class="n">to_RGB</span><span class="p">()</span>
</span><span class='line'>    <span class="n">txt</span> <span class="o">=</span> <span class="p">(</span><span class="n">mpy</span><span class="o">.</span><span class="n">TextClip</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="err">”</span><span class="n">Purisa</span><span class="o">-</span><span class="n">Bold</span><span class="err">”</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>           <span class="o">.</span><span class="n">set_position</span><span class="p">((</span><span class="err">“</span><span class="n">center</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">top</span><span class="err">”</span><span class="p">))</span>
</span><span class='line'>           <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">duration</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mpy</span><span class="o">.</span><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">new_clip</span><span class="p">,</span><span class="n">txt</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;apply-4-different-effects-to-the-original-animation&quot;</span><span class="o">&gt;</span><span class="n">Apply</span> <span class="mi">4</span> <span class="n">different</span> <span class="n">effects</span> <span class="n">to</span> <span class="n">the</span> <span class="n">original</span> <span class="n">animation</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">equalized</span> <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">equalize_hist</span><span class="p">,</span> <span class="err">“</span><span class="n">Equalized</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">rescaled</span>  <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">rescale_intensity</span><span class="p">,</span> <span class="err">“</span><span class="n">Rescaled</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">adjusted</span>  <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">adjust_log</span><span class="p">,</span> <span class="err">“</span><span class="n">Adjusted</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">blurred</span>   <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">skf</span><span class="o">.</span><span class="n">gaussian_filter</span><span class="p">,</span> <span class="err">“</span><span class="n">Blurred</span><span class="err">”</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;put-the-clips-together-on-a-2x2-grid-and-write-to-a-file&quot;</span><span class="o">&gt;</span><span class="n">Put</span> <span class="n">the</span> <span class="n">clips</span> <span class="n">together</span> <span class="n">on</span> <span class="n">a</span> <span class="mi">2</span><span class="n">x2</span> <span class="n">grid</span><span class="p">,</span> <span class="ow">and</span> <span class="n">write</span> <span class="n">to</span> <span class="n">a</span> <span class="nb">file</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">finalclip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">clips_array</span><span class="p">([[</span> <span class="n">equalized</span><span class="p">,</span> <span class="n">adjusted</span> <span class="p">],</span>
</span><span class='line'>                             <span class="p">[</span> <span class="n">blurred</span><span class="p">,</span>   <span class="n">rescaled</span> <span class="p">]])</span>
</span><span class='line'><span class="n">final_clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">test2x2</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/cMoPY1d.gif"></p>

<p>If we replace <code>CompositeVideoClip</code> and <code>clips_array</code> by <code>concatenate_videoclips</code> we get a title-effect type animation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.exposure</span> <span class="kn">as</span> <span class="nn">ske</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.filter</span> <span class="kn">as</span> <span class="nn">skf</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">sinc</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">gray</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span><span class="n">mpy</span><span class="o">.</span><span class="n">vfx</span><span class="o">.</span><span class="n">blackwhite</span><span class="p">)</span><span class="o">.</span><span class="n">to_mask</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">apply_effect</span><span class="p">(</span><span class="n">effect</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Returns</span> <span class="n">a</span> <span class="n">clip</span> <span class="k">with</span> <span class="n">the</span> <span class="n">effect</span> <span class="n">applied</span> <span class="ow">and</span> <span class="n">a</span> <span class="n">top</span> <span class="n">label</span><span class="err">”””</span>
</span><span class='line'>    <span class="n">filtr</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">im</span><span class="p">:</span> <span class="n">effect</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_clip</span> <span class="o">=</span> <span class="n">gray</span><span class="o">.</span><span class="n">fl_image</span><span class="p">(</span><span class="n">filtr</span><span class="p">)</span><span class="o">.</span><span class="n">to_RGB</span><span class="p">()</span>
</span><span class='line'>    <span class="n">txt</span> <span class="o">=</span> <span class="p">(</span><span class="n">mpy</span><span class="o">.</span><span class="n">TextClip</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="err">”</span><span class="n">Amiri</span><span class="o">-</span><span class="n">Bold</span><span class="err">”</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">bg_color</span><span class="o">=</span><span class="err">’</span><span class="n">white</span><span class="err">’</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">new_clip</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>           <span class="o">.</span><span class="n">set_position</span><span class="p">((</span><span class="err">“</span><span class="n">center</span><span class="err">”</span><span class="p">))</span>
</span><span class='line'>           <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mpy</span><span class="o">.</span><span class="n">concatenate_videoclips</span><span class="p">([</span><span class="n">txt</span><span class="p">,</span> <span class="n">new_clip</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">equalized</span> <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">equalize_hist</span><span class="p">,</span> <span class="err">“</span><span class="n">Equalized</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">rescaled</span>  <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">rescale_intensity</span><span class="p">,</span> <span class="err">“</span><span class="n">Rescaled</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">adjusted</span>  <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">ske</span><span class="o">.</span><span class="n">adjust_log</span><span class="p">,</span> <span class="err">“</span><span class="n">Adjusted</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">blurred</span>   <span class="o">=</span> <span class="n">apply_effect</span><span class="p">(</span><span class="n">skf</span><span class="o">.</span><span class="n">gaussian_filter</span><span class="p">,</span> <span class="err">“</span><span class="n">Blurred</span><span class="err">”</span><span class="p">,</span> <span class="n">sigma</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clips</span> <span class="o">=</span> <span class="p">[</span><span class="n">equalized</span><span class="p">,</span> <span class="n">adjusted</span><span class="p">,</span> <span class="n">blurred</span><span class="p">,</span> <span class="n">rescaled</span><span class="p">]</span>
</span><span class='line'><span class="n">animation</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">concatenate_videoclips</span><span class="p">(</span><span class="n">clips</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">sinc_cat</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/lKJdXhe.gif"></p>

<p>Finally, MoviePy will be particularly practical when dealing with video data, as it is its first job. For our last example we estimate the size of a growing bacterial population by thresholding the video frames and counting the white pixels. The third panel shows that the population size grows exponentially in time.</p>

<div align="center"><a href="https://gist.github.com/Zulko/633c1b0807b37aa52d9c">code</a></div>
<p><img class="center" src="http://i.imgur.com/uoITKiA.gif"></p>

<h2 id="one-library-to-animate-them-all-">One library to animate them all ?</h2>

<p>I hope to have given you enough recipes to impress your colleagues at your next presentation. Any other library could be animated with MoviePy, as long as its output can be converted to a Numpy array. </p>

<p>Some libraries have their own animation modules, but these are usually a pain to fix and maintain. Thanks to the many users who have tested it in very different contexts, MoviePy seems to have become stable (or people stopped reporting bugs), and can be adapted to many situations. There is still a lot to do, but it would be nice if authors started relying on it for video and GIF rendering, like Pandas and Scikit-Learn rely on Matplotlib for plotting.</p>

<p>For completeness, and because it may better fit your needs, I must mention <a href="http://imageio.github.io/">ImageIO</a>, another Python library with video writing capabilities which focuses on providing a very simple interface to read or write any kind of image, video or volumetric data. For instance you use <code>imwrite()</code> to write any image, <code>mimwrite()</code> for any video/GIF, <code>volwrite()</code> for volumetric data, or simply <code>write()</code> for streamed data.</p>

<p>Cheers, and happy GIFing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things you can do with Python and POV-Ray]]></title>
    <link href="http://Zulko.github.io/blog/2014/11/13/things-you-can-do-with-python-and-pov-ray/"/>
    <updated>2014-11-13T17:05:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/11/13/things-you-can-do-with-python-and-pov-ray</id>
    <content type="html"><![CDATA[<p><em>This post presents Vapory, a library I wrote to bring POV-Ray’s 3D rendering capabilities to Python.</em></p>

<!-- more -->

<p>POV-ray is a popular 3D rendering software which produces photo-realistic scenes like this one:</p>

<p><img class="center" src="http://hof.povray.org/images/glasses.jpg" width="450"></p>

<p>It may not be as good as Cinema4D or Pixar’s RenderMan, but POV-Ray is free, open-source, and cross-platform. Rendering is launched from the terminal with <code>povray myscene.pov</code>, where <code>myscene.pov</code> contains the description of a 3D scene:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* LET’S DRAW A PURPLE SPHERE ! */
</span><span class='line'>camera { location &lt;0, 2, -3&gt; look_at &lt;0, 1, 2&gt;  }
</span><span class='line'>light_source { &lt;2, 4, -3&gt; color &lt;1, 1, 1&gt; }
</span><span class='line'>sphere { &lt;0, 1, 2&gt;, 2 texture{ pigment{ color &lt;1, 0, 1&gt; } } }</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="/images/povray/purple_sphere.png"></p>

<p>While POV-Ray has a very nice and sophisticated scene description language, I wanted to use it together with libraries from the Python world, so I wrote <a href="https://github.com/Zulko/vapory">Vapory</a>, a library to render POV-Ray scenes directly from Python, like this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># LET’S DRAW A PURPLE SPHERE !</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">vapory</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">camera</span> <span class="o">=</span> <span class="n">Camera</span><span class="p">(</span> <span class="err">‘</span><span class="n">location</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="err">‘</span><span class="n">look_at</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="n">light</span> <span class="o">=</span> <span class="n">LightSource</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="n">sphere</span> <span class="o">=</span> <span class="n">Sphere</span><span class="p">(</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Texture</span><span class="p">(</span> <span class="n">Pigment</span><span class="p">(</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">)))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="p">(</span> <span class="n">camera</span><span class="p">,</span> <span class="n">objects</span><span class="o">=</span> <span class="p">[</span><span class="n">light</span><span class="p">,</span> <span class="n">sphere</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="n">scene</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="err">“</span><span class="n">purple_sphere</span><span class="o">.</span><span class="n">png</span><span class="err">”</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">300</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This script simply generates a <code>scene.pov</code> file (hat tip <a href="http://code.activestate.com/recipes/205451-povray-for-python/">this script</a> by Simon Burton) and then sends the file to POV-Ray for rendering. Vapory can also pipe the resulting image back to Python, and has a few additional features to make it easy to use in an IPython Notebook.</p>

<h2 id="example-1-basic-animation-with-post-processing">Example 1: Basic animation with post-processing</h2>

<p>We first create a scene where the positions of the objects depend on the time :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">vapory</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">col</span><span class="p">:</span> <span class="n">Texture</span><span class="p">(</span> <span class="n">Pigment</span><span class="p">(</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">scene</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Returns</span> <span class="n">the</span> <span class="n">scene</span> <span class="n">at</span> <span class="n">time</span> <span class="err">‘</span><span class="n">t</span><span class="err">’</span> <span class="p">(</span><span class="ow">in</span> <span class="n">seconds</span><span class="p">)</span> <span class="err">“””</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Scene</span><span class="p">(</span> <span class="n">Camera</span><span class="p">(</span> <span class="err">‘</span><span class="n">location</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="err">‘</span><span class="n">look_at</span><span class="err">’</span><span class="p">,</span>  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">),</span>
</span><span class='line'>            <span class="p">[</span> <span class="n">LightSource</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">],</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mf">1.5</span><span class="p">,</span><span class="mf">1.5</span><span class="p">]</span> <span class="p">),</span>
</span><span class='line'>              <span class="n">Background</span><span class="p">(</span> <span class="err">“</span><span class="n">color</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="p">),</span>
</span><span class='line'>              <span class="n">Sphere</span><span class="p">(</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">,</span> <span class="mi">2</span><span class="p">,</span>   <span class="n">color</span><span class="p">([</span><span class="o">.</span><span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">.</span><span class="mi">2</span><span class="p">])),</span>
</span><span class='line'>              <span class="n">Box</span><span class="p">(</span> <span class="p">[</span><span class="o">-.</span><span class="mi">8</span> <span class="o">+</span> <span class="o">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">t</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.5</span><span class="p">,</span> <span class="o">-.</span><span class="mi">5</span><span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="o">-.</span><span class="mi">75</span><span class="o">+.</span><span class="mi">5</span><span class="o">*</span><span class="n">t</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="c"># &amp;lt;= t</span>
</span><span class='line'>                    <span class="n">color</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">.</span><span class="mi">6</span><span class="p">,</span><span class="o">.</span><span class="mi">5</span><span class="p">]),</span> <span class="err">‘</span><span class="n">rotate</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="p">),</span>
</span><span class='line'>              <span class="n">Sphere</span><span class="p">(</span> <span class="p">[</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">t</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">]</span> <span class="p">,</span> <span class="o">.</span><span class="mi">75</span><span class="p">,</span>  <span class="n">color</span><span class="p">([</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="o">.</span><span class="mi">9</span><span class="p">]))])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we animate this scene with <a href="http://zulko.github.io/moviepy/">MoviePy</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">scene</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">width</span> <span class="o">=</span> <span class="mi">300</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">antialiasing</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">anim</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/IixYOsI.gif"></p>

<p>Note that one can also make basic animations directly with POV-Ray. But since we use Python we can use its image processing libraries for post-processing. As an example, let us use Scikit-image’s sobel filter to obtain a nice geometry animation</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">skimage.filter</span> <span class="kn">import</span> <span class="n">sobel</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># We will use “quality=1” so that shadows won’t be rendered,</span>
</span><span class='line'>    <span class="c"># and double the rendering resolution to avoid pixelization.</span>
</span><span class='line'>    <span class="n">im</span><span class="o">=</span> <span class="n">scene</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">width</span> <span class="o">=</span> <span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">antialiasing</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sobelized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">sobel</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">im</span><span class="p">[:,:,</span><span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">dstack</span><span class="p">(</span><span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">255</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sobelized</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">)])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">anim_sobel</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/U7L9O1m.gif"></p>

<p>The contours look pretty nice because POV-Ray uses exact formulas to render geometrical objects (contrary to libraries like ITK or OpenGL, which rely on triangular meshes). With a few more lines we can mix the two animations to create a cel-shading effect:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span>
</span><span class='line'><span class="n">normal</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">anim</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span> <span class="c"># The first animation</span>
</span><span class='line'><span class="n">sobelized</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">anim_sobel</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span> <span class="c"># The second animation</span>
</span><span class='line'><span class="c"># We take the frame-by-frame minimum of the two animations</span>
</span><span class='line'><span class="n">cel_shade</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">gf</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">minimum</span><span class="p">(</span><span class="n">gf</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">sobelized</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</span><span class='line'><span class="n">normal</span><span class="o">.</span><span class="n">fl</span><span class="p">(</span><span class="n">cel_shade</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">cel_shaded</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="http://i.imgur.com/FwKXr8X.gif"></p>

<h2 id="example-2-embedding-a-video-in-a-3d-scene">Example 2: Embedding a video in a 3D scene</h2>

<p>Since we are playing around with MoviePy, let’s embed an actual movie in a 3D scene:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/M9R21SquDSk "></iframe></div></p>

<p>We start with a basic scene:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">vapory</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">light</span> <span class="o">=</span> <span class="n">LightSource</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">],</span> <span class="p">[</span><span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">])</span>
</span><span class='line'><span class="n">wall</span> <span class="o">=</span> <span class="n">Plane</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">20</span><span class="p">,</span> <span class="n">Texture</span><span class="p">(</span><span class="n">Pigment</span><span class="p">(</span><span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="n">ground</span> <span class="o">=</span> <span class="n">Plane</span><span class="p">(</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Texture</span><span class="p">(</span> <span class="n">Pigment</span><span class="p">(</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>                         <span class="n">Finish</span><span class="p">(</span> <span class="err">‘</span><span class="n">phong</span><span class="err">’</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span>
</span><span class='line'>                                 <span class="err">‘</span><span class="n">reflection</span><span class="err">’</span><span class="p">,</span><span class="mf">0.4</span><span class="p">,</span>
</span><span class='line'>                                 <span class="err">‘</span><span class="n">metallic</span><span class="err">’</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)))</span>
</span><span class='line'><span class="n">sphere1</span> <span class="o">=</span> <span class="n">Sphere</span><span class="p">([</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="mf">2.0</span><span class="p">,</span> <span class="n">Pigment</span><span class="p">(</span><span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>                                           <span class="n">Finish</span><span class="p">(</span><span class="err">‘</span><span class="n">phong</span><span class="err">’</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="err">‘</span><span class="n">reflection</span><span class="err">’</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'><span class="n">sphere2</span> <span class="o">=</span><span class="n">Sphere</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">Texture</span><span class="p">(</span><span class="err">‘</span><span class="n">T_Ruby_Glass</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">Interior</span><span class="p">(</span><span class="err">‘</span><span class="n">ior</span><span class="err">’</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="p">(</span> <span class="n">Camera</span><span class="p">(</span><span class="err">“</span><span class="n">location</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span> <span class="err">“</span><span class="n">look_at</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>               <span class="n">objects</span> <span class="o">=</span> <span class="p">[</span> <span class="n">ground</span><span class="p">,</span> <span class="n">wall</span><span class="p">,</span> <span class="n">sphere1</span><span class="p">,</span> <span class="n">sphere2</span><span class="p">,</span> <span class="n">light</span><span class="p">],</span>
</span><span class='line'>               <span class="n">included</span><span class="o">=</span><span class="p">[</span><span class="err">“</span><span class="n">glass</span><span class="o">.</span><span class="n">inc</span><span class="err">”</span><span class="p">]</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img class="center" src="/images/povray/scene_home_theater.png" width="400"></p>

<p>To this scene we will add a flat box (our <em>theater screen</em>), and for each frame of the movie we will make a PNG image file that will be used by POV-Ray as the texture of our flat box.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.video.io.ffmpeg_writer</span> <span class="kn">import</span> <span class="n">ffmpeg_write_image</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">embed_in_scene</span><span class="p">(</span><span class="n">image</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ffmpeg_write_image</span><span class="p">(</span><span class="s">&quot;__temp__.png&quot;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="n">image_ratio</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">*</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">screen</span> <span class="o">=</span> <span class="n">Box</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">Texture</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Pigment</span><span class="p">(</span> <span class="n">ImageMap</span><span class="p">(</span><span class="s">&#39;png&#39;</span><span class="p">,</span> <span class="s">&#39;&quot;__temp__.png&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;once&#39;</span><span class="p">)),</span>
</span><span class='line'>                <span class="n">Finish</span><span class="p">(</span><span class="s">&#39;ambient&#39;</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">)</span> <span class="p">),</span>
</span><span class='line'>             <span class="s">&#39;scale&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="o">/</span><span class="n">image_ratio</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;rotate&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;translate&#39;</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="n">new_scene</span> <span class="o">=</span> <span class="n">scene</span><span class="o">.</span><span class="n">add_objects</span><span class="p">([</span><span class="n">screen</span><span class="p">])</span>
</span><span class='line'><span class="k">return</span> <span class="n">new_scene</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">480</span><span class="p">,</span> <span class="n">antialiasing</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">bunny</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span> <span class="c"># File containing the original video</span>
</span><span class='line'>        <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="mi">47</span><span class="p">)</span> <span class="c"># cut between t=23 and 47 seconds</span>
</span><span class='line'>        <span class="o">.</span><span class="n">fl_image</span><span class="p">(</span><span class="n">embed_in_scene</span><span class="p">)</span>  <span class="c"># &amp;lt;= The magic happens</span>
</span><span class='line'>        <span class="o">.</span><span class="n">fadein</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">fadeout</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">audio_fadein</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">audio_fadeout</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">bunny2</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span><span class="n">bitrate</span><span class="o">=</span><span class="err">’</span><span class="mi">8000</span><span class="n">k</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This 25-seconds clip takes 150 minutes to generate (!!!) which may be due to the good resolution settings, numerous light reflexions in the balls and the ground, and the complex texture of the screen.</p>

<h2 id="example-3-a-more-complex-scene">Example 3: A more complex scene</h2>

<p>In this exemple we write “VAPORY” using 240 bricks:</p>

<p><img class="center" src="/images/povray/vapory.jpeg" width="600"></p>

<p>First, we generate an image of the white-on-black text “VAPORY”. Many libraries can do that, here we use ImageMagick through MoviePy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">TextClip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">txtclip</span> <span class="o">=</span> <span class="n">TextClip</span><span class="p">(</span><span class="err">“</span><span class="n">VAPORY</span><span class="err">”</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="err">”</span><span class="mi">8</span><span class="n">BIT</span><span class="o">-</span><span class="n">WONDER</span><span class="o">-</span><span class="n">Nominal</span><span class="err">”</span><span class="p">,</span> <span class="n">kerning</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">fontsize</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">bg_color</span><span class="o">=</span><span class="err">’</span><span class="n">black</span><span class="err">’</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="err">’</span><span class="n">white</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="n">txt_image</span> <span class="o">=</span> <span class="n">txtclip</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Here is the result:
<img class="center" src="/images/povray/vapory_white_black.png"></p>

<p>We then get the coordinates of the non-black pixels is this image, and use them to place the bricks in the 3D scene, with small random variations around the depth-axis:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">vapory</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;compmute-the-coordinates-of-the-241-bricks&quot;</span><span class="o">&gt;</span><span class="n">Compmute</span> <span class="n">the</span> <span class="n">coordinates</span> <span class="n">of</span> <span class="n">the</span> <span class="mi">241</span> <span class="n">bricks</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xx</span><span class="p">,</span><span class="n">yy</span> <span class="o">=</span> <span class="n">txt_image</span><span class="p">[:,:,</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">nonzero</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># the non-black pixels</span>
</span><span class='line'><span class="n">bricks_x</span> <span class="o">=</span> <span class="n">xx</span> <span class="o">-</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="p">(</span><span class="n">xx</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">+</span> <span class="n">xx</span><span class="o">.</span><span class="n">min</span><span class="p">())</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="n">bricks_y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">yy</span><span class="p">)</span>  <span class="o">-</span> <span class="n">yy</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="n">bricks_z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.08</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">xx</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;generate--render-the-scene&quot;</span><span class="o">&gt;</span><span class="n">Generate</span> <span class="o">/</span> <span class="n">render</span> <span class="n">the</span> <span class="n">scene</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">bricks</span> <span class="o">=</span> <span class="p">[</span><span class="n">Box</span><span class="p">([</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">],</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">z</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">Texture</span><span class="p">(</span><span class="err">“</span><span class="n">Sandalwood</span><span class="err">”</span><span class="p">))</span> <span class="c"># The bricks</span>
</span><span class='line'>         <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">bricks_xx</span><span class="p">,</span> <span class="n">bricks_yy</span><span class="p">,</span> <span class="n">bricks_zz</span><span class="p">)]</span>
</span><span class='line'><span class="n">light</span> <span class="o">=</span> <span class="n">LightSource</span><span class="p">([</span><span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="o">-</span><span class="mi">50</span><span class="p">],</span> <span class="err">‘</span><span class="n">color</span><span class="err">’</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">camera</span> <span class="o">=</span> <span class="n">Camera</span><span class="p">(</span> <span class="err">‘</span><span class="n">location</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">17</span><span class="p">],</span> <span class="err">‘</span><span class="n">look_at</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="p">(</span><span class="n">camera</span><span class="p">,</span> <span class="p">[</span><span class="n">light</span><span class="p">,</span> <span class="n">Background</span><span class="p">(</span><span class="err">“</span><span class="n">White</span><span class="err">”</span><span class="p">)]</span><span class="o">+</span> <span class="n">boxes</span><span class="p">,</span>
</span><span class='line'>              <span class="n">included</span><span class="o">=</span><span class="p">[</span><span class="err">“</span><span class="n">colors</span><span class="o">.</span><span class="n">inc</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">textures</span><span class="o">.</span><span class="n">inc</span><span class="err">”</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scene</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="err">“</span><span class="n">vapory</span><span class="o">.</span><span class="n">png</span><span class="err">”</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">240</span><span class="p">,</span> <span class="n">antialiasing</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-4-rendering-a-physics-simulation">Example 4: Rendering a Physics simulation</h2>

<p><img class="center" src="http://i.imgur.com/TdhxwGz.gif"></p>

<p>Python as many nice scientific and engineering libraries that could benefit from a photorealistic rendering engine. Here I simulated the cube trajectories with PyODE (a Python binding of the physics engine ODE), and fed the results to Vapory and MoviePy for rendering and animation, all in <a href="https://gist.github.com/Zulko/f828b38421dfbee59daf">a hundred lines</a>.</p>

<h2 id="example-5-the-ghost-of-jlawrence-cook">Example 5: The ghost of J.Lawrence Cook</h2>

<p>In a <a href="http://zulko.github.io/blog/2014/02/12/transcribing-piano-rolls/">previous post</a> I talked about how piano rolls can be scanned and turned into MIDI files (which are some sort of electronic sheet music). Here is a 1997 student project where they used such a MIDI file to animate a 3D piano programatically:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/lVXmtckavDQ "></iframe></div></p>

<p>Python has now all the libraries for such a project: we can parse the MIDI file with the package <a href="http://mido.readthedocs.org/en/latest/">mido</a>, and render the piano keyboard with Vapory. We can convert the MIDI file to an MP3 audio file by calling FluidSynth externally and finally use MoviePy to animate everything and incorporate the audio.</p>

<p>Here is <em>Let’s Fall in Love</em>, from a 1933 piano roll arranged by J. Lawrence Cook, and animated with just <a href="https://gist.github.com/Zulko/b910c8b22e8e1c01fae6">~100 lines of code</a>:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/tCqQhmuwgMg "></iframe></div></p>

<h2 id="final-words">Final words</h2>

<p>I hope to have shown that Python and POV-Ray can do nice things together, all easy-peasy with Vapory. On the longer term, it would be nice if more recent softwares like Blender (which has a huge user community and modern features like GPU acceleration) had proper Python bindings. But apparently <a href="https://developer.blender.org/T22328">this will never happen</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vector animations with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/09/20/vector-animations-with-python/"/>
    <updated>2014-09-20T16:48:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/09/20/vector-animations-with-python</id>
    <content type="html"><![CDATA[<!-- more -->

<p>I am a big fan of <a href="https://dribbble.com/beesandbombs">Dave Whyte</a>’s vector animations, like this one:</p>

<p><img class="center" src="https://d13yacurqjgara.cloudfront.net/users/583436/screenshots/1692659/spiral.gif" width="400"></p>

<p>It was generated using a special animation language called <a href="http://www.processing.org/">Processing</a> (here is <a href="https://dribbble.com/shots/1692659-Shell-Spiral/attachments/268926">Dave’s code</a>). While it seems powerful, Processing it is not very elegant in my opinion ; this post shows how to do similar animations using two Python libraries, <a href="https://github.com/Zulko/gizeh">Gizeh</a> (for the graphics) and <a href="http://zulko.github.io/moviepy">MoviePy</a> (for the animations).</p>

<h2 id="gizeh-and-moviepy">Gizeh and Moviepy</h2>

<p>Gizeh is a Python library I wrote on top of <code>cairocffi</code> ( a binding of the popular Cairo library) to make it more intuitive. To make a picture with Gizeh you create a <em>surface</em>, draw on it, and export it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">320</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">260</span><span class="p">)</span> <span class="c"># dimensions in pixel</span>
</span><span class='line'><span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span> <span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="c"># radius, in pixels</span>
</span><span class='line'>                       <span class="n">xy</span><span class="o">=</span> <span class="p">[</span><span class="mi">156</span><span class="p">,</span> <span class="mi">200</span><span class="p">],</span> <span class="c"># coordinates of the center</span>
</span><span class='line'>                       <span class="n">fill</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="c"># ‘red’ in RGB coordinates</span>
</span><span class='line'><span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span> <span class="n">surface</span> <span class="p">)</span> <span class="c"># draw the circle on the surface</span>
</span><span class='line'><span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span> <span class="c"># export as a numpy array (we will use that)</span>
</span><span class='line'><span class="n">surface</span><span class="o">.</span><span class="n">write_to_png</span><span class="p">(</span><span class="err">“</span><span class="n">my_drawing</span><span class="o">.</span><span class="n">png</span><span class="err">”</span><span class="p">)</span> <span class="c"># export as a PNG</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We obtain this magnificent Japanese flag:
<img class="center" src="/images/vector_animations/my_drawing.png"></p>

<p>To make an animation with MoviePy, you write a function <code>make_frame</code> which, given some time <code>t</code>, returns the video frame at time <code>t</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">numpy</span> <span class="n">array</span> <span class="n">of</span> <span class="n">the</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">time</span> <span class="n">t</span> <span class="err">“””</span>
</span><span class='line'>    <span class="c"># … here make a frame_for_time_t</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">frame_for_time_t</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c"># 3-second clip</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as video</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as GIF</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-1">Example 1</h2>

<p><img class="center" src="http://i.imgur.com/HRDUHf9.gif"></p>

<p>We start with an easy one. In <code>make_frame</code> we just draw a red circle, whose radius depends on the time <code>t</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">128</span><span class="p">,</span><span class="mi">128</span> <span class="c"># width, height, in pixels</span>
</span><span class='line'><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration of the clip, in seconds&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="n">radius</span> <span class="o">=</span> <span class="n">W</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span> <span class="p">(</span><span class="n">t</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">duration</span><span class="o">-</span><span class="n">t</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span><span class="o">/</span><span class="mi">6</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">circle</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-2">Example 2</h2>

<p><img class="center" src="http://i.imgur.com/rlrOFg4.gif"></p>

<p>Now there are more circles, and we start to see the interest of making animations programmatically using <code>for</code> loops. The useful function <code>polar2cart</code> transforms polar coordinates (radius, angle) into cartesian coordinates (x,y).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">128</span><span class="p">,</span><span class="mi">128</span>
</span><span class='line'><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">ncircles</span> <span class="o">=</span> <span class="mi">20</span> <span class="c"># Number of circles&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ncircles</span><span class="p">):</span>
</span><span class='line'>    <span class="n">angle</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">ncircles</span><span class="o">+</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="n">center</span> <span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span> <span class="mf">0.5</span><span class="o">+</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span><span class="n">angle</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">ncircles</span><span class="p">),</span>
</span><span class='line'>                          <span class="n">xy</span><span class="o">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">circles</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-3">Example 3</h2>

<p><img class="center" src="http://i.imgur.com/E1vjoRq.gif"></p>

<p>Here we fill the circles with a slightly excentred radial gradient to give and impression of volume. The colors, initial positions and centers of rotations of the circles are chosen randomly at the beginning.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span> <span class="o">=</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">150</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration</span>
</span><span class='line'><span class="n">nballs</span><span class="o">=</span><span class="mi">60</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;generate-random-values-of-radius-color-center&quot;</span><span class="o">&gt;</span><span class="n">generate</span> <span class="n">random</span> <span class="n">values</span> <span class="n">of</span> <span class="n">radius</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">center</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">radii</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="o">.</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="o">.</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span> <span class="n">nballs</span><span class="p">)</span>
</span><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">nballs</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">centers</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">W</span><span class="p">,</span> <span class="p">(</span><span class="n">nballs</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">r</span><span class="p">,</span><span class="n">color</span><span class="p">,</span> <span class="n">center</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">radii</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">centers</span><span class="p">):</span>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="n">color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-.</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="n">color</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">xy</span> <span class="o">=</span> <span class="n">center</span><span class="o">+</span><span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">5</span><span class="p">,</span><span class="n">angle</span><span class="p">)</span> <span class="c"># center of the ball</span>
</span><span class='line'>        <span class="n">gradient</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="err">”</span><span class="n">radial</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">stops_colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">color</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="n">color</span><span class="o">/</span><span class="mi">10</span><span class="p">)],</span>
</span><span class='line'>                     <span class="n">xy1</span><span class="o">=</span><span class="p">[</span><span class="mf">0.3</span><span class="p">,</span><span class="o">-</span><span class="mf">0.3</span><span class="p">],</span> <span class="n">xy2</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="n">xy3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.4</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ball</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">gradient</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">xy</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ball</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">balls</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span><span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-4">Example 4</h2>

<p><img class="center" src="http://i.imgur.com/sM5Oftz.gif"></p>

<p>The shadow is done using a circle with radial fading black gradient whose intensity diminishes when the ball is higher, for more realism (?). The shadow is then squeezed vertically using <code>scale(r,r/2)</code>, so that its width is twice its height.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span><span class="mi">75</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="mi">10</span> <span class="c"># radius of the ball</span>
</span><span class='line'><span class="n">DJ</span><span class="p">,</span> <span class="n">HJ</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">35</span> <span class="c"># distance and height of the jumps</span>
</span><span class='line'><span class="n">ground</span> <span class="o">=</span> <span class="mf">0.75</span><span class="o">*</span><span class="n">H</span> <span class="c"># y-coordinate of the ground&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gradient</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="err">”</span><span class="n">radial</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                <span class="n">stops_colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),(</span><span class="mi">1</span><span class="p">,(</span><span class="mf">0.1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))],</span>
</span><span class='line'>                <span class="n">xy1</span><span class="o">=</span><span class="p">[</span><span class="mf">0.3</span><span class="p">,</span><span class="o">-</span><span class="mf">0.3</span><span class="p">],</span> <span class="n">xy2</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="n">xy3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.4</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">,</span> <span class="n">bg_color</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">W</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">5</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">ground</span> <span class="o">-</span> <span class="n">HJ</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">DJ</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">DJ</span><span class="o">-</span><span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">DJ</span><span class="p">))</span><span class="o">/</span><span class="n">DJ</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'>    <span class="n">coef</span> <span class="o">=</span> <span class="p">(</span><span class="n">HJ</span><span class="o">-</span><span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="n">HJ</span>
</span><span class='line'>    <span class="n">shadow_gradient</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="err">”</span><span class="n">radial</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                <span class="n">stops_colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">.</span><span class="mi">2</span><span class="o">-</span><span class="n">coef</span><span class="o">/</span><span class="mi">5</span><span class="p">)),(</span><span class="mi">1</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))],</span>
</span><span class='line'>                <span class="n">xy1</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="n">xy2</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="n">xy3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.4</span><span class="p">])</span>
</span><span class='line'>    <span class="n">shadow</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">coef</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="n">shadow_gradient</span><span class="p">)</span>
</span><span class='line'>               <span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">r</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">ground</span><span class="o">+</span><span class="n">r</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">shadow</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ball</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">gradient</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
</span><span class='line'>    <span class="n">ball</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">bouncingball</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-5">Example 5</h2>

<p><img class="center" src="http://i.imgur.com/6rx7SUz.gif"></p>

<p>This is a derivative of the Dave Whyte animation shown in the introduction. It is made of stacked circles moving towards the picture’s border, with carefully chosen sizes, starting times, and colors (I say <em>carefully chosen</em> because it took me a few dozens random tries). The black around the picture is simply a big circle with no fill and a very very thick black border.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span>
</span><span class='line'><span class="n">DURATION</span> <span class="o">=</span> <span class="mf">2.0</span>
</span><span class='line'><span class="n">NDISKS_PER_CYCLE</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="n">SPEED</span> <span class="o">=</span> <span class="o">.</span><span class="mo">05</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dt</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">*</span><span class="n">DURATION</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span> <span class="c"># delay between disks</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">NDISKS_PER_CYCLE</span><span class="o">/</span><span class="n">SPEED</span><span class="p">)</span> <span class="c"># total number of disks</span>
</span><span class='line'><span class="n">t0</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">SPEED</span> <span class="c"># indicates at which avancement to start</span>
</span><span class='line'>
</span><span class='line'><span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">.</span><span class="mo">05</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">+</span><span class="n">t0</span><span class="o">-</span><span class="n">dt</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">center</span> <span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span><span class="mf">0.5</span><span class="o">+</span> <span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'>    <span class="n">color</span> <span class="o">=</span> <span class="mi">3</span><span class="o">*</span><span class="p">((</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span><span class="p">)</span> <span class="o">%</span> <span class="mf">1.0</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mf">0.3</span><span class="o">*</span><span class="n">W</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">center</span><span class="p">,</span><span class="n">fill</span> <span class="o">=</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">stroke_width</span><span class="o">=</span><span class="mf">0.01</span><span class="o">*</span><span class="n">W</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">contour1</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=.</span><span class="mi">65</span><span class="o">*</span><span class="n">W</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">[</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">],</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mi">5</span><span class="o">*</span><span class="n">W</span><span class="p">)</span>
</span><span class='line'><span class="n">contour2</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=.</span><span class="mi">42</span><span class="o">*</span><span class="n">W</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">[</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">],</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mo">02</span><span class="o">*</span><span class="n">W</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">contour1</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">contour2</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">DURATION</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">shutter</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-6">Example 6</h2>

<p><img class="center" src="http://i.imgur.com/JAJvFdT.gif"></p>

<p>You can draw more than circles ! And you can group different elements so that they will move together (here, a letter and a pentagon).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">75</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration in seconds</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="mi">22</span> <span class="c"># size of the letters / pentagons&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gradient</span><span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="err">“</span><span class="n">linear</span><span class="err">”</span><span class="p">,((</span><span class="mi">0</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)),(</span><span class="mi">1</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))),</span>
</span><span class='line'>                           <span class="n">xy1</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="n">r</span><span class="p">),</span> <span class="n">xy2</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">r</span><span class="p">))</span>
</span><span class='line'><span class="n">polygon</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">regular_polygon</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">gradient</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">,</span> <span class="n">bg_color</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="err">“</span><span class="n">GIZEH</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="o">-</span><span class="mf">1.0</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span><span class="o">/</span><span class="mi">5</span><span class="p">))</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>        <span class="n">txt</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="err">“</span><span class="n">Amiri</span><span class="err">”</span><span class="p">,</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">r</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="err">’</span><span class="n">bold</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">polygon</span><span class="p">,</span> <span class="n">txt</span><span class="p">])</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">W</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">group</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">gizeh</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-7">Example 7</h2>

<p><img class="center" src="http://i.imgur.com/dfJ2Skz.gif"></p>

<p>We start with just a triangle. By rotating this triangle three time we obtain four triangles which fit nicely into a square. Then we copy this square following a checkerboard pattern. Finally we do the same with another color to fill the missing tiles. Now, if the original triangle is rotated, all the triangles on the picture will also be rotated.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span><span class="mi">200</span>
</span><span class='line'><span class="n">WSQ</span> <span class="o">=</span> <span class="n">W</span><span class="o">/</span><span class="mi">4</span> <span class="c"># width of one ‘square’</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">8</span> <span class="c"># small angle in one triangle</span>
</span><span class='line'><span class="n">points</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="mi">2</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([[(</span><span class="o">.</span><span class="mi">7</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.05</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)],</span>
</span><span class='line'>                                <span class="p">[(</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="o">.</span><span class="mi">7</span><span class="p">),(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">)]]):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">grad</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="s">&quot;linear&quot;</span><span class="p">,</span><span class="n">xy1</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">xy2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                           <span class="n">stops_colors</span><span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">c1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="n">c2</span><span class="p">)])</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">D</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">/</span><span class="n">D</span><span class="p">))</span>
</span><span class='line'>    <span class="n">triangle</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">polyline</span><span class="p">(</span><span class="n">points</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="n">grad</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">angle</span><span class="o">=</span><span class="n">r</span><span class="p">,</span> <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mo">02</span><span class="p">)</span>
</span><span class='line'>    <span class="n">square</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">triangle</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                          <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)])</span>
</span><span class='line'>    <span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">square</span><span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)])</span>
</span><span class='line'>               <span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">WSQ</span><span class="p">)</span>
</span><span class='line'>               <span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">WSQ</span><span class="o">*</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">squares</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="o">=</span><span class="n">make_frame</span><span class="p">)</span><span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">blueradsquares</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-8">Example 8</h2>

<p><img class="center" src="http://i.imgur.com/79tTac9.gif"></p>

<p>A nice thing to do with vector graphics is fractals. We first build a ying-yang, then we use this ying-yang as the dots of a bigger ying-yang, and we use the bigger ying-yang as the dots of an even bigger ying yang etc. In the end we go one level deep into the imbricated ying-yangs, and we start zooming.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span><span class="mi">256</span>
</span><span class='line'><span class="n">R</span><span class="o">=</span><span class="mf">1.0</span><span class="o">*</span><span class="n">W</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">yingyang</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">(</span> <span class="p">[</span>
</span><span class='line'>      <span class="n">gz</span><span class="o">.</span><span class="n">arc</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gz</span><span class="o">.</span><span class="n">arc</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fractal</span> <span class="o">=</span> <span class="n">yingyang</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>    <span class="n">fractal</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">yingyang</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fractal</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">fractal</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="mf">0.26</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">R</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>                <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="mf">0.26</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">R</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">1</span><span class="p">)])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;go-one-level-deep-into-the-fractal&quot;</span><span class="o">&gt;</span><span class="n">Go</span> <span class="n">one</span> <span class="n">level</span> <span class="n">deep</span> <span class="n">into</span> <span class="n">the</span> <span class="n">fractal</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fractal</span> <span class="o">=</span> <span class="n">fractal</span><span class="o">.</span><span class="n">translate</span><span class="p">([(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="n">G</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">))</span> <span class="c"># zoom coefficient</span>
</span><span class='line'>    <span class="p">(</span><span class="n">fractal</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="n">R</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="mf">1.0</span><span class="o">/</span><span class="n">G</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">G</span><span class="p">)</span> <span class="c"># zoom</span>
</span><span class='line'>     <span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">))</span> <span class="c"># spiral effect</span>
</span><span class='line'>     <span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">yingyang</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-9">Example 9</h2>

<p><img class="center" src="http://i.imgur.com/JanwSIf.gif"></p>

<p>That one is inspired by this <a href="http://33.media.tumblr.com/ff988433be4970277349b0b57ae0abc6/tumblr_nb1fzsolQd1r2geqjo1_500.gif">Dave Whyte animation</a>. We draw white-filled circles, each of these being almost completely transparent so that they only add 1 to the value of the pixels that they cover. Pixels with an even value, which are the pixels covered by an even number of circles, are then painted white, while the others will be black. To complexify and have a nicely-looping animation, we draw two circles in each direction, one being a time-shifted version of the other.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span><span class="mi">400</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">5</span> <span class="c"># duration, in seconds</span>
</span><span class='line'><span class="n">ncircles</span> <span class="o">=</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">angle</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span><span class="n">ncircles</span><span class="o">+</span><span class="mi">1</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">center</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="o">.</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">angle</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span> <span class="c"># two circles belongin to two groups</span>
</span><span class='line'>            <span class="n">circle</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">W</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="mi">45</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="n">center</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>            <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">255</span><span class="o">*</span><span class="p">((</span><span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">rose</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-10">Example 10</h2>

<p><img class="center" src="http://i.imgur.com/2YdW9yf.gif"></p>

<p>A pentagon made of rotating squares ! Interestingly, making the squares rotate the other direction creates a very different-looking <a href="http://i.imgur.com/C8IKy28.gif">animation</a>. The squares are placed according to <a href="http://math.stackexchange.com/a/41954/43338">this polar equation</a>.</p>

<p>The difficulty in this animation is that the last square drawn will necessarily be on top of all the others, and not, as it should be, below the first square ! The solution is to draw each frame twice. The first time, we draw the squares starting from the right, so that the faulty square will also be on the right, and we only keep the left part of that picture. The second time we start drawing the squares from the left, so that the faulty square is on the left, and we keep the right part. By assembling the two valid parts we reconstitute a valid picture.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">colorsys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span><span class="mi">256</span>
</span><span class='line'><span class="n">NFACES</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">NSQUARES</span><span class="p">,</span> <span class="n">DURATION</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span>  <span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">half</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span><span class="err">”</span><span class="n">left</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>    <span class="n">points</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">geometry</span><span class="o">.</span><span class="n">polar_polygon</span><span class="p">(</span><span class="n">NFACES</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">NSQUARES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ipoint</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">side</span><span class="o">==</span><span class="err">”</span><span class="n">left</span><span class="err">”</span> <span class="k">else</span> <span class="n">NSQUARES</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>    <span class="n">points</span> <span class="o">=</span> <span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="n">ipoint</span><span class="p">:]</span><span class="o">+</span><span class="n">points</span><span class="p">[:</span><span class="n">ipoint</span><span class="p">])[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">th</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
</span><span class='line'>    <span class="n">center</span> <span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span><span class="mf">0.5</span><span class="o">+</span><span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">th</span><span class="p">))</span>
</span><span class='line'>    <span class="n">angle</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="mi">6</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="n">d</span> <span class="o">+</span> <span class="n">t</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="n">DURATION</span><span class="p">)</span>
</span><span class='line'>    <span class="n">color</span><span class="o">=</span> <span class="n">colorsys</span><span class="o">.</span><span class="n">hls_to_rgb</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">d</span><span class="o">+</span><span class="n">t</span><span class="o">/</span><span class="n">DURATION</span><span class="p">)</span><span class="o">%</span><span class="mi">1</span><span class="p">,</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">square</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">square</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mf">0.17</span><span class="o">*</span><span class="n">W</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">angle</span><span class="o">=</span><span class="n">angle</span><span class="p">,</span>
</span><span class='line'>               <span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">stroke_width</span><span class="o">=</span> <span class="mf">0.005</span><span class="o">*</span><span class="n">W</span><span class="p">,</span> <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="n">square</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">im</span><span class="p">[:,:</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="n">side</span><span class="o">==</span><span class="s">&quot;left&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="n">im</span><span class="p">[:,</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">:])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">([</span><span class="n">half</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="err">”</span><span class="n">left</span><span class="err">”</span><span class="p">),</span><span class="n">half</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="err">”</span><span class="n">right</span><span class="err">”</span><span class="p">)])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">DURATION</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">pentagon</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="mixing-videos-and-vector-graphics">Mixing videos and vector graphics</h2>

<p>A nice advantage of combining Gizeh with MoviePy is that you can read actual video files (or gifs) and use the frames to fill shapes drawn with Gizeh.</p>

<p>We will use this <a href="https://www.youtube.com/watch?v=t4gjl-uwUHc">video</a> from the Blender Foundation (it’s under a Creative Common licence). Since you have read until there I’ll show you a little unrelated trick: at <em>4:32</em> the rabbit is jumping rope, so there is a potential for a well-looping GIF. We open the video around <em>4:32</em>, and let MoviePy automatically decide where to cut to have the best-looping GIF possible:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">as</span> <span class="nn">cuts</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">bunny</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span><span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">32</span><span class="p">),(</span><span class="mi">4</span><span class="p">,</span><span class="mi">33</span><span class="p">))</span>
</span><span class='line'><span class="n">t_loop</span> <span class="o">=</span> <span class="n">cuts</span><span class="o">.</span><span class="n">find_video_period</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span> <span class="c"># gives t=0.56</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">t_loop</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/MVp4TSx.gif"></p>

<p>Now we can feed the frames of this GIF to Gizeh, using MoviePy’s <code>clip.fl(some_filter)</code>, which means <em>“I want a new clip made by transforming the frames of the current clip with some_filter”</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">),</span> <span class="n">d</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">clip</span><span class="o">.</span><span class="n">duration</span>
</span><span class='line'><span class="n">center</span><span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">my_filter</span><span class="p">(</span><span class="n">get_frame</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Transforms</span> <span class="n">a</span> <span class="n">frame</span> <span class="p">(</span><span class="n">given</span> <span class="n">by</span> <span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="n">into</span> <span class="n">a</span> <span class="n">different</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">,</span> <span class="n">using</span> <span class="n">vector</span> <span class="n">graphics</span><span class="o">.</span><span class="err">”””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">ImagePattern</span><span class="p">(</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">pixel_zero</span><span class="o">=</span><span class="n">center</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="n">center</span><span class="p">))</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">nfaces</span><span class="p">,</span><span class="n">angle</span><span class="p">,</span><span class="n">f</span><span class="p">)</span> <span class="ow">in</span> <span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                          <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mf">3.0</span><span class="o">/</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                          <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mf">5.0</span><span class="o">/</span><span class="mi">6</span><span class="p">]):</span>
</span><span class='line'>    <span class="n">xy</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">*</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="o">*</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="o">+</span> <span class="o">.</span><span class="mo">05</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">d</span><span class="o">+</span><span class="n">f</span><span class="p">))))</span>
</span><span class='line'>    <span class="n">shape</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">regular_polygon</span><span class="p">(</span><span class="n">w</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span><span class="n">nfaces</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">xy</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="p">,</span> <span class="n">center</span><span class="p">))</span>
</span><span class='line'>    <span class="n">shape</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span><span class="o">.</span><span class="n">fl</span><span class="p">(</span><span class="n">my_filter</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny_shapes</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/ltArnnc.gif"></p>

<p>Finally, this function adds a zoom on some part of the video.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">add_zoom</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="n">target_center</span><span class="p">,</span> <span class="n">zoom_center</span><span class="p">,</span> <span class="n">zoom_radius</span><span class="p">,</span> <span class="n">zoomx</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fl</span><span class="p">(</span><span class="n">im</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; transforms the image by adding a zoom &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="o">.</span><span class="n">from_image</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ImagePattern</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">pixel_zero</span><span class="o">=</span><span class="n">target_center</span><span class="p">,</span>
</span><span class='line'>                           <span class="nb">filter</span><span class="o">=</span><span class="s">&#39;best&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">polyline</span><span class="p">([</span><span class="n">target_center</span><span class="p">,</span> <span class="n">zoom_center</span><span class="p">],</span>
</span><span class='line'>                       <span class="n">stroke_width</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle_target</span><span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">zoom_radius</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">target_center</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="p">,</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle_zoom</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">zoom_radius</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">zoom_center</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">stroke_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">zoomx</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="n">zoom_center</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">line</span><span class="p">,</span> <span class="n">circle_zoom</span><span class="p">,</span> <span class="n">circle_target</span><span class="p">:</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">clip</span><span class="o">.</span><span class="n">fl_image</span><span class="p">(</span><span class="n">fl</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="n">clip_with_zoom</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span><span class="n">add_zoom</span><span class="p">,</span> <span class="n">target_center</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">3</span><span class="p">],</span> <span class="n">zoomx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">zoom_center</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="o">*</span><span class="n">w</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">4</span><span class="p">],</span> <span class="n">zoom_radius</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="n">clip_with_zoom</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunnyt_zoom</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/VAvDKRN.gif"></p>

<h2 id="your-turn-now-">Your turn now !</h2>

<p>I hope I have convinced you that Python is a nice language for making vector animations. If you give it a try, let me know of any difficulty you may meet installing or using MoviePy and Gizeh. And any feedback, improvement ideas, commits, etc. are also very appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python script controlled via Twitter]]></title>
    <link href="http://Zulko.github.io/blog/2014/07/26/a-tweets-controlled-python-script/"/>
    <updated>2014-07-26T09:01:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/07/26/a-tweets-controlled-python-script</id>
    <content type="html"><![CDATA[<p><em>Let us watch and react to the lattest tweets with Python, the dirty way.</em>
<!-- more --></p>

<p>Python modules to interact with Twitter, like <a href="https://github.com/tweepy/tweepy">tweepy</a>, <a href="https://github.com/bear/python-twitter">python-twitter</a>, <a href="https://pypi.python.org/pypi/twitter">twitter</a>, or <a href="https://github.com/ryanmcgrath/twython">twython</a>, all depend on the Twitter API, which makes them a little complicated to use: you must open a Twitter account, register at <em>dev.twitter.com</em>, open a new application there, and at each connection <a href="http://tweepy.readthedocs.org/en/v2.3.0/auth_tutorial.html#auth-tutorial">dance with the OAuth</a>.</p>

<p>If you just want to read the lattest tweets of some Twitter user, instead of using these libraries, you can simply parse the HTML of that user’s Twitter page: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">urlopen</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span> <span class="c"># module for HTML parsing&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Gets</span> <span class="n">the</span> <span class="n">texts</span> <span class="ow">and</span> <span class="n">links</span> <span class="n">of</span> <span class="n">username</span><span class="err">’</span><span class="n">s</span> <span class="n">lattest</span> <span class="n">tweets</span><span class="err">”””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">url</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span> <span class="s">&quot;https://twitter.com//&quot;</span> <span class="o">+</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span> <span class="n">url</span> <span class="p">)</span>
</span><span class='line'><span class="n">url</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">page</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="s">&quot;class&quot;</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">attrs</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>         <span class="p">(</span><span class="s">&quot;ProfileTweet-text&quot;</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;class&quot;</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'><span class="n">links</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;href&quot;</span><span class="p">]</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">page</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="s">&quot;class&quot;</span> <span class="ow">in</span> <span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>         <span class="p">(</span><span class="s">&quot;ProfileTweet-timestamp&quot;</span> <span class="ow">in</span> <span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;class&quot;</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">links</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Let us try it on <a href="https://twitter.com/JohnDCook">John D. Cook</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="n">get_tweets</span><span class="p">(</span><span class="err">“</span><span class="n">JohnDCook</span><span class="err">”</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c"># John’s lattest tweet</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(u”Data cleaning code cannot be clean. It’s a sort of sin eater.”,
</span><span class='line'>  ‘/StatFact/status/492753200190341120’)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As an application, here is a script that watches my (useless) Twitter page every 20 seconds, and each time I tweet something like <code>cmd: my_command</code> it executes <code>my_command</code> in a terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">old_tweets</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># tweets that have already been read</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">tweets</span> <span class="o">=</span> <span class="p">[</span><span class="n">tweet</span> <span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">get_tweets</span><span class="p">(</span><span class="err">“</span><span class="n">Zulko___</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">tweet</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">old_tweets</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">link</span><span class="p">)</span> <span class="ow">in</span> <span class="n">tweets</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="err">“</span><span class="n">cmd</span><span class="p">:</span> <span class="err">“</span><span class="p">):</span>
</span><span class='line'>            <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="mi">5</span><span class="p">:],</span> <span class="n">shell</span><span class="o">=</span><span class="err">”</span><span class="bp">True</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old_tweets</span> <span class="o">+=</span> <span class="n">tweets</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="c"># wait 20 seconds</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can now tweet-control, from my smartphone, any computer that is running this script. If I tweet <code>cmd: firefox</code> the computer will open firefox, if I tweet <code>cmd: echo "Hello"</code> it will print Hello in the terminal, etc.</p>

<h2 id="introducing-twittcher">Introducing Twittcher</h2>

<p>If you want more, I wrote <a href="https://github.com/Zulko/twittcher">Twittcher</a>, a small Python module which doesn’t depend on the Twitter API, to make bots that watch search results or user pages and react to the tweets they find.</p>

<p>For instance this script checks the search results for <em>chocolate milk</em> every 20 seconds, and sends all the new tweets (with date, username, and link) to my mail box.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">twittcher</span> <span class="kn">import</span> <span class="n">TweetSender</span><span class="p">,</span> <span class="n">SearchWatcher</span>
</span><span class='line'><span class="n">sender</span> <span class="o">=</span> <span class="n">TweetSender</span><span class="p">(</span><span class="n">smtp</span><span class="o">=</span><span class="err">”</span><span class="n">smtp</span><span class="o">.</span><span class="n">gmail</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">587</span><span class="p">,</span> <span class="c"># use gmail smtp</span>
</span><span class='line'>                     <span class="n">login</span><span class="o">=</span><span class="err">”</span><span class="n">tintin</span><span class="o">.</span><span class="n">zulko</span><span class="nd">@gmail.com</span><span class="err">”</span><span class="p">,</span> <span class="c"># gmail login</span>
</span><span class='line'>                     <span class="n">password</span><span class="o">=</span><span class="err">”</span><span class="n">fibo112358</span><span class="err">”</span><span class="p">,</span> <span class="c"># be nice, don’t try.</span>
</span><span class='line'>                     <span class="n">to_addrs</span><span class="o">=</span><span class="err">”</span><span class="n">tintin</span><span class="o">.</span><span class="n">zulko</span><span class="nd">@gmail.com</span><span class="err">”</span><span class="p">,</span> <span class="c"># where to send</span>
</span><span class='line'>                     <span class="n">sender_id</span> <span class="o">=</span> <span class="err">“</span><span class="n">chocolate</span> <span class="n">milk</span><span class="err">”</span><span class="p">)</span> <span class="c"># appears in ‘Subject’</span>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">SearchWatcher</span><span class="p">(</span><span class="err">“</span><span class="n">chocolate</span> <span class="n">milk</span><span class="err">”</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">sender</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">watch_every</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="c"># check every 20s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just run that script all day on your computer (or rather on your <a href="http://www.raspberrypi.org/">Raspberry Pi</a>) and you will be updated every time someone drinks chocolate milk and feels the urge to tweet about it (which is very often).</p>
]]></content>
  </entry>
  
</feed>
