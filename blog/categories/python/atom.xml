<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-09-21T12:09:12+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vector animations with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/09/20/vector-animations-with-python/"/>
    <updated>2014-09-20T16:48:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/09/20/vector-animations-with-python</id>
    <content type="html"><![CDATA[<p><em>Because neat animations are neat.</em></p>

<!-- more -->

<p>I am a big fan of <a href="https://dribbble.com/beesandbombs">Dave Whyte</a>’s vector animations, like this one:</p>

<p><img class="center" src="https://d13yacurqjgara.cloudfront.net/users/583436/screenshots/1692659/spiral.gif" width="400"></p>

<p>It was generated using a special animation language called <a href="http://www.processing.org/">Processing</a> (here is <a href="https://dribbble.com/shots/1692659-Shell-Spiral/attachments/268926">Dave’s code</a>). While it seems powerful, Processing it is not very elegant in my opinion. This post shows how to do 2D vector animations in Python using two libraries, <a href="https://github.com/Zulko/gizeh">Gizeh</a> (for the graphics) and <a href="http://zulko.github.io/moviepy">MoviePy</a> (for the animations). I will quickly present these libraries before we get to the examples.</p>

<h2 id="gizeh-and-moviepy">Gizeh and Moviepy</h2>

<p>Gizeh is a Python library I wrote on top of PyCairo to make it more intuitive. To make a picture with Gizeh you create a <em>surface</em>, draw stuff on it, and export:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">320</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">260</span><span class="p">)</span> <span class="c"># dimensions in pixel</span>
</span><span class='line'><span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span> <span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="c"># radius, in pixels</span>
</span><span class='line'>                       <span class="n">xy</span><span class="o">=</span> <span class="p">[</span><span class="mi">156</span><span class="p">,</span> <span class="mi">200</span><span class="p">],</span> <span class="c"># coordinates of the center</span>
</span><span class='line'>                       <span class="n">fill</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="c"># ‘red’ in RGB coordinates</span>
</span><span class='line'><span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span> <span class="n">surface</span> <span class="p">)</span> <span class="c"># draws the circle on the surface</span>
</span><span class='line'><span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span> <span class="c"># to export as a numpy array</span>
</span><span class='line'><span class="n">surface</span><span class="o">.</span><span class="n">write_to_png</span><span class="p">(</span><span class="err">“</span><span class="n">my_drawing</span><span class="o">.</span><span class="n">png</span><span class="err">”</span><span class="p">)</span> <span class="c"># to export as a PNG</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We obtain this magnificent Japanese flag:
<img class="center" src="/images/vector_animations/my_drawing.png"></p>

<p>To make an animation with MoviePy, you write a function <code>make_frame</code> which, given some time <code>t</code>, returns the video frame at time <code>t</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoClip</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">numpy</span> <span class="n">array</span> <span class="n">of</span> <span class="n">the</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">time</span> <span class="n">t</span> <span class="err">“””</span>
</span><span class='line'>    <span class="c"># … here make a frame_for_time_t</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">frame_for_time_t</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c"># 3-second clip</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as video</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_videofile</span><span class="p">(</span><span class="err">“</span><span class="n">my_animation</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span> <span class="c"># export as GIF</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-1">Example 1</h2>

<p><img class="center" src="http://i.imgur.com/HRDUHf9.gif"></p>

<p>In <code>make_frame</code> we draw a red circle, whose radius depends on the time <code>t</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">128</span><span class="p">,</span><span class="mi">128</span> <span class="c"># width, height, in pixels</span>
</span><span class='line'><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration of the clip, in seconds&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="n">radius</span> <span class="o">=</span> <span class="n">W</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span> <span class="p">(</span><span class="n">t</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">duration</span><span class="o">-</span><span class="n">t</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span><span class="o">/</span><span class="mi">6</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">circle</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-2">Example 2</h2>

<p><img class="center" src="http://i.imgur.com/rlrOFg4.gif"></p>

<p>Now there are more circles, and we start to see the interest of making animations programmatically using <code>for</code> loops. The useful function <code>polar2cart</code> transforms polar coordinates (radius, angle) into cartesian coordinates (x,y).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">128</span><span class="p">,</span><span class="mi">128</span>
</span><span class='line'><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">ncircles</span> <span class="o">=</span> <span class="mi">20</span> <span class="c"># Number of circles&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ncircles</span><span class="p">):</span>
</span><span class='line'>    <span class="n">angle</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">ncircles</span><span class="o">+</span><span class="n">t</span><span class="o">/</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="n">center</span> <span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span> <span class="mf">0.5</span><span class="o">+</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span><span class="n">angle</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">ncircles</span><span class="p">),</span>
</span><span class='line'>                          <span class="n">xy</span><span class="o">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">circles</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-3">Example 3</h2>

<p><img class="center" src="http://i.imgur.com/E1vjoRq.gif"></p>

<p>Here we fill the circles with a slightly excentred radial gradient to give and impression of volume. The colors, initial positions and centers of rotations of the circles are chosen randomly at the beginning.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span> <span class="o">=</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">150</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration</span>
</span><span class='line'><span class="n">nballs</span><span class="o">=</span><span class="mi">60</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;generate-random-values-of-radius-color-center&quot;</span><span class="o">&gt;</span><span class="n">generate</span> <span class="n">random</span> <span class="n">values</span> <span class="n">of</span> <span class="n">radius</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">center</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">radii</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="o">.</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="o">.</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span> <span class="n">nballs</span><span class="p">)</span>
</span><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">nballs</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">centers</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">W</span><span class="p">,</span> <span class="p">(</span><span class="n">nballs</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">r</span><span class="p">,</span><span class="n">color</span><span class="p">,</span> <span class="n">center</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">radii</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">centers</span><span class="p">):</span>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="n">color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-.</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="n">color</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">xy</span> <span class="o">=</span> <span class="n">center</span><span class="o">+</span><span class="n">gz</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">5</span><span class="p">,</span><span class="n">angle</span><span class="p">)</span> <span class="c"># center of the ball</span>
</span><span class='line'>        <span class="n">gradient</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="err">”</span><span class="n">radial</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">stops_colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">color</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="n">color</span><span class="o">/</span><span class="mi">10</span><span class="p">)],</span>
</span><span class='line'>                     <span class="n">xy1</span><span class="o">=</span><span class="p">[</span><span class="mf">0.3</span><span class="p">,</span><span class="o">-</span><span class="mf">0.3</span><span class="p">],</span> <span class="n">xy2</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="n">xy3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.4</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ball</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">gradient</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">xy</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ball</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">balls</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span><span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-4">Example 4</h2>

<p><img class="center" src="http://i.imgur.com/6rx7SUz.gif"></p>

<p>This is a derivative of the Dave Whyte animation shown in the introduction. It is made of stacked circles moving towards the picture’s border, with carefully chosen sizes, starting times, and colors (I say <em>carefully chosen</em> because it took me a few dozens random tries). The black around the picture is simply a big circle with no fill and a very very thick black border.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span>
</span><span class='line'><span class="n">DURATION</span> <span class="o">=</span> <span class="mf">2.0</span>
</span><span class='line'><span class="n">NDISKS_PER_CYCLE</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="n">SPEED</span> <span class="o">=</span> <span class="o">.</span><span class="mo">05</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dt</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">*</span><span class="n">DURATION</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span> <span class="c"># delay between disks</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">NDISKS_PER_CYCLE</span><span class="o">/</span><span class="n">SPEED</span><span class="p">)</span> <span class="c"># total number of disks</span>
</span><span class='line'><span class="n">t0</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">SPEED</span> <span class="c"># indicates at which avancement to start</span>
</span><span class='line'>
</span><span class='line'><span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">.</span><span class="mo">05</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">+</span><span class="n">t0</span><span class="o">-</span><span class="n">dt</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">center</span> <span class="o">=</span> <span class="n">W</span><span class="o">*</span><span class="p">(</span><span class="mf">0.5</span><span class="o">+</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'>    <span class="n">color</span> <span class="o">=</span> <span class="mi">3</span><span class="o">*</span><span class="p">((</span><span class="mf">1.0</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="n">NDISKS_PER_CYCLE</span><span class="p">)</span> <span class="o">%</span> <span class="mf">1.0</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="mf">0.3</span><span class="o">*</span><span class="n">W</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">center</span><span class="p">,</span><span class="n">fill</span> <span class="o">=</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">stroke_width</span><span class="o">=</span><span class="mf">0.01</span><span class="o">*</span><span class="n">W</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">contour1</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=.</span><span class="mi">65</span><span class="o">*</span><span class="n">W</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">[</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">],</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mi">5</span><span class="o">*</span><span class="n">W</span><span class="p">)</span>
</span><span class='line'><span class="n">contour2</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">r</span><span class="o">=.</span><span class="mi">42</span><span class="o">*</span><span class="n">W</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">[</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">],</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mo">02</span><span class="o">*</span><span class="n">W</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">contour1</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="n">contour2</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">DURATION</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">shutter</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-5">Example 5</h2>

<p><img class="center" src="http://i.imgur.com/JAJvFdT.gif"></p>

<p>You can draw more than circles ! You can also group different elements so that they will move together.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">75</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration in seconds</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="mi">22</span> <span class="c"># size of the letters / pentagons&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gradient</span><span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="err">“</span><span class="n">linear</span><span class="err">”</span><span class="p">,((</span><span class="mi">0</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)),(</span><span class="mi">1</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))),</span>
</span><span class='line'>                           <span class="n">xy1</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="n">r</span><span class="p">),</span> <span class="n">xy2</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">r</span><span class="p">))</span>
</span><span class='line'><span class="n">polygon</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">regular_polygon</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">gradient</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">,</span> <span class="n">bg_color</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="err">“</span><span class="n">GIZEH</span><span class="err">”</span><span class="p">):</span>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="o">-</span><span class="mf">1.0</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span><span class="o">/</span><span class="mi">5</span><span class="p">))</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>        <span class="n">txt</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="err">“</span><span class="n">Amiri</span><span class="err">”</span><span class="p">,</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">r</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="err">’</span><span class="n">bold</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">polygon</span><span class="p">,</span> <span class="n">txt</span><span class="p">])</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">W</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">group</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">gizeh</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-6">Example 6</h2>

<p><img class="center" src="http://i.imgur.com/dfJ2Skz.gif"></p>

<p>Here we start with just a triangle. By rotating this triangle three time we obtain four triangles which fit nicely into a square. Then we copy this square following a checkerboard pattern. Finally we do the same with another color to fill the missing tiles. Now, if the original triangle is rotated, all the triangles on the picture will also be rotated.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span><span class="mi">200</span>
</span><span class='line'><span class="n">WSQ</span> <span class="o">=</span> <span class="n">W</span><span class="o">/</span><span class="mi">4</span> <span class="c"># width of one ‘square’</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># duration</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">8</span> <span class="c"># small angle in one triangle</span>
</span><span class='line'><span class="n">points</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="mi">2</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([[(</span><span class="o">.</span><span class="mi">7</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.05</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)],</span>
</span><span class='line'>                                <span class="p">[(</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="o">.</span><span class="mi">7</span><span class="p">),(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">)]]):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">grad</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">ColorGradient</span><span class="p">(</span><span class="s">&quot;linear&quot;</span><span class="p">,</span><span class="n">xy1</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">xy2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                           <span class="n">stops_colors</span><span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">c1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="n">c2</span><span class="p">)])</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">D</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">/</span><span class="n">D</span><span class="p">))</span>
</span><span class='line'>    <span class="n">triangle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">polyline</span><span class="p">(</span><span class="n">points</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="n">grad</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">angle</span><span class="o">=</span><span class="n">r</span><span class="p">,</span> <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=.</span><span class="mo">02</span><span class="p">)</span>
</span><span class='line'>    <span class="n">square</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">triangle</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                          <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)])</span>
</span><span class='line'>    <span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">gizeh</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">square</span><span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)])</span>
</span><span class='line'>               <span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">WSQ</span><span class="p">)</span>
</span><span class='line'>               <span class="o">.</span><span class="n">translate</span><span class="p">((</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="n">WSQ</span><span class="o">*</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">squares</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="o">=</span><span class="n">make_frame</span><span class="p">)</span><span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">blueradsquares</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-7">Example 7</h2>

<p><img class="center" src="http://i.imgur.com/79tTac9.gif"></p>

<p>A nice thing to do with vector graphics is fractals. We first build a ying-yang, then we use this ying-yang as the dots of a bigger ying-yang, and we use the bigger ying-yang as the dots of an even bigger ying yang etc. In the end we go one level deep into the imbricated ying-yangs, and we start zooming.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span><span class="mi">256</span>
</span><span class='line'><span class="n">R</span><span class="o">=</span><span class="mf">1.0</span><span class="o">*</span><span class="n">W</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">yingyang</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Group</span><span class="p">(</span> <span class="p">[</span>
</span><span class='line'>      <span class="n">gizeh</span><span class="o">.</span><span class="n">arc</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gizeh</span><span class="o">.</span><span class="n">arc</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fractal</span> <span class="o">=</span> <span class="n">yingyang</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>    <span class="n">fractal</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Group</span><span class="p">([</span><span class="n">yingyang</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fractal</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">fractal</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="mf">0.26</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">R</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>                <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="mf">0.26</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">R</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">stroke</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">1</span><span class="p">)])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;go-one-level-deep-into-the-fractal&quot;</span><span class="o">&gt;</span><span class="n">Go</span> <span class="n">one</span> <span class="n">level</span> <span class="n">deep</span> <span class="n">into</span> <span class="n">the</span> <span class="n">fractal</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fractal</span> <span class="o">=</span> <span class="n">fractal</span><span class="o">.</span><span class="n">translate</span><span class="p">([(</span><span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="n">G</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">))</span> <span class="c"># zoom coefficient</span>
</span><span class='line'>    <span class="p">(</span><span class="n">fractal</span><span class="o">.</span><span class="n">translate</span><span class="p">([</span><span class="n">R</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="mf">1.0</span><span class="o">/</span><span class="n">G</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">G</span><span class="p">)</span> <span class="c"># zoom</span>
</span><span class='line'>     <span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="n">gizeh</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="n">W</span><span class="o">/</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">))</span> <span class="c"># spiral effect</span>
</span><span class='line'>     <span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">yingyang</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-8">Example 8</h2>

<p><img class="center" src="http://i.imgur.com/JanwSIf.gif"></p>

<p>That one is inspired by this <a href="http://33.media.tumblr.com/ff988433be4970277349b0b57ae0abc6/tumblr_nb1fzsolQd1r2geqjo1_500.gif">Dave Whyte animation</a>. We draw white-filled circles, each of these being almost completely transparent so that they only add 1 to the value of the pixels that they cover. Pixels with an even value, which are the pixels covered by an even number of circles, are then painted white, while the others will be black. To complexify and have a nicely-looping animation, we draw two circles in each direction, one being a time-shifted version of the other.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">H</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span><span class="mi">400</span>
</span><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="mi">5</span> <span class="c"># duration, in seconds</span>
</span><span class='line'><span class="n">ncircles</span> <span class="o">=</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">H</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">angle</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span><span class="n">ncircles</span><span class="o">+</span><span class="mi">1</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">center</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">W</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">H</span><span class="o">/</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">polar2cart</span><span class="p">(</span><span class="o">.</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">W</span><span class="p">,</span><span class="n">angle</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span> <span class="c"># two circles belongin to two groups</span>
</span><span class='line'>            <span class="n">circle</span> <span class="o">=</span> <span class="n">gizeh</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">W</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="mi">45</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">t</span><span class="o">/</span><span class="n">D</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="n">center</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">fill</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>            <span class="n">circle</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">255</span><span class="o">*</span><span class="p">((</span><span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">make_frame</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">D</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">rose</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">,</span><span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">opt</span><span class="o">=</span><span class="err">”</span><span class="n">OptimizePlus</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="example-9">Example 9</h2>

<p><img class="center" src="http://i.imgur.com/2YdW9yf.gif"></p>

<p>What a nice pentagon ! Interestingly, making the squares rotate the other direction creates a very different-looking <a href="http://i.imgur.com/C8IKy28.gif">animation</a>. I don’t feel like giving the code for this one, but it’s also just 30 lines of Python (with a trick) so I’ll leave it as an exercise ;)</p>

<h2 id="mixing-videos-and-vector-graphics">Mixing videos and vector graphics</h2>

<p>A nice advantage of using Gizeh with MoviePy is that you can read actual video files (or gifs) and use their content to fill the shapes you draw with Gizeh. </p>

<p>We will use this <a href="https://www.youtube.com/watch?v=t4gjl-uwUHc">video</a> from the Blender Foundation (it’s under a Creative Common licence). Since you have read until there I’ll show you a little unrelated trick: at <em>4:32</em> the rabbit is jumping rope, so there is a potential for a well-looping GIF. We open the video around <em>4:32</em>, and let MoviePy automatically decide where to cut to have the best-looping GIF possible:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.video.tools.cuts</span> <span class="kn">as</span> <span class="nn">cuts</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">bunny</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span><span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">32</span><span class="p">),(</span><span class="mi">4</span><span class="p">,</span><span class="mi">33</span><span class="p">))</span>
</span><span class='line'><span class="n">t_loop</span> <span class="o">=</span> <span class="n">cuts</span><span class="o">.</span><span class="n">find_period</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span> <span class="c"># gives t=0.56</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">t_loop</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/MVp4TSx.gif"></p>

<p>Now we can feed the frames of this GIF to Gizeh. This can be simply done using MoviePy’s <code>clip.fl(some_filter)</code>, which says <em>“I want a new clip made by transforming the frames of the current clip with some_filter”</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">),</span> <span class="n">d</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">clip</span><span class="o">.</span><span class="n">duration</span>
</span><span class='line'><span class="n">center</span><span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">my_filter</span><span class="p">(</span><span class="n">get_frame</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Transforms</span> <span class="n">a</span> <span class="n">frame</span> <span class="p">(</span><span class="n">given</span> <span class="n">by</span> <span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="n">into</span> <span class="n">a</span> <span class="n">different</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">,</span> <span class="n">using</span> <span class="n">vector</span> <span class="n">graphics</span><span class="o">.</span><span class="err">”””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="p">(</span><span class="n">gz</span><span class="o">.</span><span class="n">ImagePattern</span><span class="p">(</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">pixel_zero</span><span class="o">=</span><span class="n">center</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="n">center</span><span class="p">))</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">nfaces</span><span class="p">,</span><span class="n">angle</span><span class="p">,</span><span class="n">f</span><span class="p">)</span> <span class="ow">in</span> <span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                          <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mf">3.0</span><span class="o">/</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                          <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mf">5.0</span><span class="o">/</span><span class="mi">6</span><span class="p">]):</span>
</span><span class='line'>    <span class="n">xy</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">*</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="o">*</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="o">+</span> <span class="o">.</span><span class="mo">05</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="n">d</span><span class="o">+</span><span class="n">f</span><span class="p">))))</span>
</span><span class='line'>    <span class="n">shape</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">regular_polygon</span><span class="p">(</span><span class="n">w</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span><span class="n">nfaces</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">xy</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="p">,</span> <span class="n">center</span><span class="p">))</span>
</span><span class='line'>    <span class="n">shape</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span><span class="o">.</span><span class="n">fl</span><span class="p">(</span><span class="n">my_filter</span><span class="p">)</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny_shapes</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/ltArnnc.gif"></p>

<p>Finally, this function adds a zoom on some part of the video.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">gizeh</span> <span class="kn">as</span> <span class="nn">gz</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">moviepy.editor</span> <span class="kn">as</span> <span class="nn">mpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">add_zoom</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="n">target_center</span><span class="p">,</span> <span class="n">zoom_center</span><span class="p">,</span> <span class="n">zoom_radius</span><span class="p">,</span> <span class="n">zoomx</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fl</span><span class="p">(</span><span class="n">im</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; transforms the image by adding a zoom &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">surface</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">Surface</span><span class="o">.</span><span class="n">from_image</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">ImagePattern</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">pixel_zero</span><span class="o">=</span><span class="n">target_center</span><span class="p">,</span>
</span><span class='line'>                           <span class="nb">filter</span><span class="o">=</span><span class="s">&#39;best&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">polyline</span><span class="p">([</span><span class="n">target_center</span><span class="p">,</span> <span class="n">zoom_center</span><span class="p">],</span>
</span><span class='line'>                       <span class="n">stroke_width</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle_target</span><span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">zoom_radius</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">target_center</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="p">,</span> <span class="n">stroke_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle_zoom</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">zoom_radius</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="n">zoom_center</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">fill</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">stroke_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">scale</span><span class="p">(</span><span class="n">zoomx</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="n">zoom_center</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">line</span><span class="p">,</span> <span class="n">circle_zoom</span><span class="p">,</span> <span class="n">circle_target</span><span class="p">:</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">surface</span><span class="o">.</span><span class="n">get_npimage</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">clip</span><span class="o">.</span><span class="n">fl_image</span><span class="p">(</span><span class="n">fl</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">mpy</span><span class="o">.</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunny</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="n">clip_with_zoom</span> <span class="o">=</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span><span class="n">add_zoom</span><span class="p">,</span> <span class="n">target_center</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">3</span><span class="p">],</span> <span class="n">zoomx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">zoom_center</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="o">*</span><span class="n">w</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">4</span><span class="p">],</span> <span class="n">zoom_radius</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="n">clip_with_zoom</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">jumping_bunnyt_zoom</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/VAvDKRN.gif"></p>

<h2 id="your-turn-now-">Your turn now !</h2>

<p>I hope I have convinced you that Python is a nice language for making vector animations. It keeps the code small and simple so that you can concentrate on the maths, and still enables export in many formats and fine-tuning the quality of your animation. If you give it a try, let me know of any difficulty you may meet installing or using MoviePy and Gizeh. And any feedback, improvement ideas, commits, etc. are also very appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python script controlled via Twitter]]></title>
    <link href="http://Zulko.github.io/blog/2014/07/26/a-tweets-controlled-python-script/"/>
    <updated>2014-07-26T09:01:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/07/26/a-tweets-controlled-python-script</id>
    <content type="html"><![CDATA[<p><em>Let us watch and react to the lattest tweets with Python, the dirty way.</em>
<!-- more --></p>

<p>Python modules to interact with Twitter, like <a href="https://github.com/tweepy/tweepy">tweepy</a>, <a href="https://github.com/bear/python-twitter">python-twitter</a>, <a href="https://pypi.python.org/pypi/twitter">twitter</a>, or <a href="https://github.com/ryanmcgrath/twython">twython</a>, all depend on the Twitter API. To use them, you must open a Twitter account, register at <em>dev.twitter.com</em>, open a new application there, and at each connection <a href="http://tweepy.readthedocs.org/en/v2.3.0/auth_tutorial.html#auth-tutorial">dance with the OAuth</a>.</p>

<p>If you just want to read the lattest tweets of some Twitter user, it is simpler to parse the HTML of that user’s Twitter page: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">urlopen</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span> <span class="c"># module for HTML parsing&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Gets</span> <span class="n">the</span> <span class="n">texts</span> <span class="ow">and</span> <span class="n">links</span> <span class="n">of</span> <span class="n">username</span><span class="err">’</span><span class="n">s</span> <span class="n">lattest</span> <span class="n">tweets</span><span class="err">”””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">url</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span> <span class="s">&quot;https://twitter.com//&quot;</span> <span class="o">+</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span> <span class="n">url</span> <span class="p">)</span>
</span><span class='line'><span class="n">url</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">page</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="s">&quot;class&quot;</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">attrs</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>         <span class="p">(</span><span class="s">&quot;ProfileTweet-text&quot;</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;class&quot;</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'><span class="n">links</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;href&quot;</span><span class="p">]</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">page</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="s">&quot;class&quot;</span> <span class="ow">in</span> <span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>         <span class="p">(</span><span class="s">&quot;ProfileTweet-timestamp&quot;</span> <span class="ow">in</span> <span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&quot;class&quot;</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">links</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Let us try it on <a href="https://twitter.com/JohnDCook">John D. Cook</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="n">get_tweets</span><span class="p">(</span><span class="err">“</span><span class="n">JohnDCook</span><span class="err">”</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c"># John’s lattest tweet</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(u”Data cleaning code cannot be clean. It’s a sort of sin eater.”,
</span><span class='line'>  ‘/StatFact/status/492753200190341120’)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As an application, here is a script that watches my (useless) Twitter page every 20 seconds, and each time I tweet something like <code>cmd: my_command</code> it executes <code>my_command</code> in a terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">old_tweets</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># tweets that have already been read</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">tweets</span> <span class="o">=</span> <span class="p">[</span><span class="n">tweet</span> <span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">get_tweets</span><span class="p">(</span><span class="err">“</span><span class="n">Zulko___</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">tweet</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">old_tweets</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">link</span><span class="p">)</span> <span class="ow">in</span> <span class="n">tweets</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="err">“</span><span class="n">cmd</span><span class="p">:</span> <span class="err">“</span><span class="p">):</span>
</span><span class='line'>            <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="mi">5</span><span class="p">:],</span> <span class="n">shell</span><span class="o">=</span><span class="err">”</span><span class="bp">True</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="n">old_tweets</span> <span class="o">+=</span> <span class="n">tweets</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="c"># wait 20 seconds</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can now tweet-control, from my smartphone, any computer that is running this script. If I tweet <code>cmd: firefox</code> the computer will open firefox, if I tweet <code>cmd: echo "Hello"</code> it will print Hello in the terminal, etc.</p>

<h2 id="introducing-twittcher">Introducing Twittcher</h2>

<p>If you want more, I wrote <a href="https://github.com/Zulko/twittcher">Twittcher</a>, a small Python module which doesn’t depend on the Twitter API, to make bots that watch search results or user pages and react to the tweets they find.</p>

<p>For instance this script checks the search results for <em>chocolate milk</em> every 20 seconds, and sends all the new tweets (with date, username, and link) to my mail box.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">twittcher</span> <span class="kn">import</span> <span class="n">TweetSender</span><span class="p">,</span> <span class="n">SearchWatcher</span>
</span><span class='line'><span class="n">sender</span> <span class="o">=</span> <span class="n">TweetSender</span><span class="p">(</span><span class="n">smtp</span><span class="o">=</span><span class="err">”</span><span class="n">smtp</span><span class="o">.</span><span class="n">gmail</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">587</span><span class="p">,</span> <span class="c"># use gmail smtp</span>
</span><span class='line'>                     <span class="n">login</span><span class="o">=</span><span class="err">”</span><span class="n">tintin</span><span class="o">.</span><span class="n">zulko</span><span class="nd">@gmail.com</span><span class="err">”</span><span class="p">,</span> <span class="c"># gmail login</span>
</span><span class='line'>                     <span class="n">password</span><span class="o">=</span><span class="err">”</span><span class="n">fibo112358</span><span class="err">”</span><span class="p">,</span> <span class="c"># be nice, don’t try.</span>
</span><span class='line'>                     <span class="n">to_addrs</span><span class="o">=</span><span class="err">”</span><span class="n">tintin</span><span class="o">.</span><span class="n">zulko</span><span class="nd">@gmail.com</span><span class="err">”</span><span class="p">,</span> <span class="c"># where to send</span>
</span><span class='line'>                     <span class="n">sender_id</span> <span class="o">=</span> <span class="err">“</span><span class="n">chocolate</span> <span class="n">milk</span><span class="err">”</span><span class="p">)</span> <span class="c"># appears in ‘Subject’</span>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="n">SearchWatcher</span><span class="p">(</span><span class="err">“</span><span class="n">chocolate</span> <span class="n">milk</span><span class="err">”</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">sender</span><span class="o">.</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">watch_every</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="c"># check every 20s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just run that script all day on your computer (or rather on your <a href="http://www.raspberrypi.org/">Raspberry Pi</a>) and you will be updated every time someone drinks chocolate milk and feels the urge to tweet about it (which is very often).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Soccer Highlights Compilations with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/07/04/automatic-soccer-highlights-compilations-with-python/"/>
    <updated>2014-07-04T20:36:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/07/04/automatic-soccer-highlights-compilations-with-python</id>
    <content type="html"><![CDATA[<p><em>Python and soccer… who knew ?</em></p>

<!-- more -->

<p>In this post we will make a video summary of <a href="https://www.youtube.com/watch?v=rPEd-h8DdRI">this soccer game</a>, using the fact that supporters (and commentators) tend to be louder when something interesting happens.</p>

<p>The next lines open the video file with Python and compute the audio volume of each second of the match:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span> <span class="c"># for numerical operations</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="n">VideoFileClip</span><span class="p">,</span> <span class="n">concatenate</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">soccer_game</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">cut</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">clip</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_soundarray</span><span class="p">(</span><span class="n">fps</span><span class="o">=</span><span class="mi">22000</span><span class="p">)</span>
</span><span class='line'><span class="n">volume</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">array</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(((</span><span class="mf">1.0</span><span class="o">*</span><span class="n">array</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</span><span class='line'><span class="n">volumes</span> <span class="o">=</span> <span class="p">[</span><span class="n">volume</span><span class="p">(</span><span class="n">cut</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">clip</span><span class="o">.</span><span class="n">duration</span><span class="o">-</span><span class="mi">1</span><span class="p">))]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we plot the obtained volumes we see that each goal is followed by a few seconds of loudness:</p>

<p><img class="center" src="/images/soccer_highlights/goals.png"></p>

<p>It is much clearer if we compute the average volumes over periods of 10 seconds:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">averaged_volumes</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">sum</span><span class="p">(</span><span class="n">volumes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="p">])</span><span class="o">/</span><span class="mi">10</span>
</span><span class='line'>                             <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">volumes</span><span class="p">)</span><span class="o">-</span><span class="mi">10</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="/images/soccer_highlights/peaks.png"></p>

<p>The five higher peaks in the above graph give us the times of the five goals of the game, but other peaks may also indicate interesting events. In the next lines, we select the times of the 10% highest peaks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">increases</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">diff</span><span class="p">(</span><span class="n">averaged_volumes</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">decreases</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">diff</span><span class="p">(</span><span class="n">averaged_volumes</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">peaks_times</span> <span class="o">=</span> <span class="p">(</span><span class="n">increases</span> <span class="o">*</span> <span class="n">decreases</span><span class="p">)</span><span class="o">.</span><span class="n">nonzero</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">peaks_vols</span> <span class="o">=</span> <span class="n">averaged_volumes</span><span class="p">[</span><span class="n">peaks_times</span><span class="p">]</span>
</span><span class='line'><span class="n">peaks_times</span> <span class="o">=</span> <span class="n">peaks_times</span><span class="p">[</span><span class="n">peaks_vols</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">peaks_vols</span><span class="p">,</span><span class="mi">90</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As a refinement, we regroup the times that are less than one minute apart, as they certainly correspond to the same event:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">final_times</span><span class="o">=</span><span class="p">[</span><span class="n">peaks_times</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
</span><span class='line'><span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">peaks_times</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">-</span> <span class="n">final_times</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">60</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">averaged_volumes</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">averaged_volumes</span><span class="p">[</span><span class="n">final_times</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]:</span>
</span><span class='line'>            <span class="n">final_times</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">final_times</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now <code>final_times</code> contains the times (in seconds) of 21 events, from which we can cut our video. For each event we will start five seconds before its time and stop five seconds after :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">final</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">clip</span><span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nb">min</span><span class="p">(</span><span class="n">t</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span> <span class="n">clip</span><span class="o">.</span><span class="n">duration</span><span class="p">))</span>
</span><span class='line'>                     <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_times</span><span class="p">])</span>
</span><span class='line'><span class="n">final</span><span class="o">.</span><span class="n">to_videofile</span><span class="p">(</span><span class="err">‘</span><span class="n">soccer_cuts</span><span class="o">.</span><span class="n">mp4</span><span class="err">’</span><span class="p">)</span> <span class="c"># low quality is the default</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="results">Results</h2>

<p>We obtain the following 3:30 <a href="http://youtu.be/zJtWPFX2bA0">video summary</a> (sorry for the external links, these videos can’t be embedded).</p>

<p>Nicely enough, the same 25 lines of code can be used to cut <a href="http://youtu.be/T2zTZ4bEVmQ">this other summary</a> of <a href="https://www.youtube.com/watch?v=neYtV3nY7jE">this other match</a>. The limitations of the method appear in <a href="http://youtu.be/zAIFwa9e0Ww">yet another summary</a> which only captured 8 out of the 9 goals of the match, one or two being badly cut. The algorithm can be confused by broadcasters which make lots of replays or lower the sound of the crowd after goals, and it may miscut some goals on penalties, because the crowd starts whistling long before the shoot. So large-scale applications would require a less naive model.</p>

<p>If you want to try it at home, here is <a href="https://gist.github.com/Zulko/5cb8f880ef79b2db3c63">the whole script</a>. It would be interesting to see how the method works on other sports, or how it could be generalized to other uses, like spotting action scenes in movies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viennese Mazes: what they are, and how to make one]]></title>
    <link href="http://Zulko.github.io/blog/2014/04/27/viennese-mazes-what-they-are/"/>
    <updated>2014-04-27T23:34:00+02:00</updated>
    <id>http://Zulko.github.io/blog/2014/04/27/viennese-mazes-what-they-are</id>
    <content type="html"><![CDATA[<p><em>In this post I present an original concept of labyrinths and explain how they can be programmatically generated.</em></p>

<!-- more -->

<p>For some time now I have been designing labyrinths based on traffic lights, like this one:</p>

<p><img class="center" src="/images/vmazes/viennese_maze.jpeg" width="550"></p>

<p>I call these <em>Viennese mazes</em> (long story) and since I couldn’t find anything similar on the Web, I assume that this is something new. Here are <a href="https://i.imgur.com/j2gWurM.jpg">some more</a> with other shapes, and <a href="https://i.imgur.com/bReTSfN.png">their solutions</a>.</p>

<p>These mazes are very difficult to design by hand, and this post is about how to ask your computer to do the work for you. We will see what a <em>good</em> Viennese maze is made of, and how to generate one using a simple evolutionary algorithm.</p>

<h2 id="viennese-mazes-are-a-special-kind-of-normal-mazes">Viennese mazes are (a special kind of) normal mazes</h2>

<p>My first intention with Viennese mazes was to make dynamic mazes, with <em>moving walls</em>. But under each Viennese maze there is actually a standard, old-school labyrinth.</p>

<p>To see this we must think in terms of <em>states</em>. A state describes where you are in the maze, and determines where you can go from there. In the maze above, state (c,1,a) means “I am in (c), I have passed 1 traffic light until then, and just before that I was in (a)”. From this state you cannot reach (d) as the light in this street has turned red, and you cannot reach (a) because you just came from here. But you can move to (b) or (g), that is, to state (b,2,c) or state (g,2,c). Note that states such as (c,1,a), (c,4,a), and (c,7,a) are actually the same state, because afer three moves all traffic lights come back to their original position. So there will always be a finite number of states in a Viennese maze.</p>

<p>If we draw a map of all (reachable) states and their connexions we obtain the following <em>states graph</em> :</p>

<p><img class="center" src="/images/vmazes/graph.jpeg"></p>

<p>The green node marks the starting point, while the blue node is a reunion of all states corresponding to the goal (m). The nodes on the $i$-th line from the top can be reached in $i$ moves but no less, thick lines go downwards and thin lines go upwards.</p>

<p>This graph looks like a classical labyrinth, with crossroads, dead ends, loops… at one glance it gives an idea of the complexity and interestingness of the original Viennese maze. Therefore, we will consider that a good Viennese maze is a maze whose states graph makes a good labyrinth.</p>

<h2 id="what-makes-a-good-labyrinth-">What makes a good labyrinth ?</h2>

<p>Here is an illustration of a few criteria which make a labyrinth insteresting :</p>

<p><img class="center" src="/images/vmazes/classical_maze.jpeg" width="450"></p>

<ol>
  <li><strong>There must be a unique solution, the longer the better.</strong> In Viennese mazes It will be difficult to avoid loops like the one in <em>a</em>, where you leave the right track at some point and join it back later at exactly the same position. But there should be a unique mandatory path to the goal (in red in the drawing).</li>
  <li><strong>There must be plenty of loops and dead ends</strong>, like in <em>b</em> and <em>c</em>, and also links between false paths (like <em>d</em>), all of these preferally early on the path.</li>
  <li><strong>The maze should be difficult to solve backwards</strong>, by having false ending paths (like <em>e</em>). This criterion also tends to produce nicer-looking Viennese mazes, with a better balance of the different colors.</li>
</ol>

<p>For the computer to be able to compare mazes and identify the most interesting ones we define scores <script type="math/tex"> S_1, S_2, S_3 </script> which will quantify how well each of the criteria 1,2,3, are fullfilled by a given maze. For instance</p>

<script type="math/tex; mode=display">
S_1(maze) =
\begin{cases}
0, \,\, \mbox{if there is no solution,} \\
1, \,\, \mbox{if there are multiple solutions,} \\
L, \,\, \mbox{if there is a unique solution, of length $L$.}
\end{cases}
</script>

<p>The final score of a Viennese maze is given by the product</p>

<script type="math/tex; mode=display"> S = S_1^{c_1} \cdot S_2^{c_2} \cdot S_3^{c_3} </script>

<p>where the exponents <script type="math/tex"> c_1, c_2, c_3 </script> reflect the relative importance that we decide to attach to each criterion.</p>

<p>Evaluating this score on the states graph of a Viennese maze is easy: the existence and uniqueness of a solution can be checked using a simple-path-finding algorithm. Dead-ends are simply the nodes of the states graph with no descendents, and the loops of the maze correspond to the thin edges. The states graph itself and its different lines of nodes can be easily computed using Dijkstra’s efficient algorithm to find minimal paths between the start and the different states. The current Python implementation, relying on the Networkx package, enable to evaluate on the order of 1000 mazes per second (depending on their complexity).</p>

<h2 id="lets-grow-mazes-">Let’s grow mazes !</h2>

<p>Now that we have defined how to score a Viennese maze, we will provide the computer with an uncolored canvas, and we will ask for a <em>coloring</em> (initial color of each traffic light) of this canvas that produces the best score possible :</p>

<p><img class="center" src="/images/vmazes/canvas.jpeg" width="250"></p>

<p>There are $3^{24}$ (almost three hundred billion) ways of coloring the 24 streets on this canvas, and considering all of them would be too long. But a great many of these colorings make interesting mazes, so we can just look semi-randomly for some of these.</p>

<p>An effective way to do so is to first colorize the canvas in a completely random way, then improve the coloring by repeating the following steps:</p>

<ol>
  <li>Create a new maze by randomly changing just a few colors of the current maze.</li>
  <li>Compute the score of this new maze.</li>
  <li>If the new maze scores lower than the current maze, dump it, otherwise it replaces the current maze. Go back to step 1.</li>
</ol>

<p>Here is a maze being optimized following this mutation/selection procedure (over 24000 mazes were generated, only the successive improvements are shown):</p>

<p><img class="center" src="http://i.imgur.com/yc1lwgh.gif" title="‘hosted on imgur’" ></p>

<p>This algorithm can be refined using annealing (in which you first evaluate many different mazes before refining the search around the best one), or any fancier search strategy such as genetic algorithms, ant colonies… What works best is still an open question.</p>

<h2 id="try-it-at-home">Try it at home</h2>

<p>If you want to try and make your own Viennese mazes (using for instance you district as a canvas), I wrote a Python package called <a href="http://zulko.github.io/vmfactory/">vmfactory</a> which implements all the steps discussed above. It can generate two variants of Viennese mazes: one where passing through the same light twice in a row is forbidden, and one where it isn’t (algorithmically, the only difference is the way the states graph is computed).</p>

<p>In the following example, we generate a squared canvas, we initialize a maze with random colors, optimize it, and generate a report (maze/graph/solution): </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">vmfactory</span> <span class="kn">import</span> <span class="n">Vmaze_NHT</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">vmfactory.canvas</span> <span class="kn">import</span> <span class="n">squares_grid</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">canvas</span> <span class="o">=</span> <span class="n">squares_grid</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c"># nodes will be numbered 0..15</span>
</span><span class='line'><span class="c"># NHT means no half-turns (can’t pass a light twice in a row) </span>
</span><span class='line'><span class="n">maze</span> <span class="o">=</span> <span class="n">Vmaze_NHT</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">goal</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="n">maze</span><span class="o">.</span><span class="n">colorize</span><span class="p">(</span> <span class="n">maze</span><span class="o">.</span><span class="n">random_colors</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'><span class="n">maze</span><span class="o">.</span><span class="n">anneal</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span> <span class="c"># optimize the maze</span>
</span><span class='line'><span class="n">maze</span><span class="o">.</span><span class="n">make_report</span><span class="p">()</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="err">‘</span><span class="n">myreport</span><span class="o">.</span><span class="n">png</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="/images/vmazes/report.jpeg" width="550"></p>

<p>The package is based on Networkx, Numpy and Matplotlib. The code is rather short (most of it serves to draw fancy graphs !), and modular : you can easily change the rules, change the way the score is computed, change the optimization procedure, or the way the reports are drawn.</p>

<p>Thank you for reading until there, and happy mazing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making GIFs from Video Files with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/"/>
    <updated>2014-01-23T22:08:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python</id>
    <content type="html"><![CDATA[<p><em>Sometimes producing a good animated GIF requires a few advanced tweaks, for which scripting can help. So I added a GIF export feature to MoviePy, a Python package originally written for video editing.</em></p>

<!-- more -->

<p>For this demo we will make a few GIFs out of this trailer:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/2Jw-AeaU5WI "></iframe></div></p>

<h2 id="converting-a-video-excerpt-into-a-gif">Converting a video excerpt into a GIF</h2>

<p>In what follows we import <a href="http://zulko.github.io/moviepy/">MoviePy</a>, we open the video file, we select the part between 1’22.65 (1 minute 22.65 seconds) and 1’23.2, reduce its size (to 30% of the original) and save it as a GIF:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">22.65</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">23.2</span><span class="p">))</span>
</span><span class='line'>        <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.3</span><span class="p">))</span>
</span><span class='line'><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">use_your_head</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/F1oOtnP.gif" title="‘Use Your Head - Hosted by imgur’" ></p>

<h2 id="cropping-the-image">Cropping the image</h2>

<p>For my next GIF I will only keep the center of the screen. If you intend to use MoviePy, note that you can preview a clip with <code>clip.preview()</code>. During the preview clicking on a pixel will print its position, which is convenient for cropping with precision.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">kris_sven</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">13.4</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">13.9</span><span class="p">))</span>
</span><span class='line'>             <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">145</span><span class="p">,</span><span class="n">x2</span><span class="o">=</span><span class="mi">400</span><span class="p">))</span> <span class="c"># remove left-right borders</span>
</span><span class='line'><span class="n">kris_sven</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">“</span><span class="n">kris_sven</span><span class="o">.</span><span class="n">gif</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/CFFYEpd.gif" title="‘Kris and Sven - Hosted by imgur’" ></p>

<h2 id="freezing-a-region">Freezing a region</h2>

<p>Many GIF makers like to <em>freeze</em> some parts of the GIF to reduce the file size and/or focus the attention on one part of the animation.</p>

<p>In the next GIF we freeze the left part of the clip. To do so we  take a snapshot of
the clip at t=0.2 seconds, we crop this snapshot to only keep the left half, then we make a composite clip which superimposes the cropped snapshot on the original clip:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">anna_olaf</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mf">87.9</span><span class="p">,</span><span class="mf">88.1</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span> <span class="c"># Play at half speed</span>
</span><span class='line'>             <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">4</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">snapshot</span> <span class="o">=</span> <span class="p">(</span><span class="n">anna_olaf</span>
</span><span class='line'>            <span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">x2</span><span class="o">=</span> <span class="n">anna_olaf</span><span class="o">.</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c"># remove right half</span>
</span><span class='line'>            <span class="o">.</span><span class="n">to_ImageClip</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span> <span class="c"># snapshot of the clip at t=0.2s</span>
</span><span class='line'>            <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">anna_olaf</span><span class="o">.</span><span class="n">duration</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span> <span class="o">=</span> <span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">anna_olaf</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">])</span>
</span><span class='line'><span class="n">composition</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">anna_olaf</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/Fc9Qc5f.gif" title="‘Anna and Olaf - Hosted by imgur’" ></p>

<h2 id="freezing-a-more-complicated-region">Freezing a more complicated region</h2>

<p>This time we will apply a custom mask to the snapshot to specify where it will be transparent (and let the animated part appear)
.
<img class="center" src="/images/gifs/mask.jpeg" title="‘That’s what a mask is for.’" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">moviepy.video.tools.drawing</span> <span class="kn">as</span> <span class="nn">dw</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">anna_kris</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>             <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">38.15</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">38.5</span><span class="p">))</span>
</span><span class='line'>             <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;coordinates-p1p2-define-the-edges-of-the-mask&quot;</span><span class="o">&gt;</span><span class="n">coordinates</span> <span class="n">p1</span><span class="p">,</span><span class="n">p2</span> <span class="n">define</span> <span class="n">the</span> <span class="n">edges</span> <span class="n">of</span> <span class="n">the</span> <span class="n">mask</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mask</span> <span class="o">=</span> <span class="n">dw</span><span class="o">.</span><span class="n">color_split</span><span class="p">(</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="mi">445</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="mi">275</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">grad_width</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span> <span class="c"># blur the mask’s edges&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">snapshot</span> <span class="o">=</span> <span class="p">(</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">to_ImageClip</span><span class="p">()</span>
</span><span class='line'>            <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">duration</span><span class="p">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">set_mask</span><span class="p">(</span><span class="n">ImageClip</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="n">ismask</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span> <span class="o">=</span> <span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">anna_kris</span><span class="p">,</span><span class="n">snapshot</span><span class="p">])</span><span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'><span class="c"># ‘fuzz’ (0-100) below is for gif compression</span>
</span><span class='line'><span class="n">composition</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">anna_kris</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/SBHkNqt.gif" title="‘Anna and Olaf - Hosted by imgur’" ></p>

<h2 id="time-symetrization">Time-symetrization</h2>

<p>Surely you have noticed that in the previous GIFs, the end did not always look like the beginning. As a consequence, you could see a disruption every time the animation was restarted. A way to avoid this is to time-symetrize the clip, i.e. to make the clip play once forwards, then once backwards. This way the <em>end</em> of the clip really <em>is</em> the beginning of the clip. This creates a GIF that can loop fluidly, without a real beginning or end.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">time_symetrize</span><span class="p">(</span><span class="n">clip</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Returns</span> <span class="n">the</span> <span class="n">clip</span> <span class="n">played</span> <span class="n">forwards</span> <span class="n">then</span> <span class="n">backwards</span><span class="o">.</span> <span class="n">In</span> <span class="n">case</span>
</span><span class='line'>    <span class="n">you</span> <span class="n">are</span> <span class="n">wondering</span><span class="p">,</span> <span class="n">vfx</span> <span class="p">(</span><span class="n">short</span> <span class="k">for</span> <span class="n">Video</span> <span class="n">FX</span><span class="p">)</span> <span class="ow">is</span> <span class="n">loaded</span> <span class="n">by</span>
</span><span class='line'>   <span class="err"> »</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="o">*</span> <span class="err">“””</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">clip</span><span class="p">,</span> <span class="n">clip</span><span class="o">.</span><span class="n">fx</span><span class="p">(</span> <span class="n">vfx</span><span class="o">.</span><span class="n">time_mirror</span> <span class="p">)])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mf">36.5</span><span class="p">,</span><span class="mf">36.9</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">189</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">433</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">fx</span><span class="p">(</span> <span class="n">time_symetrize</span> <span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">clip</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">sven</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/fuqLsRG.gif" title="‘Sven - hosted on Imgur’" ></p>

<p>Ok, this might be a bad example of time symetrization,it makes the snow flakes go upwards in the second half of the animation.</p>

<h2 id="adding-some-text">Adding some text</h2>

<p>In the next GIF there will be a text clip superimposed on the video clip.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">olaf</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mf">21.6</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mf">22.1</span><span class="p">))</span>
</span><span class='line'>        <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">fx</span><span class="p">(</span> <span class="n">time_symetrize</span> <span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;many-options-are-available-for-the-text-requires-imagemagick&quot;</span><span class="o">&gt;</span><span class="n">Many</span> <span class="n">options</span> <span class="n">are</span> <span class="n">available</span> <span class="k">for</span> <span class="n">the</span> <span class="n">text</span> <span class="p">(</span><span class="n">requires</span> <span class="n">ImageMagick</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="n">TextClip</span><span class="p">(</span><span class="err">“</span><span class="n">In</span> <span class="n">my</span> <span class="n">nightmares</span>\<span class="n">nI</span> <span class="n">see</span> <span class="n">rabbits</span><span class="o">.</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">fontsize</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="err">’</span><span class="n">white</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">font</span><span class="o">=</span><span class="err">’</span><span class="n">Amiri</span><span class="o">-</span><span class="n">Bold</span><span class="err">’</span><span class="p">,</span> <span class="n">interline</span><span class="o">=-</span><span class="mi">25</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">set_pos</span><span class="p">((</span><span class="mi">20</span><span class="p">,</span><span class="mi">190</span><span class="p">))</span>
</span><span class='line'>        <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">olaf</span><span class="o">.</span><span class="n">duration</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span> <span class="o">=</span> <span class="n">CompositeVideoClip</span><span class="p">(</span> <span class="p">[</span><span class="n">olaf</span><span class="p">,</span> <span class="n">text</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'><span class="n">composition</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">olaf</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/ZQzgNo6.gif" title="‘Olaf - Hosted by imgur’" ></p>

<h2 id="making-the-gif-loopable">Making the gif loopable</h2>

<p>The following GIF features a lot of snow falling. Therefore it cannot be made loopable using time-symetrization (or you will snow floating upwards !). So we will make this animation loopable by having the beginning of the animation appear progressively (<em>fade in</em>) just before the end of the clip. The montage here is a little complicated, I cannot explain it better than with this picture:</p>

<p><img class="center" src="/images/gifs/castle_loopable.jpeg" title="‘I hope it’s clear !’ 400" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">castle</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">./</span><span class="n">frozen_trailer</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mf">22.8</span><span class="p">,</span><span class="mf">23.2</span><span class="p">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">speedx</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>          <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">4</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">d</span> <span class="o">=</span> <span class="n">castle</span><span class="o">.</span><span class="n">duration</span>
</span><span class='line'><span class="n">castle</span> <span class="o">=</span> <span class="n">castle</span><span class="o">.</span><span class="n">crossfadein</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span> <span class="o">=</span> <span class="p">(</span><span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">castle</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">castle</span><span class="o">.</span><span class="n">set_start</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">castle</span><span class="o">.</span><span class="n">set_start</span><span class="p">(</span><span class="n">d</span><span class="p">)])</span>
</span><span class='line'>               <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">castle</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">fuzz</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/VnoRpdq.gif" title="‘Disney Castle - Hosted by Imgur’" ></p>

<h2 id="another-example-of-a-gif-made-loopable">Another example of a GIF made loopable</h2>

<p>The next clip (from the movie <em>Charade</em>) was almost loopable: you can see Carry Grant smiling, then making a funny face, then coming back to normal. The problem is that at the end of the excerpt Cary is not exactly in the same position, and he is not smiling as he was at the beginning. To correct this, we take a snapshot of the first frame and we make it appear progressively at the end. This seems to do the trick.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">carry</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="o">../</span><span class="n">videos</span><span class="o">/</span><span class="n">charade</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">,</span> <span class="n">audio</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>         <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span><span class="mf">18.3</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span><span class="mf">20.6</span><span class="p">))</span>
</span><span class='line'>         <span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">102</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">297</span><span class="p">,</span> <span class="n">y2</span><span class="o">=</span><span class="mi">202</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">d</span> <span class="o">=</span> <span class="n">carry</span><span class="o">.</span><span class="n">duration</span>
</span><span class='line'><span class="n">snapshot</span> <span class="o">=</span> <span class="p">(</span><span class="n">carry</span><span class="o">.</span><span class="n">to_ImageClip</span><span class="p">()</span>
</span><span class='line'>            <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">crossfadein</span><span class="p">(</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>            <span class="o">.</span><span class="n">set_start</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">d</span><span class="o">/</span><span class="mi">6</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">composition</span> <span class="o">=</span> <span class="n">CompositeVideoClip</span><span class="p">([</span><span class="n">carry</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">])</span>
</span><span class='line'><span class="n">composition</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">carry</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="n">carry</span><span class="o">.</span><span class="n">fps</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="http://i.imgur.com/k1sz49h.gif" title="‘Carry Grant in Charade - Hosted by Imgur’" ></p>

<h2 id="big-finish-background-removal">Big finish: background removal</h2>

<p>Let us dive further into the scripting madness: we consider this video around 2’16 (<em>edit: not the video I originally used, it was removed by the Youtube user, I add to find another link</em>):</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Nh11A41klL4 "></iframe></div></p>

<p>And we will remove the background to make this gif (with transparent background):</p>

<p><img class="center" src="http://i.imgur.com/Fo2BxBK.gif" title="‘PigsPolka - Hosted by imgur’" ></p>

<p>The main difficulty was to find what the background of the scene is. To do so, the script gathers a few images in which the little pigs are are different positions (so that every part part of the background is visible on at least several (actually most) of the slides, then it takes the pixel-per-pixel median of these pictures, which gives the background.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Requires Scikit Images installed</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.morphology</span> <span class="kn">as</span> <span class="nn">skm</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">skimage.filter</span> <span class="kn">as</span> <span class="nn">skf</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">moviepy.editor</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;load-the-clip&quot;</span><span class="o">&gt;</span><span class="n">LOAD</span> <span class="n">THE</span> <span class="n">CLIP</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pigsPolka</span> <span class="o">=</span>  <span class="p">(</span><span class="n">VideoFileClip</span><span class="p">(</span><span class="err">“</span><span class="n">pigs_in_a_polka</span><span class="o">.</span><span class="n">mp4</span><span class="err">”</span><span class="p">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">subclip</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mf">16.85</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">35</span><span class="p">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>              <span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="n">x1</span><span class="o">=</span><span class="mi">140</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="mi">41</span><span class="p">,</span> <span class="n">x2</span><span class="o">=</span><span class="mi">454</span><span class="p">,</span> <span class="n">y2</span><span class="o">=</span><span class="mi">314</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;compute-the-background&quot;</span><span class="o">&gt;</span><span class="n">COMPUTE</span> <span class="n">THE</span> <span class="n">BACKGROUND</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c"># There is no single frame showing the background only (there</span>
</span><span class='line'><span class="c"># is always a little pig in the screen) so we use the median of</span>
</span><span class='line'><span class="c"># several carefully chosen frames to reconstitute the background.</span>
</span><span class='line'><span class="c"># I must have spent half an hour to find the right set of frames.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">times</span> <span class="o">=</span> <span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">2.3</span><span class="p">,</span><span class="mf">4.2</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span><span class="o">+</span>
</span><span class='line'>         <span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">6.0</span><span class="p">,</span><span class="mf">7.1</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span><span class="o">+</span>
</span><span class='line'>         <span class="mi">8</span><span class="o">*</span><span class="p">[</span><span class="mf">6.2</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frames_bg</span> <span class="o">=</span> <span class="p">[</span><span class="n">pigsPolka</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">times</span><span class="p">]</span>
</span><span class='line'><span class="n">background</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">percentile</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">frames_bg</span><span class="p">),</span> <span class="mi">50</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;mask-generation&quot;</span><span class="o">&gt;</span><span class="n">MASK</span> <span class="n">GENERATION</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_mask_frame</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span> <span class="n">Computes</span> <span class="n">the</span> <span class="n">mask</span> <span class="k">for</span> <span class="n">the</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">time</span> <span class="n">t</span> <span class="err">“””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># THRESHOLD THE PIXEL-TO-PIXEL DIFFERENCE</span>
</span><span class='line'><span class="c"># BETWEEN THE FRAME AND THE BACKGROUND</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">pigsPolka</span><span class="o">.</span><span class="n">get_frame</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="n">mask</span> <span class="o">=</span> <span class="p">((</span><span class="n">im</span><span class="o">-</span><span class="n">background</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1500</span>
</span><span class='line'>
</span><span class='line'><span class="c"># REMOVE SMALL OBJECTS</span>
</span><span class='line'><span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">remove_small_objects</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># REMOVE SMALL HOLES (BY DILATIATION/EROSION)</span>
</span><span class='line'><span class="n">selem</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">binary_dilation</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span><span class="n">selem</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mask</span> <span class="o">=</span> <span class="n">skm</span><span class="o">.</span><span class="n">binary_erosion</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span><span class="n">selem</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># BLUR THE MASK A LITTLE</span>
</span><span class='line'><span class="n">mask</span> <span class="o">=</span> <span class="n">skf</span><span class="o">.</span><span class="n">gaussian_filter</span><span class="p">(</span><span class="n">mask</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">),</span><span class="mf">1.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">mask</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">VideoClip</span><span class="p">(</span><span class="n">ismask</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">get_frame</span><span class="o">=</span><span class="n">get_mask_frame</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">set_duration</span><span class="p">(</span><span class="n">pigsPolka</span><span class="o">.</span><span class="n">duration</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;last-effects-and-gif-generation&quot;</span><span class="o">&gt;</span><span class="n">LAST</span> <span class="n">EFFECTS</span> <span class="n">AND</span> <span class="n">GIF</span> <span class="n">GENERATION</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">final</span> <span class="o">=</span> <span class="p">(</span><span class="n">pigsPolka</span><span class="o">.</span><span class="n">set_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
</span><span class='line'>         <span class="o">.</span><span class="n">subclip</span><span class="p">(</span><span class="mf">12.95</span><span class="p">,</span><span class="mf">15.9</span><span class="p">)</span>
</span><span class='line'>         <span class="o">.</span><span class="n">fx</span><span class="p">(</span><span class="n">vfx</span><span class="o">.</span><span class="n">blackwhite</span><span class="p">)</span> <span class="c"># black &amp;amp; white effect !&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">final</span><span class="o">.</span><span class="n">write_gif</span><span class="p">(</span><span class="err">‘</span><span class="n">pigs_polka</span><span class="o">.</span><span class="n">gif</span><span class="err">’</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">dispose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fuzz</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
