<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GIFs | __del__( self )]]></title>
  <link href="http://Zulko.github.io/blog/categories/gifs/atom.xml" rel="self"/>
  <link href="http://Zulko.github.io/"/>
  <updated>2014-06-09T14:19:10+02:00</updated>
  <id>http://Zulko.github.io/</id>
  <author>
    <name><![CDATA[Zulko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making GIFs from Video Files with Python]]></title>
    <link href="http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/"/>
    <updated>2014-01-23T22:08:00+01:00</updated>
    <id>http://Zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python</id>
    <content type="html"><![CDATA[<p><em>Sometimes producing a good animated GIF requires a few advanced tweaks, for which scripting can help. So I added a GIF export feature to MoviePy, a Python package originally written for video editing.</em></p>

<!-- more -->

<p>For this demo we will make a few GIFs out of this trailer:</p>

<p>{% youtube 2Jw-AeaU5WI %}</p>

<h2 id="converting-a-video-excerpt-into-a-gif">Converting a video excerpt into a GIF</h2>

<p>In what follows we import <a href="http://zulko.github.io/moviepy/">MoviePy</a>, we open the video file, we select the part between 1’22.65 (1 minute 22.65 seconds) and 1’23.2, reduce its size (to 30% of the original) and save it as a GIF:</p>

<p>{% codeblock lang:python %}
from moviepy.editor import *</p>

<p>VideoFileClip(“./frozen_trailer.mp4”).\
              subclip((1,22.65),(1,23.2)).\
              resize(0.3).\
              to_gif(“use_your_head.gif”)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/F1oOtnP.gif ‘Use Your Head - Hosted by imgur’ %}</p>

<h2 id="cropping-the-image">Cropping the image</h2>

<p>For my next GIF I will only keep the center of the screen. If you intend to use MoviePy, note that you can preview a clip with <code>clip.preview()</code>. During the preview clicking on a pixel will print its position, which is convenient for cropping with precision.</p>

<p>{% codeblock lang:python %}
kris_sven = VideoFileClip(“./frozen_trailer.mp4”).\
                   subclip((1,13.4),(1,13.9)).\
                   resize(0.5).\
                   crop(x1=145,x2=400).\ # remove left-right borders
                   to_gif(“kris_sven.gif”)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/CFFYEpd.gif ‘Kris and Sven - Hosted by imgur’ %}</p>

<h2 id="freezing-a-region">Freezing a region</h2>

<p>Many GIF makers like to <em>freeze</em> some parts of the GIF to reduce the file size and/or focus the attention on one part of the animation.</p>

<p>In the next GIF we freeze the left part of the clip. To do so we  take a snapshot of
the clip at t=0.2 seconds, we crop this snapshot to only keep the left half, then we make a composite clip which superimposes the cropped snapshot on the original clip:</p>

<p>{% codeblock lang:python %}
anna_olaf = VideoFileClip(“./frozen_trailer.mp4”).\
              subclip(87.9,88.1).\
              speedx(0.5).\ # Play at half speed
              resize(.4)</p>

<p>snapshot = anna_olaf.\
              crop(x2= anna_olaf.w/2).\ # remove right half
              to_ImageClip(0.2).\ # snapshot of the clip at t=0.2s
              set_duration(anna_olaf.duration)</p>

<p>CompositeVideoClip([anna_olaf, snapshot]).\
    to_gif(‘anna_olaf.gif’, fps=15)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/Fc9Qc5f.gif ‘Anna and Olaf - Hosted by imgur’ %}</p>

<h2 id="freezing-a-more-complicated-region">Freezing a more complicated region</h2>

<p>This time we will apply a custom mask to the snapshot to specify where it will be transparent (and let the animated part appear)
.
{% img center /images/gifs/mask.jpeg ‘That’s what a mask is for.’ %}</p>

<p>{% codeblock lang:python %}
import moviepy.video.tools.drawing as dw</p>

<p>anna_kris = VideoFileClip(“./frozen_trailer.mp4”, audio=False).\
              subclip((1,38.15),(1,38.5)).\
              resize(.5)</p>

<h1 id="coordinates-p1p2-define-the-edges-of-the-mask">coordinates p1,p2 define the edges of the mask</h1>
<p>mask = dw.color_split(anna_kris.size,
                      p1=(445, 20), p2=(345, 275),
                      grad_width=5) # blur the mask’s edges</p>

<p>snapshot = anna_kris.to_ImageClip().\
                 set_duration(anna_kris.duration).\
                 set_mask(ImageClip(mask, ismask=True))</p>

<p>CompositeVideoClip([anna_kris,snapshot]).\
    speedx(0.2).\
    to_gif(‘anna_kris.gif’, fps=15, fuzz=3) # fuzz= GIF compression</p>

<p>{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/SBHkNqt.gif ‘Anna and Olaf - Hosted by imgur’ %}</p>

<h2 id="time-symetrization">Time-symetrization</h2>

<p>Surely you have noticed that in the previous GIFs, the end did not always look like the beginning. As a consequence, you could see a disruption every time the animation was restarted. A way to avoid this is to time-symetrize the clip, i.e. to make the clip play once forwards, then once backwards. This way the <em>end</em> of the clip really <em>is</em> the beginning of the clip. This creates a GIF that can loop fluidly, without a real beginning or end.</p>

<p>{% codeblock lang:python %}
def time_symetrize(clip):
    “”” Returns the clip played forwards then backwards. In case
    you are wondering, vfx (short for Video FX) is loaded by
    »&gt; from moviepy.editor import * “””
    return concatenate([clip, clip.fx( vfx.time_mirror )])</p>

<p>VideoFileClip(“./frozen_trailer.mp4”, audio=False).\
          subclip(36.5,36.9).\
          resize(0.5).\
          crop(x1=189, x2=433).\
          fx( time_symetrize ).\
          to_gif(‘sven.gif’, fps=15, fuzz=2)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/fuqLsRG.gif ‘Sven - hosted on Imgur’ %}</p>

<p>Ok, this might be a bad example of time symetrization,it makes the snow flakes go upwards in the second half of the animation.</p>

<h2 id="adding-some-text">Adding some text</h2>

<p>In the next GIF there will be a text clip superimposed on the video clip.</p>

<p>{% codeblock lang:python %}</p>

<p>olaf = VideoFileClip(“./frozen_trailer.mp4”, audio=False).\
              subclip((1,21.6),(1,22.1)).\
              resize(.5).\
              speedx(0.5).\
              fx( time_symetrize )</p>

<h1 id="many-options-are-available-for-the-text-requires-imagemagick">Many options are available for the text (requires ImageMagick)</h1>
<p>text = TextClip(“In my nightmares\nI see rabbits.”,
                fontsize=30, color=’white’,
                font=’Amiri-Bold’, interline=-25).\
            set_pos((20,190)).\
            set_duration(olaf.duration)</p>

<p>CompositeVideoClip( [olaf, text] ).\
    to_gif(‘olaf.gif’, fps=10, fuzz=2)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/ZQzgNo6.gif ‘Olaf - Hosted by imgur’ %}</p>

<h2 id="making-the-gif-loopable">Making the gif loopable</h2>

<p>The following GIF features a lot of snow falling. Therefore it cannot be made loopable using time-symetrization (or you will snow floating upwards !). So we will make this animation loopable by having the beginning of the animation appear progressively (<em>fade in</em>) just before the end of the clip. The montage here is a little complicated, I cannot explain it better than with this picture:</p>

<p>{% img center /images/gifs/castle_loopable.jpeg ‘I hope it’s clear !’ 400 %}</p>

<p>{% codeblock lang:python %}
castle = VideoFileClip(“./frozen_trailer.mp4”, audio=False).\
              subclip(22.8,23.2).\
              speedx(0.2).\
              resize(.4)</p>

<p>d = castle.duration
castle = castle.crossfadein(d/2)</p>

<p>CompositeVideoClip([castle,
                    castle.set_start(d/2),
                    castle.set_start(d)]).\
   subclip(d/2, 3*d/2).\
   to_gif(‘castle.gif’, fps=5,fuzz=5)
{% endcodeblock %}</p>

<p>{% img center http://i.imgur.com/VnoRpdq.gif ‘Disney Castle - Hosted by Imgur’ %}</p>

<h2 id="another-example-of-a-gif-made-loopable">Another example of a GIF made loopable</h2>

<p>The next clip (from the movie <em>Charade</em>) was almost loopable: you can see Carry Grant smiling, then making a funny face, then coming back to normal. The problem is that at the end of the excerpt Cary is not exactly in the same position, and he is not smiling as he was at the beginning. To correct this, we take a snapshot of the first frame and we make it appear progressively at the end. This seems to do the trick.</p>

<p>{% codeblock lang:python %}
carry = VideoFileClip(“../videos/charade.mp4”, audio=False).\
              subclip((1,51,18.3),(1,51,20.6)).\
              crop(x1=102, y1=2, x2=297, y2=202)</p>

<p>d = carry.duration
snapshot = carry.to_ImageClip().\
                  set_duration(d/6).\
                  crossfadein(d/6).\
                  set_start(5*d/6)</p>

<p>CompositeVideoClip([carry, snapshot]).\
    to_gif(‘carry.gif’, fps=carry.fps, fuzz=3)
{% endcodeblock %}</p>

<p>{% img center  http://i.imgur.com/k1sz49h.gif ‘Carry Grant in Charade - Hosted by Imgur’ %}</p>

<h2 id="big-finish-background-removal">Big finish: background removal</h2>

<p>Let us dive further into the scripting madness: we consider this video around 2’16 (<em>edit: not the video I originally used, it was removed by the Youtube user, I add to find another link</em>):</p>

<p>{% youtube Nh11A41klL4 %}</p>

<p>And we will remove the background to make this gif (with transparent background):</p>

<p>{% img center http://i.imgur.com/Fo2BxBK.gif ‘PigsPolka - Hosted by imgur’ %}</p>

<p>The main difficulty was to find what the background of the scene is. To do so, the script gathers a few images in which the little pigs are are different positions (so that every part part of the background is visible on at least several (actually most) of the slides, then it takes the pixel-per-pixel median of these pictures, which gives the background.</p>

<p>{% codeblock lang:python %}
# Requires Scikit Images installed
import numpy as np
import skimage.morphology as skm
import skimage.filter as skf</p>

<p>from moviepy.editor import *</p>

<h3 id="load-the-clip">LOAD THE CLIP</h3>

<p>pigsPolka =  VideoFileClip(“pigs_in_a_polka.mp4”).\
                 subclip((2,16.85),(2,35)).\
                 resize(.5).\
                 crop(x1=140, y1=41, x2=454, y2=314)</p>

<h3 id="compute-the-background">COMPUTE THE BACKGROUND</h3>
<p># There is no single frame showing the background only (there
# is always a little pig in the screen) so we use the median of
# several carefully chosen frames to reconstitute the background.
# I must have spent half an hour to find the right set of frames.</p>

<p>times = (list(np.linspace(2.3,4.2,30))+
         list(np.linspace(6.0,7.1,30))+
         8*[6.2])</p>

<p>frames_bg = [pigsPolka.get_frame(t) for t in times]
background = np.percentile(np.array(frames_bg), 50,axis=0)</p>

<h3 id="mask-generation">MASK GENERATION</h3>

<p>def get_mask_frame(t):
    “”” Computes the mask for the frame at time t “””</p>

<pre><code># THRESHOLD THE PIXEL-TO-PIXEL DIFFERENCE
# BETWEEN THE FRAME AND THE BACKGROUND
im = pigsPolka.get_frame(t)
mask = ((im-background)**2).sum(axis=2) &gt; 1500

# REMOVE SMALL OBJECTS
mask = skm.remove_small_objects(mask)

# REMOVE SMALL HOLES (BY DILATIATION/EROSION)
selem=np.array([[1,1,1],[1,1,1],[1,1,1]])
for i in range(2):
    mask = skm.binary_dilation(mask,selem)
for i in range(2):
    mask = skm.binary_erosion(mask,selem)

# BLUR THE MASK A LITTLE
mask = skf.gaussian_filter(mask.astype(float),1.5)

return mask
</code></pre>

<p>mask = VideoClip(ismask=True).\
          set_get_frame(get_mask_frame).\
          set_duration(pigsPolka.duration)</p>

<h3 id="last-effects-and-gif-generation">LAST EFFECTS AND GIF GENERATION</h3>

<p>pigsPolka.set_mask(mask).\
          subclip(12.95,15.9).\
          fx(vfx.blackwhite).\ # black &amp; white effect !
          to_gif(‘pigs_polka.gif’, fps=10,
          dispose=True, fuzz=10)
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
